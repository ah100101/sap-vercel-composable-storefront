{"version":3,"file":"spartacus-cart-base-root.mjs","sources":["../../../feature-libs/cart/base/root/config/default-cart-config.ts","../../../feature-libs/cart/base/root/config/default-cart-routing-config.ts","../../../feature-libs/cart/base/root/context/order-entires.context.ts","../../../feature-libs/cart/base/root/events/cart.events.ts","../../../feature-libs/cart/base/root/feature-name.ts","../../../feature-libs/cart/base/root/facade/multi-cart.facade.ts","../../../feature-libs/cart/base/root/events/multi-cart-event.listener.ts","../../../feature-libs/cart/base/root/events/cart-base-event.module.ts","../../../feature-libs/cart/base/root/tokens/context.ts","../../../feature-libs/cart/base/root/cart-base-root.module.ts","../../../feature-libs/cart/base/root/config/cart-config.ts","../../../feature-libs/cart/base/root/context/index.ts","../../../feature-libs/cart/base/root/events/cart-page.events.ts","../../../feature-libs/cart/base/root/events/index.ts","../../../feature-libs/cart/base/root/facade/active-cart.facade.ts","../../../feature-libs/cart/base/root/facade/cart-validation.facade.ts","../../../feature-libs/cart/base/root/facade/cart-voucher.facade.ts","../../../feature-libs/cart/base/root/facade/selective-cart.facade.ts","../../../feature-libs/cart/base/root/facade/index.ts","../../../feature-libs/cart/base/root/models/cart-item-context.model.ts","../../../feature-libs/cart/base/root/models/cart-outlets.model.ts","../../../feature-libs/cart/base/root/models/cart.model.ts","../../../feature-libs/cart/base/root/models/import-export.model.ts","../../../feature-libs/cart/base/root/models/import-to-cart.model.ts","../../../feature-libs/cart/base/root/models/augmented.model.ts","../../../feature-libs/cart/base/root/models/index.ts","../../../feature-libs/cart/base/root/tokens/converters.ts","../../../feature-libs/cart/base/root/tokens/index.ts","../../../feature-libs/cart/base/root/public_api.ts","../../../feature-libs/cart/base/root/spartacus-cart-base-root.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CartConfig } from './cart-config';\n\nexport const defaultCartConfig: CartConfig = {\n  cart: {\n    validation: {\n      enabled: false,\n    },\n    selectiveCart: {\n      enabled: false,\n    },\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { RoutingConfig } from '@spartacus/core';\n\nexport const defaultCartRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: {\n      cart: { paths: ['cart'] },\n    },\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { AddOrderEntriesContext } from './add-order-entries.context';\nimport { GetOrderEntriesContext } from './get-order-entries.context';\n\nexport const ORDER_ENTRIES_CONTEXT = Symbol('ORDER_ENTRIES_CONTEXT');\n\nexport type OrderEntriesContext = Partial<\n  AddOrderEntriesContext & GetOrderEntriesContext\n>;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CxEvent } from '@spartacus/core';\nimport { OrderEntry } from '../models/cart.model';\n\n/**\n * Base cart event. Most cart events should have these properties.\n */\nexport abstract class CartEvent extends CxEvent {\n  /**\n   * Usually set via `getCartIdByUserId()` util method,\n   * It is an abstraction over the different properties\n   * used for anonymous and logged-in users' carts:\n   * - `code` for logged-in users\n   * - `guid` for anonymous users\n   */\n  cartId: string;\n  /**\n   * All carts have the `code` property assigned to them,\n   * regardless of whether they are anonymous or logged-in.\n   * In case of logged-in users, the `cartCode` and `cartId` are the same.\n   */\n  cartCode: string;\n  /**\n   * User ID.\n   */\n  userId: string;\n}\n\nexport class CreateCartEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CreateCartEvent';\n}\n\nexport class CreateCartSuccessEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CreateCartSuccessEvent';\n}\n\nexport class CreateCartFailEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CreateCartFailEvent';\n  error: any;\n}\n\nexport class CartAddEntryEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartAddEntryEvent';\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartAddEntrySuccessEvent';\n  productCode: string;\n  quantity: number;\n  entry?: OrderEntry;\n  quantityAdded?: number;\n  deliveryModeChanged?: boolean;\n}\n\nexport class CartAddEntryFailEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartAddEntryFailEvent';\n  productCode: string;\n  quantity: number;\n  error?: unknown;\n}\n\nexport class CartRemoveEntryFailEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartRemoveEntryFailEvent';\n  entry: OrderEntry;\n}\n\nexport class CartRemoveEntrySuccessEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartRemoveEntrySuccessEvent';\n  entry: OrderEntry;\n}\n\nexport class CartUpdateEntrySuccessEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartUpdateEntrySuccessEvent';\n  quantity: number;\n  entry: OrderEntry;\n}\n\nexport class CartUpdateEntryFailEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartUpdateEntryFailEvent';\n  quantity: number;\n  entry: OrderEntry;\n}\n\nexport class CartUiEventAddToCart extends CxEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CartUiEventAddToCart';\n  productCode: string;\n  quantity: number;\n  numberOfEntriesBeforeAdd: number;\n  pickupStoreName?: string;\n}\n\n/**\n * Fired when the cart has been successfully merged.\n */\nexport class MergeCartSuccessEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'MergeCartSuccessEvent';\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId?: string;\n  /** Extra data */\n  extraData?: { active?: boolean };\n}\n\n/**\n * Triggers the loading of the cart.\n */\nexport class LoadCartEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'LoadCartEvent';\n}\n\n/** Removes the cart. */\nexport class RemoveCartEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'RemoveCartEvent';\n}\n\n/**\n * Fired when the cart has been deleted.\n */\nexport class DeleteCartEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'DeleteCartEvent';\n}\n\nexport class DeleteCartSuccessEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'DeleteCartSuccessEvent';\n}\n\nexport class DeleteCartFailEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'DeleteCartFailEvent';\n}\n\nexport class AddCartVoucherEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type: string = 'AddCartVoucherEvent';\n  voucherId: string;\n}\n\nexport class AddCartVoucherSuccessEvent extends AddCartVoucherEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'AddCartVoucherSuccessEvent';\n}\n\nexport class AddCartVoucherFailEvent extends AddCartVoucherEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'AddCartVoucherFailEvent';\n  error: unknown;\n}\n\nexport class RemoveCartVoucherEvent extends CartEvent {\n  /**\n   * Event's type\n   */\n  static readonly type: string = 'RemoveCartVoucherEvent';\n  voucherId: string;\n}\n\nexport class RemoveCartVoucherSuccessEvent extends RemoveCartVoucherEvent {\n  /**\n   * Event's type\n   */\n  static readonly type: string = 'RemoveCartVoucherSuccessEvent';\n}\n\nexport class RemoveCartVoucherFailEvent extends RemoveCartVoucherEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'RemoveCartVoucherFailEvent';\n  error: unknown;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const CART_BASE_FEATURE = 'cartBase';\nexport const CART_BASE_CORE_FEATURE = 'cartBaseCore';\n\nexport const MINI_CART_FEATURE = 'miniCart';\nexport const ADD_TO_CART_FEATURE = 'addToCart';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { facadeFactory, StateUtils } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CART_BASE_CORE_FEATURE } from '../feature-name';\nimport { Cart, CartType, OrderEntry } from '../models/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: MultiCartFacade,\n      feature: CART_BASE_CORE_FEATURE,\n      methods: [\n        'getCart',\n        'getCarts',\n        'getCartEntity',\n        'isStable',\n        'createCart',\n        'mergeToCurrentCart',\n        'loadCart',\n        'getEntries',\n        'getLastEntry',\n        'addEntry',\n        'addEntries',\n        'removeEntry',\n        'updateEntry',\n        'getEntry',\n        'assignEmail',\n        'removeCart',\n        'deleteCart',\n        'reloadCart',\n        'getCartIdByType',\n      ],\n      async: true,\n    }),\n})\nexport abstract class MultiCartFacade {\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  abstract getCart(cartId: string): Observable<Cart>;\n\n  /**\n   * Returns a list of carts from store as an observable\n   *\n   */\n  abstract getCarts(): Observable<Cart[]>;\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  abstract getCartEntity(\n    cartId: string\n  ): Observable<StateUtils.ProcessesLoaderState<Cart | undefined>>;\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  abstract isStable(cartId: string): Observable<boolean>;\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  abstract createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<Cart>;\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  abstract mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): void;\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  abstract loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void;\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  abstract getEntries(cartId: string): Observable<OrderEntry[]>;\n\n  /**\n   * Get last entry for specific product code from cart.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param cartId\n   * @param productCode\n   */\n  abstract getLastEntry(\n    cartId: string,\n    productCode: string\n  ): Observable<OrderEntry | undefined>;\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  abstract addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number,\n    pickupStore?: string\n  ): void;\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  abstract addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void;\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract removeEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number\n  ): void;\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  abstract updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity?: number,\n    pickupStore?: string,\n    pickupToDelivery?: boolean\n  ): void;\n\n  /**\n   * Get first entry from cart matching the specified product code\n   *\n   * @param cartId\n   * @param productCode\n   */\n  abstract getEntry(\n    cartId: string,\n    productCode: string\n  ): Observable<OrderEntry | undefined>;\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  abstract assignEmail(cartId: string, userId: string, email: string): void;\n\n  /**\n   * Remove cart\n   *\n   * Removes the cart from the state.\n   * To remove a cart from the state and back-end, please use `DeleteCart` action.\n   *\n   * @param cartId\n   */\n  abstract removeCart(cartId: string): void;\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  abstract deleteCart(cartId: string, userId: string): void;\n\n  /**\n   * Reloads the cart with specified id.\n   *\n   * @param cartId\n   * @param extraData\n   */\n  abstract reloadCart(cartId: string, extraData?: { active: boolean }): void;\n\n  /**\n   * Get the cart id based on cart type\n   *\n   * @param cartType\n   */\n  abstract getCartIdByType(cartType: CartType): Observable<string>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { EventService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { MultiCartFacade } from '../facade/multi-cart.facade';\nimport { LoadCartEvent, RemoveCartEvent } from './cart.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(\n    protected eventService: EventService,\n    protected multiCartFacade: MultiCartFacade\n  ) {\n    this.onCartBaseAction();\n  }\n\n  /**\n   * Registers events for the cart base actions.\n   */\n  protected onCartBaseAction(): void {\n    this.subscriptions.add(\n      this.eventService.get(LoadCartEvent).subscribe(({ userId, cartId }) => {\n        if (userId && cartId) {\n          this.multiCartFacade.loadCart({ userId, cartId });\n        }\n      })\n    );\n\n    this.subscriptions.add(\n      this.eventService.get(RemoveCartEvent).subscribe(({ cartId }) => {\n        this.multiCartFacade.removeCart(cartId);\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { MultiCartEventListener } from './multi-cart-event.listener';\n\n@NgModule({})\nexport class CartBaseEventModule {\n  constructor(_multiCartEventListener: MultiCartEventListener) {\n    // Intentional empty constructor\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\n\nexport const ActiveCartOrderEntriesContextToken = new InjectionToken(\n  'ActiveCartOrderEntriesContext'\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '@spartacus/storefront';\nimport { defaultCartConfig } from './config/default-cart-config';\nimport { defaultCartRoutingConfig } from './config/default-cart-routing-config';\nimport { ORDER_ENTRIES_CONTEXT } from './context/order-entires.context';\nimport { CartBaseEventModule } from './events/cart-base-event.module';\nimport {\n  ADD_TO_CART_FEATURE,\n  CART_BASE_CORE_FEATURE,\n  CART_BASE_FEATURE,\n  MINI_CART_FEATURE,\n} from './feature-name';\nimport { ActiveCartOrderEntriesContextToken } from './tokens/context';\n\nexport function defaultCartComponentsConfig() {\n  const config = {\n    featureModules: {\n      [CART_BASE_FEATURE]: {\n        cmsComponents: [\n          'CartApplyCouponComponent',\n          'CartComponent',\n          'CartProceedToCheckoutComponent',\n          'CartTotalsComponent',\n          'SaveForLaterComponent',\n          'ClearCartComponent',\n        ],\n      },\n      [MINI_CART_FEATURE]: {\n        cmsComponents: ['MiniCartComponent'],\n      },\n      [ADD_TO_CART_FEATURE]: {\n        cmsComponents: ['ProductAddToCartComponent'],\n      },\n      // By default core is bundled together with components.\n      // The cart lib should keep using this default.\n      //\n      // While the lazy loading configurations make it possible to\n      // split the core part and the components part, it is required that\n      // they stay together for the cart lib.  This compromise is required to\n      // optimize performances by delaying the moment the cart lib is loaded and\n      // making sure cart lib is loaded when needed.\n      [CART_BASE_CORE_FEATURE]: CART_BASE_FEATURE,\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CartBaseEventModule,\n    RouterModule.forChild([\n      {\n        // @ts-ignore\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'cart',\n          cxContext: {\n            [ORDER_ENTRIES_CONTEXT]: ActiveCartOrderEntriesContextToken,\n          },\n        },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultCartComponentsConfig),\n    provideDefaultConfig(defaultCartConfig),\n    provideDefaultConfig(defaultCartRoutingConfig),\n  ],\n})\nexport class CartBaseRootModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n// Imported for side effects (module augmentation)\nimport '@spartacus/storefront';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n    validation?: {\n      enabled?: boolean;\n    };\n  };\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends CartConfig {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './add-order-entries.context';\nexport * from './get-order-entries.context';\nexport * from './order-entires.context';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PageEvent } from '@spartacus/storefront';\n\n/**\n * Indicates that a user visited a cart page.\n */\nexport class CartPageEvent extends PageEvent {\n  /** event's type */\n  static readonly type = 'CartPageEvent';\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-base-event.module';\nexport * from './cart-page.events';\nexport * from './cart.events';\nexport * from './multi-cart-event.listener';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { facadeFactory, User } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CART_BASE_CORE_FEATURE } from '../feature-name';\nimport { Cart, OrderEntry } from '../models/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: ActiveCartFacade,\n      feature: CART_BASE_CORE_FEATURE,\n      methods: [\n        'getActive',\n        'takeActive',\n        'getActiveCartId',\n        'takeActiveCartId',\n        'getEntries',\n        'getLastEntry',\n        'getLoading',\n        'isStable',\n        'addEntry',\n        'removeEntry',\n        'updateEntry',\n        'getEntry',\n        'addEmail',\n        'getAssignedUser',\n        'isGuestCart',\n        'addEntries',\n        'requireLoadedCart',\n        'reloadActiveCart',\n        'hasPickupItems',\n        'hasDeliveryItems',\n        'getPickupEntries',\n        'getDeliveryEntries',\n      ],\n      async: true,\n    }),\n})\nexport abstract class ActiveCartFacade {\n  /**\n   * Returns active cart\n   */\n  abstract getActive(): Observable<Cart>;\n\n  /**\n   * Waits for the cart to be stable before returning the active cart.\n   */\n  abstract takeActive(): Observable<Cart>;\n\n  /**\n   * Returns active cart id\n   */\n  abstract getActiveCartId(): Observable<string>;\n\n  /**\n   * Waits for the cart to be stable before returning the active cart's ID.\n   */\n  abstract takeActiveCartId(): Observable<string>;\n\n  /**\n   * Returns cart entries\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns last cart entry for provided product code.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param productCode\n   */\n  abstract getLastEntry(\n    productCode: string\n  ): Observable<OrderEntry | undefined>;\n\n  /**\n   * Returns cart loading state\n   */\n  abstract getLoading(): Observable<boolean>;\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  abstract isStable(): Observable<boolean>;\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  abstract addEntry(\n    productCode: string,\n    quantity: number,\n    pickupStore?: string\n  ): void;\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  abstract removeEntry(entry: OrderEntry): void;\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   * @param pickupStore\n   * @param pickupToDelivery\n   */\n  abstract updateEntry(\n    entryNumber: number,\n    quantity: number,\n    pickupStore?: string,\n    pickupToDelivery?: boolean\n  ): void;\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  abstract getEntry(productCode: string): Observable<OrderEntry | undefined>;\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  abstract addEmail(email: string): void;\n\n  /**\n   * Get assigned user to cart\n   */\n  abstract getAssignedUser(): Observable<User>;\n\n  /**\n   * Returns observable of true for guest cart\n   */\n  abstract isGuestCart(cart?: Cart): Observable<boolean>;\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  abstract addEntries(cartEntries: OrderEntry[]): void;\n\n  abstract requireLoadedCart(forGuestMerge?: boolean): Observable<Cart>;\n\n  abstract reloadActiveCart(): void;\n\n  /**\n   * Return whether cart has pickup items\n   */\n  abstract hasPickupItems(): Observable<boolean>;\n\n  /**\n   * Return whether cart has delivery items\n   */\n  abstract hasDeliveryItems(): Observable<boolean>;\n\n  /**\n   * Return cart's pickup entries\n   */\n  abstract getPickupEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Return cart's delivery entries\n   */\n  abstract getDeliveryEntries(): Observable<OrderEntry[]>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { facadeFactory } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CART_BASE_CORE_FEATURE } from '../feature-name';\nimport { CartModification, CartModificationList } from '../models/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CartValidationFacade,\n      feature: CART_BASE_CORE_FEATURE,\n      methods: ['validateCart', 'getValidationResults'],\n    }),\n})\nexport abstract class CartValidationFacade {\n  /**\n   * Validates cart, and returns cart modification list.\n   */\n  abstract validateCart(): Observable<CartModificationList>;\n\n  /**\n   * Returns cart modification results\n   */\n  abstract getValidationResults(): Observable<CartModification[]>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { facadeFactory } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CART_BASE_CORE_FEATURE } from '../feature-name';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CartVoucherFacade,\n      feature: CART_BASE_CORE_FEATURE,\n      methods: [\n        'addVoucher',\n        'removeVoucher',\n        'getAddVoucherResultError',\n        'getAddVoucherResultSuccess',\n        'getAddVoucherResultLoading',\n        'resetAddVoucherProcessingState',\n      ],\n      async: true,\n    }),\n})\nexport abstract class CartVoucherFacade {\n  abstract addVoucher(voucherId: string, cartId?: string): void;\n\n  abstract removeVoucher(voucherId: string, cartId?: string): void;\n\n  /**\n   * Get add voucher process error flag\n   */\n  abstract getAddVoucherResultError(): Observable<boolean>;\n\n  /**\n   * Get add voucher process success flag\n   */\n  abstract getAddVoucherResultSuccess(): Observable<boolean>;\n\n  /**\n   * Get add voucher process loading flag\n   */\n  abstract getAddVoucherResultLoading(): Observable<boolean>;\n\n  /**\n   * Reset add voucher process\n   */\n  abstract resetAddVoucherProcessingState(): void;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { facadeFactory } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CART_BASE_CORE_FEATURE } from '../feature-name';\nimport { Cart, OrderEntry } from '../models/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: SelectiveCartFacade,\n      feature: CART_BASE_CORE_FEATURE,\n      methods: [\n        'getCart',\n        'getEntries',\n        'isStable',\n        'addEntry',\n        'removeEntry',\n        'updateEntry',\n        'getEntry',\n      ],\n      async: true,\n    }),\n})\nexport abstract class SelectiveCartFacade {\n  abstract getCart(): Observable<Cart>;\n\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns true when selective cart is stable (not loading and not pending processes on cart)\n   */\n  abstract isStable(): Observable<boolean>;\n\n  abstract addEntry(productCode: string, quantity: number): void;\n\n  abstract removeEntry(entry: OrderEntry): void;\n\n  abstract updateEntry(entryNumber: number, quantity: number): void;\n\n  abstract getEntry(productCode: string): Observable<OrderEntry | undefined>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './active-cart.facade';\nexport * from './cart-validation.facade';\nexport * from './cart-voucher.facade';\nexport * from './multi-cart.facade';\nexport * from './selective-cart.facade';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OrderEntry } from '../models/cart.model';\nimport { CartItemComponentOptions, PromotionLocation } from './cart.model';\n\n/**\n * Context for `CartItemComponent`.\n */\n@Injectable()\nexport abstract class CartItemContext {\n  readonly compact$: Observable<boolean>;\n\n  readonly readonly$: Observable<boolean>;\n\n  readonly item$: Observable<OrderEntry>;\n\n  readonly quantityControl$: Observable<UntypedFormControl>;\n\n  readonly location$: Observable<PromotionLocation>;\n\n  readonly options$: Observable<CartItemComponentOptions>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Identifiers of outlets inside the cart details view.\n */\nexport enum CartOutlets {\n  ITEM = 'cx-cart-item',\n  LIST_ITEM = 'cx-cart-item-list-row',\n  ITEM_DETAILS = 'cx-cart-item.details',\n  ITEM_CONFIGURATOR_ISSUES = 'cx-configurator-issues-notification',\n  ITEM_BUNDLE_DETAILS = 'cx-cart-item.bundle-details',\n  ITEM_DELIVERY_DETAILS = 'cx-cart-item.delivery-details',\n  ORDER_SUMMARY = 'cx-order-summary',\n  CART_ITEM_LIST = 'cx-cart-item-list',\n  ADD_TO_CART_CONTAINER = 'cx-add-to-cart-container',\n  PICKUP_INFO = 'cx-pickup-info',\n  ADD_TO_CART_PICKUP_OPTION = 'cx-add-to-cart-pickup-option',\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Address,\n  CostCenter,\n  Currency,\n  PointOfService,\n  Price,\n  Principal,\n  Product,\n  Promotion,\n} from '@spartacus/core';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n  SaveForLater = 'SAVE_FOR_LATER',\n  SavedCart = 'SAVED_CART',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface PaymentType {\n  code?: string;\n  displayName?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  costCenter?: CostCenter;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  paymentType?: PaymentType;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  purchaseOrderNumber?: string;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n  displayAddToCart?: boolean;\n  addToCartString?: string;\n  cartType?: CartType;\n}\n\nexport interface OrderEntry {\n  orderCode?: string;\n  basePrice?: Price;\n  deliveryMode?: DeliveryMode;\n  deliveryPointOfService?: PointOfService;\n  entryNumber?: number;\n  product?: Product;\n  quantity?: number;\n  totalPrice?: Price;\n  updateable?: boolean;\n  returnedItemsPrice?: Price;\n  returnableQuantity?: number;\n  cancelledItemsPrice?: Price;\n  cancellableQuantity?: number;\n  promotions?: PromotionResult[];\n}\n\nexport interface PickupOrderEntryGroup {\n  deliveryPointOfService?: PointOfService;\n  distance?: number;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface PromotionOrderEntryConsumed {\n  adjustedUnitPrice?: number;\n  code?: string;\n  orderEntryNumber?: number;\n  quantity?: number;\n}\n\nexport interface ConsignmentEntry {\n  orderEntry?: OrderEntry;\n  quantity?: number;\n  shippedQuantity?: number;\n}\n\nexport interface DeliveryMode {\n  code?: string;\n  deliveryCost?: Price;\n  description?: string;\n  name?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport enum CartType {\n  ACTIVE = 'Active',\n  WISH_LIST = 'WishList',\n  SELECTIVE = 'Selective',\n  NEW_CREATED = 'NewCreated',\n}\n\nexport interface CartModificationList {\n  cartModifications?: CartModification[];\n}\n\nexport enum CartValidationStatusCode {\n  NO_STOCK = 'noStock',\n  LOW_STOCK = 'lowStock',\n  REVIEW_CONFIGURATION = 'reviewConfiguration',\n  PRICING_ERROR = 'pricingError',\n  UNRESOLVABLE_ISSUES = 'unresolvableIssues',\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport enum OrderEntriesSource {\n  ACTIVE_CART = 'ACTIVE_CART',\n  NEW_SAVED_CART = 'NEW_SAVED_CART',\n  QUICK_ORDER = 'QUICK_ORDER',\n  SAVED_CART = 'SAVED_CART',\n  ORDER_CONFIRMATION = 'ORDER_CONFIRMATION',\n  ORDER_DETAILS = 'ORDER_DETAILS',\n  UNIT_ORDER_DETAILS = 'UNIT_ORDER_DETAILS',\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport type ProductData = {\n  productCode: string;\n  quantity: number;\n};\n\nexport enum ProductImportStatus {\n  SUCCESS = 'success',\n  LOW_STOCK = 'lowStock',\n  NO_STOCK = 'noStock',\n  UNKNOWN_IDENTIFIER = 'unknownIdentifier',\n  UNKNOWN_ERROR = 'unknownError',\n  LIMIT_EXCEEDED = 'limitExceeded',\n}\n\nexport interface ProductImportInfo {\n  productCode: string;\n  statusCode: ProductImportStatus;\n  productName?: string;\n  quantity?: number;\n  quantityAdded?: number;\n}\n\nexport interface ProductImportSummary {\n  loading: boolean;\n  cartName: string | undefined;\n  count: number;\n  total: number;\n  successesCount: number;\n  warningMessages: ProductImportInfo[];\n  errorMessages: ProductImportInfo[];\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '@spartacus/storefront';\n\ndeclare module '@spartacus/storefront' {\n  const enum LAUNCH_CALLER {\n    CLEAR_CART = 'CLEAR_CART',\n    ADDED_TO_CART = 'ADDED_TO_CART',\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-item-context.model';\nexport * from './cart-outlets.model';\nexport * from './cart.model';\nexport * from './import-export.model';\nexport * from './import-to-cart.model';\nexport * from './augmented.model';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport {\n  Cart,\n  CartModification,\n  PromotionResult,\n  SaveCartResult,\n  Voucher,\n} from '../models/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n\nexport const ORDER_ENTRY_PROMOTIONS_NORMALIZER = new InjectionToken<\n  Converter<any, PromotionResult[]>\n>('OrderEntryPromotionsNormalizer');\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './context';\nexport * from './converters';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-base-root.module';\nexport * from './config/cart-config';\nexport * from './context/index';\nexport * from './events/index';\nexport * from './facade/index';\nexport * from './feature-name';\nexport * from './models/index';\nexport * from './tokens/index';\n\n/** AUGMENTABLE_TYPES_START */\nexport { Cart, DeliveryMode, OrderEntry } from './models/cart.model';\n/** AUGMENTABLE_TYPES_END */\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i2.MultiCartFacade","i1.MultiCartEventListener","i1"],"mappings":"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"}