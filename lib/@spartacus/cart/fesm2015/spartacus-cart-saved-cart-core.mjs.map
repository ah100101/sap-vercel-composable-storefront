{"version":3,"file":"spartacus-cart-saved-cart-core.mjs","sources":["../../../feature-libs/cart/saved-cart/core/connectors/saved-cart.adapter.ts","../../../feature-libs/cart/saved-cart/core/connectors/saved-cart.connector.ts","../../../feature-libs/cart/saved-cart/core/connectors/index.ts","../../../feature-libs/cart/saved-cart/core/store/saved-cart-constants.ts","../../../feature-libs/cart/saved-cart/core/store/actions/saved-cart.action.ts","../../../feature-libs/cart/saved-cart/core/store/actions/index.ts","../../../feature-libs/cart/saved-cart/core/events/saved-cart-event.builder.ts","../../../feature-libs/cart/saved-cart/core/events/saved-cart-events.module.ts","../../../feature-libs/cart/saved-cart/core/events/index.ts","../../../feature-libs/cart/saved-cart/core/store/effects/saved-cart.effect.ts","../../../feature-libs/cart/saved-cart/core/store/effects/index.ts","../../../feature-libs/cart/saved-cart/core/store/saved-cart-store.module.ts","../../../feature-libs/cart/saved-cart/core/facade/saved-cart.service.ts","../../../feature-libs/cart/saved-cart/core/facade/facade-providers.ts","../../../feature-libs/cart/saved-cart/core/saved-cart-core.module.ts","../../../feature-libs/cart/saved-cart/core/facade/index.ts","../../../feature-libs/cart/saved-cart/core/public_api.ts","../../../feature-libs/cart/saved-cart/core/spartacus-cart-saved-cart-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Cart } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class SavedCartAdapter {\n  /**\n   *\n   * Abstract method used to load a single saved cart\n   */\n  abstract load(userId: String, cartId: String): Observable<Cart>;\n  /**\n   *\n   * Abstract method used to load a list of saved carts\n   */\n  abstract loadList(userId: string): Observable<Cart[]>;\n  /**\n   *\n   * Abstract method used to restore a saved cart to an active cart\n   */\n  abstract restoreSavedCart(userId: string, cartId: string): Observable<Cart>;\n  /**\n   *\n   * Abstract method used to clone a saved cart\n   */\n  abstract cloneSavedCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string\n  ): Observable<Cart>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Cart } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { SavedCartAdapter } from './saved-cart.adapter';\n\n@Injectable()\nexport class SavedCartConnector {\n  constructor(protected adapter: SavedCartAdapter) {}\n\n  get(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  getList(userId: string): Observable<Cart[]> {\n    return this.adapter.loadList(userId);\n  }\n\n  restoreSavedCart(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.restoreSavedCart(userId, cartId);\n  }\n\n  cloneSavedCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string\n  ): Observable<Cart> {\n    return this.adapter.cloneSavedCart(userId, cartId, saveCartName);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './saved-cart.adapter';\nexport * from './saved-cart.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const SAVED_CART_LIST_PROCESS_ID = 'saved-cart-list';\nexport const SAVED_CART_RESTORE_CART_PROCESS_ID = 'saved-cart-restore-cart';\nexport const SAVED_CART_SAVE_CART_PROCESS_ID = 'saved-cart-save-cart';\nexport const SAVED_CART_CLONE_CART_PROCESS_ID = 'saved-cart-clone-cart';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MULTI_CART_DATA } from '@spartacus/cart/base/core';\nimport { PROCESS_FEATURE, StateUtils } from '@spartacus/core';\nimport {\n  SAVED_CART_CLONE_CART_PROCESS_ID,\n  SAVED_CART_LIST_PROCESS_ID,\n  SAVED_CART_RESTORE_CART_PROCESS_ID,\n  SAVED_CART_SAVE_CART_PROCESS_ID,\n} from '../saved-cart-constants';\n\nexport const LOAD_SAVED_CART = '[Saved Cart] Load Saved Cart';\nexport const LOAD_SAVED_CART_SUCCESS = '[Saved Cart] Load Saved Cart Success';\nexport const LOAD_SAVED_CART_FAIL = '[Saved Cart] Load Saved Cart Fail';\n\nexport const LOAD_SAVED_CARTS = '[Saved Cart] Load Saved Carts';\nexport const LOAD_SAVED_CARTS_SUCCESS = '[Saved Cart] Load Saved Carts Success';\nexport const LOAD_SAVED_CARTS_FAIL = '[Saved Cart] Load Saved Carts Fail';\nexport const CLEAR_SAVED_CARTS = '[Saved Cart] Clear Saved Carts';\n\nexport const RESTORE_SAVED_CART = '[Saved Cart] Restore Saved Cart';\nexport const RESTORE_SAVED_CART_SUCCESS =\n  '[Saved Cart] Restore Saved Cart Success';\nexport const RESTORE_SAVED_CART_FAIL = '[Saved Cart] Restore Saved Cart Fail';\nexport const CLEAR_RESTORE_SAVED_CART = '[Saved Cart] Clear Restore Saved Cart';\n\nexport const SAVE_CART = '[Saved Cart] Save Cart';\nexport const SAVE_CART_SUCCESS = '[Saved Cart] Save Cart Success';\nexport const SAVE_CART_FAIL = '[Saved Cart] Save Cart Fail';\nexport const CLEAR_SAVE_CART = '[Saved Cart] Clear Save Cart';\n\nexport const EDIT_SAVED_CART = '[Saved Cart] Edit Saved Cart';\nexport const EDIT_SAVED_CART_SUCCESS = '[Saved Cart] Edit Saved Cart Success';\nexport const EDIT_SAVED_CART_FAIL = '[Saved Cart] Edit Saved Cart Fail';\n\nexport const CLONE_SAVED_CART = '[Saved Cart] Clone Saved Cart';\nexport const CLONE_SAVED_CART_SUCCESS = '[Saved Cart] Clone Saved Cart Success';\nexport const CLONE_SAVED_CART_FAIL = '[Saved Cart] Clone Saved Cart Fail';\nexport const CLEAR_CLONE_SAVED_CART = '[Saved Cart] Clear Clone Saved Cart';\n\nexport class LoadSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SAVED_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload?.error);\n  }\n}\n\nexport class LoadSavedCarts extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SAVED_CARTS;\n  constructor(\n    public payload: {\n      userId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n  }\n}\n\nexport class LoadSavedCartsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SAVED_CARTS_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n  }\n}\n\nexport class LoadSavedCartsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SAVED_CARTS_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearSavedCarts extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_SAVED_CARTS;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n  }\n}\n\nexport class RestoreSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = RESTORE_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n  }\n}\n\nexport class RestoreSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = RESTORE_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n  }\n}\n\nexport class RestoreSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = RESTORE_SAVED_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearRestoreSavedCart extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_RESTORE_SAVED_CART;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n  }\n}\n\nexport class SaveCart extends StateUtils.EntityLoadAction {\n  readonly type = SAVE_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class SaveCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SAVE_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class SaveCartFail extends StateUtils.EntityFailAction {\n  readonly type = SAVE_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearSaveCart extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_SAVE_CART;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class EditSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = EDIT_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class EditSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = EDIT_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class EditSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = EDIT_SAVED_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CloneSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = CLONE_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n  }\n}\n\nexport class CloneSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CLONE_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n  }\n}\n\nexport class CloneSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = CLONE_SAVED_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearCloneSavedCart extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_CLONE_SAVED_CART;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n  }\n}\n\nexport type SavedCartActions =\n  | LoadSavedCart\n  | LoadSavedCartSuccess\n  | LoadSavedCartFail\n  | LoadSavedCarts\n  | LoadSavedCartsSuccess\n  | LoadSavedCartsFail\n  | ClearSavedCarts\n  | RestoreSavedCart\n  | RestoreSavedCartSuccess\n  | RestoreSavedCartFail\n  | ClearRestoreSavedCart\n  | SaveCart\n  | SaveCartSuccess\n  | SaveCartFail\n  | ClearSaveCart\n  | EditSavedCart\n  | EditSavedCartSuccess\n  | EditSavedCartFail\n  | CloneSavedCart\n  | CloneSavedCartSuccess\n  | CloneSavedCartFail\n  | ClearCloneSavedCart;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as SavedCartActions from './saved-cart.action';\n\nexport { SavedCartActions };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { MultiCartFacade } from '@spartacus/cart/base/root';\nimport {\n  CloneSavedCartEvent,\n  CloneSavedCartFailEvent,\n  CloneSavedCartSuccessEvent,\n  EditSavedCartEvent,\n  EditSavedCartFailEvent,\n  EditSavedCartSuccessEvent,\n  RestoreSavedCartEvent,\n  RestoreSavedCartFailEvent,\n  RestoreSavedCartSuccessEvent,\n  SaveCartEvent,\n  SaveCartFailEvent,\n  SaveCartSuccessEvent,\n} from '@spartacus/cart/saved-cart/root';\nimport {\n  ActionToEventMapping,\n  createFrom,\n  EventService,\n  StateEventService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { SavedCartActions } from '../store/actions/index';\n\n@Injectable({ providedIn: 'root' })\nexport class SavedCartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService,\n    protected stateEventService: StateEventService,\n    protected multiCartService: MultiCartFacade\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the saved cart\n   */\n  protected register(): void {\n    this.registerRestoreSavedCartEvents();\n    this.registerSaveCartEvents();\n    this.registerEditSavedCartEvents();\n    this.registerCloneSavedCartEvents();\n  }\n\n  /**\n   * Registers restore saved cart events\n   */\n  protected registerRestoreSavedCartEvents(): void {\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.RESTORE_SAVED_CART,\n      event: RestoreSavedCartEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.RESTORE_SAVED_CART_SUCCESS,\n      event: RestoreSavedCartSuccessEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.RESTORE_SAVED_CART_FAIL,\n      event: RestoreSavedCartFailEvent,\n    });\n  }\n\n  /**\n   * Registers save cart events\n   */\n  protected registerSaveCartEvents(): void {\n    this.buildSaveCartSuccessEvent({\n      action: SavedCartActions.SAVE_CART_SUCCESS,\n      event: SaveCartSuccessEvent,\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.SAVE_CART_FAIL,\n      event: SaveCartFailEvent,\n      factory: (action: SavedCartActions.SaveCartFail) =>\n        createFrom(SaveCartFailEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.SAVE_CART,\n      event: SaveCartEvent,\n      factory: (action: SavedCartActions.SaveCart) => {\n        return createFrom(SaveCartEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        });\n      },\n    });\n  }\n\n  /**\n   * Registers edit saved cart events\n   */\n  protected registerEditSavedCartEvents(): void {\n    this.buildSaveCartSuccessEvent({\n      action: SavedCartActions.EDIT_SAVED_CART_SUCCESS,\n      event: EditSavedCartSuccessEvent,\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.EDIT_SAVED_CART_FAIL,\n      event: EditSavedCartFailEvent,\n      factory: (action: SavedCartActions.EditSavedCartFail) =>\n        createFrom(EditSavedCartFailEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.EDIT_SAVED_CART,\n      event: EditSavedCartEvent,\n      factory: (action: SavedCartActions.EditSavedCart) => {\n        return createFrom(EditSavedCartEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        });\n      },\n    });\n  }\n\n  /**\n   * Registers clone saved cart events\n   */\n  protected registerCloneSavedCartEvents(): void {\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.CLONE_SAVED_CART,\n      event: CloneSavedCartEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.CLONE_SAVED_CART_SUCCESS,\n      event: CloneSavedCartSuccessEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.CLONE_SAVED_CART_FAIL,\n      event: CloneSavedCartFailEvent,\n    });\n  }\n\n  /**\n   * Builds the restore save cart events from the action and cart\n   *\n   * @param mapping mapping declaration from `action` string type to `event` class type\n   * @param saveTime should the saveTime attribute be added to the event\n   * @returns\n   */\n  protected buildRestoreSavedCartEvents<T>(\n    mapping: ActionToEventMapping<T>\n  ): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      switchMap((action) =>\n        of(action).pipe(\n          withLatestFrom(this.multiCartService.getCart(action.payload.cartId))\n        )\n      ),\n      map(([action, cart]) =>\n        createFrom(mapping.event as Type<T>, {\n          ...action.payload,\n          cartCode: cart.code,\n          saveCartName: cart.name,\n          saveCartDescription: cart.description,\n          ...(cart.saveTime && { saveTime: cart.saveTime }),\n        })\n      )\n    );\n    return this.eventService.register(mapping.event as Type<T>, eventStream$);\n  }\n\n  /**\n   * Builds save cart event by adding the saveTime from the cart\n   *\n   * @param mapping mapping declaration from `action` string type to `event` class type\n   * @returns events register function\n   */\n  protected buildSaveCartSuccessEvent<T>(\n    mapping: ActionToEventMapping<T>\n  ): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      switchMap((action) =>\n        of(action).pipe(\n          withLatestFrom(this.multiCartService.getCart(action.payload.cartId))\n        )\n      ),\n      filter(([, cart]) => Boolean(cart)),\n      map(([action, cart]) =>\n        createFrom(mapping.event as Type<T>, {\n          ...action.payload,\n          cartCode: cart.code,\n          saveTime: cart.saveTime,\n        })\n      )\n    );\n    return this.eventService.register(mapping.event as Type<T>, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(\n      ofType(...([] as string[]).concat(actionType))\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { SavedCartEventBuilder } from './saved-cart-event.builder';\n\n@NgModule({})\nexport class SavedCartEventsModule {\n  constructor(_savedCartEventBuilder: SavedCartEventBuilder) {\n    // Intentional empty constructor\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './saved-cart-event.builder';\nexport * from './saved-cart-events.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { CartActions, CartConnector } from '@spartacus/cart/base/core';\nimport { ActiveCartFacade, Cart } from '@spartacus/cart/base/root';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { SavedCartConnector } from '../../connectors/saved-cart.connector';\nimport { SavedCartActions } from '../actions/index';\n\n@Injectable()\nexport class SavedCartEffects {\n  loadSavedCart$: Observable<\n    | CartActions.LoadCartSuccess\n    | SavedCartActions.LoadSavedCartFail\n    | SavedCartActions.LoadSavedCartSuccess\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SavedCartActions.LOAD_SAVED_CART),\n      map((action: SavedCartActions.LoadSavedCart) => action.payload),\n      switchMap(({ userId, cartId }) =>\n        this.savedCartConnector.get(userId, cartId).pipe(\n          switchMap((savedCart: Cart) => {\n            return [\n              new CartActions.LoadCartSuccess({\n                userId,\n                cartId,\n                cart: savedCart,\n              }),\n              new SavedCartActions.LoadSavedCartSuccess({ userId, cartId }),\n            ];\n          }),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new SavedCartActions.LoadSavedCartFail({\n                userId,\n                cartId,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        )\n      )\n    )\n  );\n\n  loadSavedCarts$: Observable<\n    | CartActions.LoadCartsSuccess\n    | SavedCartActions.LoadSavedCartsFail\n    | SavedCartActions.LoadSavedCartsSuccess\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SavedCartActions.LOAD_SAVED_CARTS),\n      map((action: SavedCartActions.LoadSavedCarts) => action.payload),\n      switchMap(({ userId }) =>\n        this.savedCartConnector.getList(userId).pipe(\n          switchMap((savedCarts: Cart[]) => {\n            return [\n              new CartActions.LoadCartsSuccess(savedCarts),\n              new SavedCartActions.LoadSavedCartsSuccess({ userId }),\n            ];\n          }),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new SavedCartActions.LoadSavedCartsFail({\n                userId,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        )\n      )\n    )\n  );\n\n  restoreSavedCart$: Observable<\n    | SavedCartActions.RestoreSavedCartFail\n    | SavedCartActions.RestoreSavedCartSuccess\n    | SavedCartActions.LoadSavedCarts\n    | SavedCartActions.SaveCart\n    | CartActions.LoadCartSuccess\n    | CartActions.SetActiveCartId\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SavedCartActions.RESTORE_SAVED_CART),\n      map((action: SavedCartActions.RestoreSavedCart) => action.payload),\n      withLatestFrom(this.activeCartService.getActive()),\n      switchMap(([{ userId, cartId }, activeCart]) => {\n        const actions: any[] = [];\n\n        if ((activeCart?.entries ?? []).length > 0) {\n          if (activeCart.code) {\n            /**\n             * Instead of calling the SaveCartAction, we are calling the edit saved cart\n             * because we do not want to clear the state when we swap carts between active and saved cart\n             */\n            actions.push(\n              new SavedCartActions.EditSavedCart({\n                userId,\n                cartId: activeCart.code,\n                saveCartName: '',\n                saveCartDescription: '',\n              })\n            );\n          }\n        }\n\n        return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(\n          switchMap((savedCart: Cart) => {\n            this.globalMessageService.add(\n              {\n                key:\n                  (activeCart?.entries ?? []).length > 0\n                    ? 'savedCartList.swapCartWithActiveCart'\n                    : 'savedCartList.swapCartNoActiveCart',\n                params: {\n                  cartName: cartId,\n                  previousCartName: activeCart.code,\n                },\n              },\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return [\n              ...actions,\n              new CartActions.LoadCartSuccess({\n                userId,\n                cartId,\n                cart: savedCart,\n                extraData: { active: true },\n              }),\n              new SavedCartActions.RestoreSavedCartSuccess({ userId, cartId }),\n            ];\n          }),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new SavedCartActions.RestoreSavedCartFail({\n                userId,\n                cartId,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        );\n      })\n    )\n  );\n\n  saveCart$: Observable<\n    | SavedCartActions.SaveCartFail\n    | SavedCartActions.SaveCartSuccess\n    | SavedCartActions.SaveCart\n    | CartActions.LoadCartSuccess\n    | CartActions.ClearCartState\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SavedCartActions.SAVE_CART),\n      map((action: SavedCartActions.SaveCart) => action.payload),\n      switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {\n        return this.cartConnector\n          .save(userId, cartId, saveCartName, saveCartDescription)\n          .pipe(\n            switchMap((savedCart: Cart) => {\n              return [\n                new CartActions.ClearCartState(),\n                new CartActions.LoadCartSuccess({\n                  userId,\n                  cartId,\n                  cart: savedCart,\n                }),\n                new SavedCartActions.SaveCartSuccess({\n                  userId,\n                  cartId,\n                  saveCartName,\n                  saveCartDescription,\n                }),\n              ];\n            }),\n            catchError((error: HttpErrorResponse) =>\n              of(\n                new SavedCartActions.SaveCartFail({\n                  userId,\n                  cartId,\n                  saveCartName,\n                  saveCartDescription,\n                  error: normalizeHttpError(error),\n                })\n              )\n            )\n          );\n      })\n    )\n  );\n\n  editSavedCart$: Observable<\n    | SavedCartActions.EditSavedCartFail\n    | SavedCartActions.EditSavedCartSuccess\n    | SavedCartActions.EditSavedCart\n    | CartActions.LoadCartSuccess\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SavedCartActions.EDIT_SAVED_CART),\n      map((action: SavedCartActions.EditSavedCart) => action.payload),\n      switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {\n        return this.cartConnector\n          .save(userId, cartId, saveCartName, saveCartDescription)\n          .pipe(\n            switchMap((savedCart: Cart) => {\n              return [\n                new CartActions.LoadCartSuccess({\n                  userId,\n                  cartId,\n                  cart: savedCart,\n                }),\n                new SavedCartActions.EditSavedCartSuccess({\n                  userId,\n                  cartId,\n                  saveCartName,\n                  saveCartDescription,\n                }),\n              ];\n            }),\n            catchError((error: HttpErrorResponse) =>\n              of(\n                new SavedCartActions.EditSavedCartFail({\n                  userId,\n                  cartId,\n                  saveCartName,\n                  saveCartDescription,\n                  error: normalizeHttpError(error),\n                })\n              )\n            )\n          );\n      })\n    )\n  );\n\n  cloneSavedCart$: Observable<\n    | SavedCartActions.CloneSavedCartFail\n    | SavedCartActions.CloneSavedCartSuccess\n    | SavedCartActions.CloneSavedCart\n    | SavedCartActions.RestoreSavedCart\n    | SavedCartActions.LoadSavedCarts\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SavedCartActions.CLONE_SAVED_CART),\n      map((action: SavedCartActions.CloneSavedCart) => action.payload),\n      switchMap(({ userId, cartId, saveCartName }) => {\n        return this.savedCartConnector\n          .cloneSavedCart(userId, cartId, saveCartName)\n          .pipe(\n            switchMap((_) => {\n              return [\n                new SavedCartActions.CloneSavedCartSuccess({\n                  userId,\n                  cartId,\n                  saveCartName,\n                }),\n                new SavedCartActions.RestoreSavedCart({\n                  userId,\n                  cartId,\n                }),\n                new SavedCartActions.LoadSavedCarts({ userId }),\n              ];\n            }),\n            catchError((error: HttpErrorResponse) =>\n              of(\n                new SavedCartActions.CloneSavedCartFail({\n                  userId,\n                  cartId,\n                  saveCartName,\n                  error: normalizeHttpError(error),\n                })\n              )\n            )\n          );\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private savedCartConnector: SavedCartConnector,\n    private activeCartService: ActiveCartFacade,\n    private globalMessageService: GlobalMessageService,\n    private cartConnector: CartConnector\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SavedCartEffects } from './saved-cart.effect';\n\nexport const effects: any[] = [SavedCartEffects];\n\nexport * from './saved-cart.effect';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { effects } from './effects/index';\n\n@NgModule({\n  imports: [EffectsModule.forFeature(effects)],\n})\nexport class SavedCartStoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { isSelectiveCart, StateWithMultiCart } from '@spartacus/cart/base/core';\nimport {\n  Cart,\n  DeleteCartEvent as DeleteSavedCartEvent,\n  MultiCartFacade,\n} from '@spartacus/cart/base/root';\nimport { SavedCartFacade } from '@spartacus/cart/saved-cart/root';\nimport {\n  EventService,\n  ProcessSelectors,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { UserAccountFacade } from '@spartacus/user/account/root';\nimport { combineLatest, EMPTY, Observable, queueScheduler } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  observeOn,\n  pluck,\n  shareReplay,\n  startWith,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { SavedCartActions } from '../store/actions/index';\nimport {\n  SAVED_CART_CLONE_CART_PROCESS_ID,\n  SAVED_CART_LIST_PROCESS_ID,\n  SAVED_CART_RESTORE_CART_PROCESS_ID,\n  SAVED_CART_SAVE_CART_PROCESS_ID,\n} from '../store/saved-cart-constants';\n\n@Injectable()\nexport class SavedCartService implements SavedCartFacade {\n  constructor(\n    protected store: Store<StateWithMultiCart | StateWithProcess<void>>,\n    protected userIdService: UserIdService,\n    protected userAccountFacade: UserAccountFacade,\n    protected multiCartService: MultiCartFacade,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Loads a single saved cart\n   */\n  loadSavedCart(cartId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.LoadSavedCart({ userId, cartId })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets a single saved cart\n   * it won't emit if the delete saved cart event gets triggered to avoid race condition between actions\n   *\n   * @param cartId\n   * @returns observable with cart\n   */\n  get(cartId: string): Observable<Cart | undefined> {\n    return this.getSavedCart(cartId).pipe(\n      observeOn(queueScheduler),\n      withLatestFrom(\n        this.eventService.get(DeleteSavedCartEvent).pipe(startWith({}))\n      ),\n      filter(([state, _event]) => !!state),\n      tap(([state, event]) => {\n        if (Object.keys(event).length > 0) {\n          return EMPTY;\n        }\n\n        if (!(state.loading || state.success || state.error)) {\n          this.loadSavedCart(cartId);\n        }\n      }),\n      filter(([state]) => state.success || !!state.error),\n      map(([state]) => state.value)\n    );\n  }\n\n  /**\n   * Gets the selected cart state\n   *\n   * @param cartId\n   * @returns observable of selected cart with loader state\n   */\n  getSavedCart(\n    cartId: string\n  ): Observable<StateUtils.ProcessesLoaderState<Cart | undefined>> {\n    return this.multiCartService.getCartEntity(cartId);\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.multiCartService.isStable(cartId);\n  }\n\n  /**\n   * Loads a list of saved carts\n   */\n  loadSavedCarts(): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.LoadSavedCarts({ userId })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets a list of saved carts\n   *\n   * @returns observable with list of saved carts\n   */\n  getList(): Observable<Cart[]> {\n    return this.getSavedCartList().pipe(\n      withLatestFrom(this.getSavedCartListProcess()),\n      tap(([_, state]) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadSavedCarts();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Gets a list of saved carts from all carts in the state\n   * by filtering through the carts that are not wishlist and not saved cart\n   *\n   * @returns observable with list of saved carts\n   */\n  getSavedCartList(): Observable<Cart[]> {\n    return combineLatest([\n      this.multiCartService.getCarts(),\n      this.userAccountFacade.get(),\n    ]).pipe(\n      distinctUntilChanged(),\n      map(([carts, user]) =>\n        carts.filter(\n          (cart) =>\n            (user?.customerId !== undefined\n              ? cart?.name !== `wishlist${user?.customerId}`\n              : true) &&\n            !isSelectiveCart(cart?.code) &&\n            cart?.saveTime\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the loading flag of getting a list of saved carts\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getSavedCartListProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(SAVED_CART_LIST_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Gets the loading state of getting a list of saved carts\n   *\n   * @returns observable with boolean of the loader state\n   */\n  getSavedCartListProcess(): Observable<StateUtils.LoaderState<any>> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessStateFactory(SAVED_CART_LIST_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of performing a saved cart\n   */\n  clearSavedCarts(): void {\n    this.store.dispatch(new SavedCartActions.ClearSavedCarts());\n  }\n\n  /**\n   * Triggers a restore saved cart\n   *\n   * @param cartId\n   */\n  restoreSavedCart(cartId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.RestoreSavedCart({\n            userId,\n            cartId,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets the loading state of restoring saved cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getRestoreSavedCartProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          SAVED_CART_RESTORE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the success state of restoring saved cart\n   *\n   * @returns observable with boolean of the success state\n   */\n  getRestoreSavedCartProcessSuccess(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          SAVED_CART_RESTORE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the error state of restoring saved cart\n   *\n   * @returns observable with boolean of the error state\n   */\n  getRestoreSavedCartProcessError(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          SAVED_CART_RESTORE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of performing a restore saved cart\n   */\n  clearRestoreSavedCart(): void {\n    this.store.dispatch(new SavedCartActions.ClearRestoreSavedCart());\n  }\n\n  /**\n   * Triggers delete saved cart\n   * @param cartId\n   */\n  deleteSavedCart(cartId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.multiCartService.deleteCart(cartId, userId);\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Triggers a saved cart\n   *\n   */\n  saveCart({\n    cartId,\n    saveCartName,\n    saveCartDescription,\n  }: {\n    cartId: string;\n    saveCartName?: string;\n    saveCartDescription?: string;\n  }): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.SaveCart({\n            userId,\n            cartId,\n            saveCartName,\n            saveCartDescription,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets the loading state of saving a cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getSaveCartProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          SAVED_CART_SAVE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the success state of saving a cart\n   *\n   * @returns observable with boolean of the success state\n   */\n  getSaveCartProcessSuccess(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          SAVED_CART_SAVE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the error state of saving a cart\n   *\n   * @returns observable with boolean of the error state\n   */\n  getSaveCartProcessError(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(SAVED_CART_SAVE_CART_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of performing a save cart\n   */\n  clearSaveCart(): void {\n    this.store.dispatch(new SavedCartActions.ClearSaveCart());\n  }\n\n  /**\n   * Triggers an edit saved cart\n   *\n   */\n  editSavedCart({\n    cartId,\n    saveCartName,\n    saveCartDescription,\n  }: {\n    cartId: string;\n    saveCartName?: string;\n    saveCartDescription?: string;\n  }): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.EditSavedCart({\n            userId,\n            cartId,\n            saveCartName,\n            saveCartDescription,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Triggers a clone saved cart\n   *\n   * @param cartId\n   */\n  cloneSavedCart(cartId: string, saveCartName?: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.CloneSavedCart({ userId, cartId, saveCartName })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets the loading state of cloning a saved cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getCloneSavedCartProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          SAVED_CART_CLONE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the success state of cloning a saved cart\n   *\n   * @returns observable with boolean of the success state\n   */\n  getCloneSavedCartProcessSuccess(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          SAVED_CART_CLONE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the error state of cloning a saved cart\n   *\n   * @returns observable with boolean of the error state\n   */\n  getCloneSavedCartProcessError(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          SAVED_CART_CLONE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of cloning a saved cart\n   */\n  clearCloneSavedCart(): void {\n    this.store.dispatch(new SavedCartActions.ClearCloneSavedCart());\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport { SavedCartFacade } from '@spartacus/cart/saved-cart/root';\nimport { SavedCartService } from './saved-cart.service';\n\nexport const facadeProviders: Provider[] = [\n  SavedCartService,\n  {\n    provide: SavedCartFacade,\n    useExisting: SavedCartService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { SavedCartConnector } from './connectors/saved-cart.connector';\nimport { SavedCartEventsModule } from './events/saved-cart-events.module';\nimport { SavedCartStoreModule } from './store/saved-cart-store.module';\nimport { facadeProviders } from './facade/facade-providers';\n\n@NgModule({\n  imports: [SavedCartStoreModule, SavedCartEventsModule],\n  providers: [SavedCartConnector, ...facadeProviders],\n})\nexport class SavedCartCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './saved-cart.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './connectors/index';\nexport * from './events/index';\nexport * from './saved-cart-core.module';\nexport * from './facade/index';\nexport * from './store/actions/index';\nexport * from './store/saved-cart-constants';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.SavedCartAdapter","SavedCartActions.RESTORE_SAVED_CART","SavedCartActions.RESTORE_SAVED_CART_SUCCESS","SavedCartActions.RESTORE_SAVED_CART_FAIL","SavedCartActions.SAVE_CART_SUCCESS","SavedCartActions.SAVE_CART_FAIL","SavedCartActions.SAVE_CART","SavedCartActions.EDIT_SAVED_CART_SUCCESS","SavedCartActions.EDIT_SAVED_CART_FAIL","SavedCartActions.EDIT_SAVED_CART","SavedCartActions.CLONE_SAVED_CART","SavedCartActions.CLONE_SAVED_CART_SUCCESS","SavedCartActions.CLONE_SAVED_CART_FAIL","i1.SavedCartEventBuilder","SavedCartActions.LOAD_SAVED_CART","SavedCartActions.LoadSavedCartSuccess","SavedCartActions.LoadSavedCartFail","SavedCartActions.LOAD_SAVED_CARTS","SavedCartActions.LoadSavedCartsSuccess","SavedCartActions.LoadSavedCartsFail","SavedCartActions.EditSavedCart","SavedCartActions.RestoreSavedCartSuccess","SavedCartActions.RestoreSavedCartFail","SavedCartActions.SaveCartSuccess","SavedCartActions.SaveCartFail","SavedCartActions.EditSavedCartSuccess","SavedCartActions.EditSavedCartFail","SavedCartActions.CloneSavedCartSuccess","SavedCartActions.RestoreSavedCart","SavedCartActions.LoadSavedCarts","SavedCartActions.CloneSavedCartFail","i1","i2.SavedCartConnector","i4","SavedCartActions.LoadSavedCart","DeleteSavedCartEvent","SavedCartActions.ClearSavedCarts","SavedCartActions.ClearRestoreSavedCart","SavedCartActions.SaveCart","SavedCartActions.ClearSaveCart","SavedCartActions.CloneSavedCart","SavedCartActions.ClearCloneSavedCart","i3"],"mappings":"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"}