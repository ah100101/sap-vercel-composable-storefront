/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { CartType, } from '@spartacus/cart/base/root';
import { OCC_USER_ID_ANONYMOUS } from '@spartacus/core';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import { WishListActions } from '../store/actions/index';
import { getWishlistName } from '../utils/utils';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/user/account/root";
import * as i3 from "@spartacus/cart/base/root";
import * as i4 from "@spartacus/core";
export class WishListService {
    constructor(store, userAccountFacade, multiCartFacade, userIdService) {
        this.store = store;
        this.userAccountFacade = userAccountFacade;
        this.multiCartFacade = multiCartFacade;
        this.userIdService = userIdService;
    }
    createWishList(userId, name, description) {
        this.store.dispatch(new WishListActions.CreateWishList({ userId, name, description }));
    }
    getWishList() {
        return combineLatest([
            this.getWishListId(),
            this.userAccountFacade.get(),
            this.userIdService.getUserId(),
        ]).pipe(distinctUntilChanged(), tap(([wishListId, user, userId]) => {
            if (!Boolean(wishListId) &&
                userId !== OCC_USER_ID_ANONYMOUS &&
                user?.customerId) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), switchMap(([wishListId]) => this.multiCartFacade.getCart(wishListId)));
    }
    loadWishList(userId, customerId) {
        this.store.dispatch(new WishListActions.LoadWishList({
            userId,
            cartId: getWishlistName(customerId),
        }));
    }
    addEntry(productCode) {
        this.getWishListIdWithUserId().subscribe(([wishListId, userId]) => this.multiCartFacade.addEntry(userId, wishListId, productCode, 1));
    }
    removeEntry(entry) {
        this.getWishListIdWithUserId().subscribe(([wishListId, userId]) => this.multiCartFacade.removeEntry(userId, wishListId, entry.entryNumber));
    }
    getWishListLoading() {
        return this.getWishListId().pipe(switchMap((wishListId) => this.multiCartFacade.isStable(wishListId).pipe(map((stable) => !stable))));
    }
    getWishListId() {
        return this.multiCartFacade.getCartIdByType(CartType.WISH_LIST);
    }
    getWishListIdWithUserId() {
        return this.getWishListId().pipe(distinctUntilChanged(), withLatestFrom(this.userIdService.getUserId(), this.userAccountFacade.get()), tap(([wishListId, userId, user]) => {
            if (!Boolean(wishListId) && user?.customerId) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), map(([wishListId, userId]) => [wishListId, userId]), take(1));
    }
}
WishListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: WishListService, deps: [{ token: i1.Store }, { token: i2.UserAccountFacade }, { token: i3.MultiCartFacade }, { token: i4.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
WishListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: WishListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: WishListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserAccountFacade }, { type: i3.MultiCartFacade }, { type: i4.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,