/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { Validators, } from '@angular/forms';
import { CartAddEntryFailEvent, CartAddEntrySuccessEvent, } from '@spartacus/cart/base/root';
import { GlobalMessageType, } from '@spartacus/core';
import { Subscription } from 'rxjs';
import { first, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/cart/base/root";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
import * as i5 from "@spartacus/storefront";
export class CartQuickOrderFormComponent {
    constructor(activeCartService, eventService, formBuilder, globalMessageService) {
        this.activeCartService = activeCartService;
        this.eventService = eventService;
        this.formBuilder = formBuilder;
        this.globalMessageService = globalMessageService;
        this.cartIsLoading$ = this.activeCartService
            .isStable()
            .pipe(map((loaded) => !loaded));
        this.cart$ = this.activeCartService.getActive();
        this.min = 1;
        this.subscription = new Subscription();
        this.cartEventsSubscription = new Subscription();
        this.minQuantityValue = 1;
    }
    ngOnInit() {
        this.buildForm();
        this.watchQuantityChange();
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
        this.cartEventsSubscription?.unsubscribe();
    }
    applyQuickOrder() {
        if (this.quickOrderForm.invalid) {
            this.quickOrderForm.markAllAsTouched();
            return;
        }
        const productCode = this.quickOrderForm.get('productCode')?.value;
        const quantity = this.quickOrderForm.get('quantity')?.value;
        this.watchAddEntrySuccessEvent();
        this.watchAddEntryFailEvent();
        if (productCode && quantity) {
            this.activeCartService.addEntry(productCode, quantity);
        }
    }
    buildForm() {
        this.quickOrderForm = this.formBuilder.group({
            productCode: ['', [Validators.required]],
            quantity: [
                this.minQuantityValue,
                { updateOn: 'blur', validators: [Validators.required] },
            ],
        });
    }
    watchQuantityChange() {
        this.subscription.add(this.quickOrderForm
            .get('quantity')
            ?.valueChanges.subscribe((value) => this.quickOrderForm
            .get('quantity')
            ?.setValue(this.getValidCount(value), { emitEvent: false })));
    }
    watchAddEntrySuccessEvent() {
        this.cartEventsSubscription.add(this.eventService
            .get(CartAddEntrySuccessEvent)
            .pipe(first())
            .subscribe((data) => {
            let key = 'quickOrderCartForm.stockLevelReached';
            let productTranslation;
            let messageType = GlobalMessageType.MSG_TYPE_WARNING;
            if (data.quantityAdded) {
                key =
                    data.quantityAdded > 1
                        ? 'quickOrderCartForm.entriesWereAdded'
                        : 'quickOrderCartForm.entryWasAdded';
                productTranslation =
                    data.quantityAdded > 1
                        ? 'quickOrderCartForm.products'
                        : 'quickOrderCartForm.product';
                messageType = GlobalMessageType.MSG_TYPE_CONFIRMATION;
            }
            this.globalMessageService.add({
                key,
                params: {
                    product: data?.entry?.product?.name || productTranslation,
                    quantity: data.quantityAdded,
                },
            }, messageType);
            this.resetForm();
        }));
    }
    watchAddEntryFailEvent() {
        this.cartEventsSubscription.add(this.eventService
            .get(CartAddEntryFailEvent)
            .pipe(first())
            .subscribe(() => {
            this.globalMessageService.add({
                key: 'quickOrderCartForm.noResults',
            }, GlobalMessageType.MSG_TYPE_ERROR);
        }));
    }
    getValidCount(value) {
        if (value < this.min || !value) {
            value = this.min;
        }
        return value;
    }
    resetForm() {
        this.quickOrderForm.reset();
    }
}
CartQuickOrderFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CartQuickOrderFormComponent, deps: [{ token: i1.ActiveCartFacade }, { token: i2.EventService }, { token: i3.UntypedFormBuilder }, { token: i2.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Component });
CartQuickOrderFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: CartQuickOrderFormComponent, selector: "cx-cart-quick-order-form", ngImport: i0, template: "<ng-container *ngIf=\"cart$ | async as cart\">\n  <div class=\"cx-cart-quick-order-form-title\">\n    {{ 'quickOrderCartForm.title' | cxTranslate }}\n  </div>\n  <div class=\"form-group\">\n    <form (ngSubmit)=\"applyQuickOrder()\" [formGroup]=\"quickOrderForm\">\n      <div class=\"cx-cart-quick-order-form-container\">\n        <span class=\"cx-cart-quick-order-form-productID\">\n          <label class=\"cx-cart-quick-order-form-label\">\n            {{ 'quickOrderCartForm.productCodeLabel' | cxTranslate }}\n          </label>\n          <input\n            [attr.aria-label]=\"\n              'quickOrderCartForm.entryProductCode' | cxTranslate\n            \"\n            aria-required=\"true\"\n            class=\"form-control input-product-code\"\n            formControlName=\"productCode\"\n            required=\"true\"\n            placeholder=\"{{\n              'quickOrderCartForm.productCodePlaceholder' | cxTranslate\n            }}\"\n            type=\"text\"\n          />\n        </span>\n\n        <span class=\"cx-cart-quick-order-form-qty\">\n          <label class=\"cx-cart-quick-order-form-label\">\n            {{ 'quickOrderCartForm.quantityLabel' | cxTranslate }}\n          </label>\n          <input\n            [attr.aria-label]=\"'quickOrderCartForm.quantity' | cxTranslate\"\n            aria-required=\"true\"\n            class=\"form-control input-quantity\"\n            formControlName=\"quantity\"\n            required=\"true\"\n            type=\"number\"\n          />\n        </span>\n        <button\n          [attr.aria-label]=\"'quickOrderCartForm.addToCart' | cxTranslate\"\n          [class.disabled]=\"cartIsLoading$ | async\"\n          [disabled]=\"cartIsLoading$ | async\"\n          class=\"btn btn-block btn-secondary apply-quick-order-button\"\n          type=\"submit\"\n        >\n          {{ 'quickOrderCartForm.add' | cxTranslate }}\n        </button>\n        <cx-form-errors\n          [control]=\"quickOrderForm.get('productCode')\"\n        ></cx-form-errors>\n        <cx-form-errors\n          [control]=\"quickOrderForm.get('quantity')\"\n        ></cx-form-errors>\n      </div>\n    </form></div\n></ng-container>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i5.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CartQuickOrderFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-cart-quick-order-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"cart$ | async as cart\">\n  <div class=\"cx-cart-quick-order-form-title\">\n    {{ 'quickOrderCartForm.title' | cxTranslate }}\n  </div>\n  <div class=\"form-group\">\n    <form (ngSubmit)=\"applyQuickOrder()\" [formGroup]=\"quickOrderForm\">\n      <div class=\"cx-cart-quick-order-form-container\">\n        <span class=\"cx-cart-quick-order-form-productID\">\n          <label class=\"cx-cart-quick-order-form-label\">\n            {{ 'quickOrderCartForm.productCodeLabel' | cxTranslate }}\n          </label>\n          <input\n            [attr.aria-label]=\"\n              'quickOrderCartForm.entryProductCode' | cxTranslate\n            \"\n            aria-required=\"true\"\n            class=\"form-control input-product-code\"\n            formControlName=\"productCode\"\n            required=\"true\"\n            placeholder=\"{{\n              'quickOrderCartForm.productCodePlaceholder' | cxTranslate\n            }}\"\n            type=\"text\"\n          />\n        </span>\n\n        <span class=\"cx-cart-quick-order-form-qty\">\n          <label class=\"cx-cart-quick-order-form-label\">\n            {{ 'quickOrderCartForm.quantityLabel' | cxTranslate }}\n          </label>\n          <input\n            [attr.aria-label]=\"'quickOrderCartForm.quantity' | cxTranslate\"\n            aria-required=\"true\"\n            class=\"form-control input-quantity\"\n            formControlName=\"quantity\"\n            required=\"true\"\n            type=\"number\"\n          />\n        </span>\n        <button\n          [attr.aria-label]=\"'quickOrderCartForm.addToCart' | cxTranslate\"\n          [class.disabled]=\"cartIsLoading$ | async\"\n          [disabled]=\"cartIsLoading$ | async\"\n          class=\"btn btn-block btn-secondary apply-quick-order-button\"\n          type=\"submit\"\n        >\n          {{ 'quickOrderCartForm.add' | cxTranslate }}\n        </button>\n        <cx-form-errors\n          [control]=\"quickOrderForm.get('productCode')\"\n        ></cx-form-errors>\n        <cx-form-errors\n          [control]=\"quickOrderForm.get('quantity')\"\n        ></cx-form-errors>\n      </div>\n    </form></div\n></ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActiveCartFacade }, { type: i2.EventService }, { type: i3.UntypedFormBuilder }, { type: i2.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,