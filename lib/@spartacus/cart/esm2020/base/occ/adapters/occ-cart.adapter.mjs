/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { CART_NORMALIZER } from '@spartacus/cart/base/root';
import { InterceptorUtil, OCC_CART_ID_CURRENT, OCC_USER_ID_ANONYMOUS, USE_CLIENT_TOKEN, } from '@spartacus/core';
import { map, pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccCartAdapter {
    constructor(http, occEndpointsService, converterService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
    }
    loadAll(userId) {
        return this.http
            .get(this.occEndpointsService.buildUrl('carts', { urlParams: { userId } }))
            .pipe(pluck('carts'), map((carts) => carts ?? []), this.converterService.pipeableMany(CART_NORMALIZER));
    }
    load(userId, cartId) {
        if (cartId === OCC_CART_ID_CURRENT) {
            return this.loadAll(userId).pipe(map((carts) => carts.find((cart) => cart['saveTime'] === undefined)));
        }
        else {
            return this.http
                .get(this.occEndpointsService.buildUrl('cart', {
                urlParams: { userId, cartId },
            }))
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        }
    }
    create(userId, oldCartId, toMergeCartGuid) {
        const toAdd = JSON.stringify({});
        const params = {};
        if (oldCartId) {
            params['oldCartId'] = oldCartId;
        }
        if (toMergeCartGuid) {
            params['toMergeCartGuid'] = toMergeCartGuid;
        }
        return this.http
            .post(this.occEndpointsService.buildUrl('createCart', {
            urlParams: { userId },
            queryParams: params,
        }), toAdd)
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    }
    delete(userId, cartId) {
        let headers = new HttpHeaders();
        if (userId === OCC_USER_ID_ANONYMOUS) {
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        }
        return this.http.delete(this.occEndpointsService.buildUrl('deleteCart', {
            urlParams: { userId, cartId },
        }), { headers });
    }
    save(userId, cartId, saveCartName, saveCartDescription) {
        const endpoint = this.occEndpointsService.buildUrl('saveCart', {
            urlParams: {
                userId,
                cartId,
                saveCartName,
                saveCartDescription,
            },
        });
        return this.http
            .patch(endpoint, cartId)
            .pipe(pluck('savedCartData'), this.converterService.pipeable(CART_NORMALIZER));
    }
    addEmail(userId, cartId, email) {
        let headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        const httpParams = new HttpParams().set('email', email);
        const url = this.occEndpointsService.buildUrl('addEmail', {
            urlParams: {
                userId,
                cartId,
            },
        });
        return this.http.put(url, httpParams, { headers });
    }
}
OccCartAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OccCartAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccCartAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OccCartAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OccCartAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,