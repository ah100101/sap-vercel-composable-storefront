/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { CartType, } from '@spartacus/cart/base/root';
import { OCC_USER_ID_ANONYMOUS, } from '@spartacus/core';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, shareReplay, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/user/profile/root";
import * as i2 from "@spartacus/cart/base/root";
import * as i3 from "@spartacus/core";
export class SelectiveCartService {
    constructor(userProfileFacade, multiCartFacade, baseSiteService, userIdService) {
        this.userProfileFacade = userProfileFacade;
        this.multiCartFacade = multiCartFacade;
        this.baseSiteService = baseSiteService;
        this.userIdService = userIdService;
    }
    /**
     * Initialize the stream when first call this function
     */
    getCart() {
        if (!this.selectiveCart$) {
            this.selectiveCart$ = combineLatest([
                this.getSelectiveCartId(),
                this.userProfileFacade.get(),
                this.userIdService.getUserId(),
                this.baseSiteService.getActive(),
            ]).pipe(distinctUntilChanged(), tap(([selectiveId, user, userId, activeBaseSite]) => {
                if (!Boolean(selectiveId) &&
                    userId !== OCC_USER_ID_ANONYMOUS &&
                    user?.customerId) {
                    this.multiCartFacade.loadCart({
                        userId: userId,
                        cartId: `selectivecart${activeBaseSite}${user.customerId}`,
                    });
                }
            }), filter(([selectiveId]) => Boolean(selectiveId)), switchMap(([selectiveId]) => this.multiCartFacade.getCart(selectiveId)), shareReplay({ bufferSize: 1, refCount: true }));
        }
        return this.selectiveCart$;
    }
    getEntries() {
        return this.getSelectiveCartId().pipe(switchMap((selectiveId) => this.multiCartFacade.getEntries(selectiveId)));
    }
    isStable() {
        return this.getSelectiveCartId().pipe(switchMap((selectiveId) => this.multiCartFacade.isStable(selectiveId)));
    }
    addEntry(productCode, quantity) {
        this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {
            this.multiCartFacade.addEntry(userId, selectiveId, productCode, quantity);
        });
    }
    removeEntry(entry) {
        this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {
            this.multiCartFacade.removeEntry(userId, selectiveId, entry.entryNumber);
        });
    }
    updateEntry(entryNumber, quantity) {
        this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {
            this.multiCartFacade.updateEntry(userId, selectiveId, entryNumber, quantity);
        });
    }
    getEntry(productCode) {
        return this.getSelectiveCartId().pipe(switchMap((selectiveId) => this.multiCartFacade.getEntry(selectiveId, productCode)));
    }
    getSelectiveCartId() {
        return this.multiCartFacade.getCartIdByType(CartType.SELECTIVE);
    }
    getSelectiveIdWithUserId() {
        return this.getSelectiveCartId().pipe(distinctUntilChanged(), withLatestFrom(this.userIdService.getUserId()), take(1));
    }
}
SelectiveCartService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SelectiveCartService, deps: [{ token: i1.UserProfileFacade }, { token: i2.MultiCartFacade }, { token: i3.BaseSiteService }, { token: i3.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
SelectiveCartService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SelectiveCartService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SelectiveCartService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserProfileFacade }, { type: i2.MultiCartFacade }, { type: i3.BaseSiteService }, { type: i3.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,