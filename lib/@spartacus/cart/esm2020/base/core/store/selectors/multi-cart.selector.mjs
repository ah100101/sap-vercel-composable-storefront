/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateUtils } from '@spartacus/core';
import { MULTI_CART_FEATURE, } from '../multi-cart-state';
export const getMultiCartState = createFeatureSelector(MULTI_CART_FEATURE);
export const getMultiCartEntities = createSelector(getMultiCartState, (state) => state.carts);
export const getCartEntitySelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => StateUtils.entityProcessesLoaderStateSelector(state, cartId));
};
export const getCartSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => StateUtils.entityValueSelector(state, cartId));
};
export const getCartIsStableSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => StateUtils.entityIsStableSelector(state, cartId));
};
export const getCartHasPendingProcessesSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => StateUtils.entityHasPendingProcessesSelector(state, cartId));
};
export const getCartEntriesSelectorFactory = (cartId) => {
    return createSelector(getCartSelectorFactory(cartId), (state) => {
        return state && state.entries ? state.entries : [];
    });
};
export const getCartEntrySelectorFactory = (cartId, productCode) => {
    return createSelector(getCartEntriesSelectorFactory(cartId), (state) => {
        return state.find((entry) => entry.product?.code === productCode);
    });
};
export const getCartsSelectorFactory = createSelector(getMultiCartEntities, (state) => Object.keys(state.entities).map((key) => StateUtils.entityValueSelector(state, key)));
export const getCartTypeIndex = createSelector(getMultiCartState, (state) => state.index);
export const getCartIdByTypeFactory = (type) => {
    return createSelector(getCartTypeIndex, (state) => {
        return state && state[type];
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9jYXJ0L2Jhc2UvY29yZS9zdG9yZS9zZWxlY3RvcnMvbXVsdGktY2FydC5zZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixjQUFjLEdBRWYsTUFBTSxhQUFhLENBQUM7QUFFckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFFTCxrQkFBa0IsR0FFbkIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FHMUIscUJBQXFCLENBQWlCLGtCQUFrQixDQUFDLENBQUM7QUFFOUQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBRzdCLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEtBQXFCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUMxQyxNQUFjLEVBSWQsRUFBRTtJQUNGLE9BQU8sY0FBYyxDQUNuQixvQkFBb0IsRUFDcEIsQ0FBQyxLQUE4RCxFQUFFLEVBQUUsQ0FDakUsVUFBVSxDQUFDLGtDQUFrQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDL0QsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ3BDLE1BQWMsRUFDOEIsRUFBRTtJQUM5QyxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBOEQsRUFBRSxFQUFFLENBQ2pFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQ2hELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUM1QyxNQUFjLEVBQ2lDLEVBQUU7SUFDakQsT0FBTyxjQUFjLENBQ25CLG9CQUFvQixFQUNwQixDQUFDLEtBQThELEVBQUUsRUFBRSxDQUNqRSxVQUFVLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUNuRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0seUNBQXlDLEdBQUcsQ0FDdkQsTUFBYyxFQUNpQyxFQUFFO0lBQ2pELE9BQU8sY0FBYyxDQUNuQixvQkFBb0IsRUFDcEIsQ0FBQyxLQUE4RCxFQUFFLEVBQUUsQ0FDakUsVUFBVSxDQUFDLGlDQUFpQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDOUQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQzNDLE1BQWMsRUFDc0MsRUFBRTtJQUN0RCxPQUFPLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQVcsRUFBRSxFQUFFO1FBQ3BFLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLE1BQWMsRUFDZCxXQUFtQixFQUMyQyxFQUFFO0lBQ2hFLE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsRUFDckMsQ0FBQyxLQUFtQixFQUFFLEVBQUU7UUFDdEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQztJQUNwRSxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUdoQyxjQUFjLENBQ2hCLG9CQUFvQixFQUNwQixDQUFDLEtBQThELEVBQUUsRUFBRSxDQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUN0QyxVQUFVLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUMzQyxDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FHekIsY0FBYyxDQUFDLGlCQUFpQixFQUFFLENBQUMsS0FBcUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTlFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ3BDLElBQVksRUFDa0MsRUFBRTtJQUNoRCxPQUFPLGNBQWMsQ0FDbkIsZ0JBQWdCLEVBQ2hCLENBQUMsS0FBcUMsRUFBRSxFQUFFO1FBQ3hDLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7XG4gIGNyZWF0ZUZlYXR1cmVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIE1lbW9pemVkU2VsZWN0b3IsXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IENhcnQsIE9yZGVyRW50cnkgfSBmcm9tICdAc3BhcnRhY3VzL2NhcnQvYmFzZS9yb290JztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgTXVsdGlDYXJ0U3RhdGUsXG4gIE1VTFRJX0NBUlRfRkVBVFVSRSxcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxufSBmcm9tICcuLi9tdWx0aS1jYXJ0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGdldE11bHRpQ2FydFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXG4gIE11bHRpQ2FydFN0YXRlXG4+ID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPE11bHRpQ2FydFN0YXRlPihNVUxUSV9DQVJUX0ZFQVRVUkUpO1xuXG5leHBvcnQgY29uc3QgZ2V0TXVsdGlDYXJ0RW50aXRpZXM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE11bHRpQ2FydCxcbiAgU3RhdGVVdGlscy5FbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0IHwgdW5kZWZpbmVkPlxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldE11bHRpQ2FydFN0YXRlLCAoc3RhdGU6IE11bHRpQ2FydFN0YXRlKSA9PiBzdGF0ZS5jYXJ0cyk7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50aXR5U2VsZWN0b3JGYWN0b3J5ID0gKFxuICBjYXJ0SWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxuICBTdGF0ZVV0aWxzLlByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQgfCB1bmRlZmluZWQ+XG4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0IHwgdW5kZWZpbmVkPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5UHJvY2Vzc2VzTG9hZGVyU3RhdGVTZWxlY3RvcihzdGF0ZSwgY2FydElkKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRTZWxlY3RvckZhY3RvcnkgPSAoXG4gIGNhcnRJZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgQ2FydD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0TXVsdGlDYXJ0RW50aXRpZXMsXG4gICAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQgfCB1bmRlZmluZWQ+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlWYWx1ZVNlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydElzU3RhYmxlU2VsZWN0b3JGYWN0b3J5ID0gKFxuICBjYXJ0SWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhNdWx0aUNhcnQsIGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0IHwgdW5kZWZpbmVkPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5SXNTdGFibGVTZWxlY3RvcihzdGF0ZSwgY2FydElkKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRIYXNQZW5kaW5nUHJvY2Vzc2VzU2VsZWN0b3JGYWN0b3J5ID0gKFxuICBjYXJ0SWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhNdWx0aUNhcnQsIGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0IHwgdW5kZWZpbmVkPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5SGFzUGVuZGluZ1Byb2Nlc3Nlc1NlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydEVudHJpZXNTZWxlY3RvckZhY3RvcnkgPSAoXG4gIGNhcnRJZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgT3JkZXJFbnRyeVtdPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRDYXJ0U2VsZWN0b3JGYWN0b3J5KGNhcnRJZCksIChzdGF0ZTogQ2FydCkgPT4ge1xuICAgIHJldHVybiBzdGF0ZSAmJiBzdGF0ZS5lbnRyaWVzID8gc3RhdGUuZW50cmllcyA6IFtdO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50cnlTZWxlY3RvckZhY3RvcnkgPSAoXG4gIGNhcnRJZDogc3RyaW5nLFxuICBwcm9kdWN0Q29kZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgT3JkZXJFbnRyeSB8IHVuZGVmaW5lZD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0Q2FydEVudHJpZXNTZWxlY3RvckZhY3RvcnkoY2FydElkKSxcbiAgICAoc3RhdGU6IE9yZGVyRW50cnlbXSkgPT4ge1xuICAgICAgcmV0dXJuIHN0YXRlLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS5wcm9kdWN0Py5jb2RlID09PSBwcm9kdWN0Q29kZSk7XG4gICAgfVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRzU2VsZWN0b3JGYWN0b3J5OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXG4gIENhcnRbXVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRNdWx0aUNhcnRFbnRpdGllcyxcbiAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQgfCB1bmRlZmluZWQ+KSA9PlxuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzKS5tYXAoKGtleSkgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5VmFsdWVTZWxlY3RvcihzdGF0ZSwga2V5KVxuICAgIClcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0VHlwZUluZGV4OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXG4gIHsgW2NhcnRUeXBlOiBzdHJpbmddOiBzdHJpbmcgfVxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldE11bHRpQ2FydFN0YXRlLCAoc3RhdGU6IE11bHRpQ2FydFN0YXRlKSA9PiBzdGF0ZS5pbmRleCk7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0SWRCeVR5cGVGYWN0b3J5ID0gKFxuICB0eXBlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBzdHJpbmc+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldENhcnRUeXBlSW5kZXgsXG4gICAgKHN0YXRlOiB7IFtjYXJ0VHlwZTogc3RyaW5nXTogc3RyaW5nIH0pID0+IHtcbiAgICAgIHJldHVybiBzdGF0ZSAmJiBzdGF0ZVt0eXBlXTtcbiAgICB9XG4gICk7XG59O1xuIl19