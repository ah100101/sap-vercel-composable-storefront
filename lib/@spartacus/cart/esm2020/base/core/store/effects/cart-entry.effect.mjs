/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { normalizeHttpError, SiteContextActions, withdrawOn, } from '@spartacus/core';
import { from } from 'rxjs';
import { catchError, concatMap, map } from 'rxjs/operators';
import { CartActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/entry/cart-entry.connector";
export class CartEntryEffects {
    constructor(actions$, cartEntryConnector) {
        this.actions$ = actions$;
        this.cartEntryConnector = cartEntryConnector;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.addEntry$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CART_ADD_ENTRY), map((action) => action.payload), concatMap((payload) => {
            return this.cartEntryConnector
                .add(payload.userId, payload.cartId, payload.productCode, payload.quantity, payload.pickupStore)
                .pipe(map((cartModification) => new CartActions.CartAddEntrySuccess({
                ...payload,
                ...cartModification,
            })), catchError((error) => from([
                new CartActions.CartAddEntryFail({
                    ...payload,
                    error: normalizeHttpError(error),
                }),
                new CartActions.LoadCart({
                    cartId: payload.cartId,
                    userId: payload.userId,
                }),
            ])));
        }), withdrawOn(this.contextChange$)));
        this.removeEntry$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CART_REMOVE_ENTRY), map((action) => action.payload), concatMap((payload) => this.cartEntryConnector
            .remove(payload.userId, payload.cartId, payload.entryNumber)
            .pipe(map(() => {
            return new CartActions.CartRemoveEntrySuccess({
                ...payload,
            });
        }), catchError((error) => from([
            new CartActions.CartRemoveEntryFail({
                ...payload,
                error: normalizeHttpError(error),
            }),
            new CartActions.LoadCart({
                cartId: payload.cartId,
                userId: payload.userId,
            }),
        ])))), withdrawOn(this.contextChange$)));
        this.updateEntry$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CART_UPDATE_ENTRY), map((action) => action.payload), concatMap((payload) => this.cartEntryConnector
            .update(payload.userId, payload.cartId, payload.entryNumber, payload.quantity, payload.pickupStore, payload.pickupToDelivery)
            .pipe(map(() => {
            return new CartActions.CartUpdateEntrySuccess({
                ...payload,
            });
        }), catchError((error) => from([
            new CartActions.CartUpdateEntryFail({
                ...payload,
                error: normalizeHttpError(error),
            }),
            new CartActions.LoadCart({
                cartId: payload.cartId,
                userId: payload.userId,
            }),
        ])))), withdrawOn(this.contextChange$)));
    }
}
CartEntryEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CartEntryEffects, deps: [{ token: i1.Actions }, { token: i2.CartEntryConnector }], target: i0.ɵɵFactoryTarget.Injectable });
CartEntryEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CartEntryEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CartEntryEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.CartEntryConnector }]; } });
//# sourceMappingURL=data:application/json;base64,