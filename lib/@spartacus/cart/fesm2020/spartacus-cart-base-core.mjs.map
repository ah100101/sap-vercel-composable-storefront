{"version":3,"file":"spartacus-cart-base-core.mjs","sources":["../../../feature-libs/cart/base/core/store/multi-cart-state.ts","../../../feature-libs/cart/base/core/store/actions/cart-entry.action.ts","../../../feature-libs/cart/base/core/store/actions/cart-voucher.action.ts","../../../feature-libs/cart/base/core/store/actions/cart.action.ts","../../../feature-libs/cart/base/core/store/actions/multi-cart.action.ts","../../../feature-libs/cart/base/core/store/actions/cart-group.actions.ts","../../../feature-libs/cart/base/core/store/actions/index.ts","../../../feature-libs/cart/base/core/connectors/entry/cart-entry.adapter.ts","../../../feature-libs/cart/base/core/connectors/entry/cart-entry.connector.ts","../../../feature-libs/cart/base/core/store/effects/cart-entry.effect.ts","../../../feature-libs/cart/base/core/connectors/voucher/cart-voucher.adapter.ts","../../../feature-libs/cart/base/core/connectors/voucher/cart-voucher.connector.ts","../../../feature-libs/cart/base/core/store/effects/cart-voucher.effect.ts","../../../feature-libs/cart/base/core/utils/utils.ts","../../../feature-libs/cart/base/core/store/selectors/multi-cart.selector.ts","../../../feature-libs/cart/base/core/connectors/cart/cart.adapter.ts","../../../feature-libs/cart/base/core/connectors/cart/cart.connector.ts","../../../feature-libs/cart/base/core/store/effects/cart.effect.ts","../../../feature-libs/cart/base/core/store/effects/multi-cart.effect.ts","../../../feature-libs/cart/base/core/store/effects/index.ts","../../../feature-libs/cart/base/core/store/reducers/multi-cart.reducer.ts","../../../feature-libs/cart/base/core/store/reducers/index.ts","../../../feature-libs/cart/base/core/store/selectors/multi-cart-group.selectors.ts","../../../feature-libs/cart/base/core/store/selectors/index.ts","../../../feature-libs/cart/base/core/store/index.ts","../../../feature-libs/cart/base/core/services/multi-cart-state-persistence.service.ts","../../../feature-libs/cart/base/core/cart-persistence.module.ts","../../../feature-libs/cart/base/core/connectors/validation/cart-validation.adapter.ts","../../../feature-libs/cart/base/core/connectors/validation/cart-validation.connector.ts","../../../feature-libs/cart/base/core/event/cart-event.builder.ts","../../../feature-libs/cart/base/core/event/cart-event.module.ts","../../../feature-libs/cart/base/core/event/cart-page-event.builder.ts","../../../feature-libs/cart/base/core/event/cart-page-event.module.ts","../../../feature-libs/cart/base/core/facade/active-cart.service.ts","../../../feature-libs/cart/base/core/services/cart-validation-state.service.ts","../../../feature-libs/cart/base/core/facade/cart-validation.service.ts","../../../feature-libs/cart/base/core/facade/cart-voucher.service.ts","../../../feature-libs/cart/base/core/facade/multi-cart.service.ts","../../../feature-libs/cart/base/core/facade/selective-cart.service.ts","../../../feature-libs/cart/base/core/facade/facade-providers.ts","../../../feature-libs/cart/base/core/http-interceptors/handlers/bad-cart-request.handler.ts","../../../feature-libs/cart/base/core/http-interceptors/handlers/bad-voucher-request.handler.ts","../../../feature-libs/cart/base/core/store/multi-cart-store.module.ts","../../../feature-libs/cart/base/core/cart-base-core.module.ts","../../../feature-libs/cart/base/core/connectors/cart/index.ts","../../../feature-libs/cart/base/core/connectors/entry/index.ts","../../../feature-libs/cart/base/core/connectors/validation/converters.ts","../../../feature-libs/cart/base/core/connectors/validation/index.ts","../../../feature-libs/cart/base/core/connectors/voucher/index.ts","../../../feature-libs/cart/base/core/connectors/index.ts","../../../feature-libs/cart/base/core/event/index.ts","../../../feature-libs/cart/base/core/facade/index.ts","../../../feature-libs/cart/base/core/services/cart-config.service.ts","../../../feature-libs/cart/base/core/guards/cart-validation.guard.ts","../../../feature-libs/cart/base/core/guards/index.ts","../../../feature-libs/cart/base/core/services/product-import-info.service.ts","../../../feature-libs/cart/base/core/services/index.ts","../../../feature-libs/cart/base/core/public_api.ts","../../../feature-libs/cart/base/core/spartacus-cart-base-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Cart } from '@spartacus/cart/base/root';\nimport { StateUtils } from '@spartacus/core';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n/**\n * Add voucher process const\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: StateUtils.EntityProcessesLoaderState<Cart | undefined>;\n  index: {\n    [cartType: string]: string;\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { OrderEntry } from '@spartacus/cart/base/root';\nimport { StateUtils } from '@spartacus/core';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends StateUtils.EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n      pickupStore?: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      pickupStore?: string;\n      deliveryModeChanged?: boolean;\n      entry?: OrderEntry;\n      quantityAdded?: number;\n      statusCode?: string;\n      statusMessage?: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      pickupStore?: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends StateUtils.EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends StateUtils.EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity?: number;\n      pickupStore?: string;\n      pickupToDelivery?: boolean;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity?: number;\n      pickupStore?: string;\n      pickupToDelivery?: boolean;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity?: number;\n      pickupStore?: string;\n      pickupToDelivery?: boolean;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PROCESS_FEATURE, StateUtils } from '@spartacus/core';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends StateUtils.EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends StateUtils.EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n/**\n * Resets add voucher process\n */\nexport class CartResetAddVoucher extends StateUtils.EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends StateUtils.EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\nimport { Cart } from '@spartacus/cart/base/root';\nimport { StateUtils } from '@spartacus/core';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const LOAD_CARTS_SUCCESS = '[Cart] Load Carts Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends StateUtils.EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadCartsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CARTS_SUCCESS;\n  constructor(public payload: Cart[]) {\n    super(\n      MULTI_CART_DATA,\n      payload.map((cart) => cart?.code ?? '')\n    );\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends StateUtils.EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends StateUtils.ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends StateUtils.EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends StateUtils.EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | LoadCartsSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\nimport { Cart, CartType } from '@spartacus/cart/base/root';\nimport { StateUtils } from '@spartacus/core';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\nexport const SET_CART_TYPE_INDEX = '[Cart] Set cart type index';\nexport const SET_CART_DATA = '[Cart] Set cart data';\n\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n */\nexport class CartProcessesIncrement extends StateUtils.EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n */\nexport class CartProcessesDecrement extends StateUtils.EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends StateUtils.EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport class SetCartTypeIndex implements Action {\n  readonly type = SET_CART_TYPE_INDEX;\n  constructor(\n    public payload: { cartType: CartType; cartId: string | undefined }\n  ) {}\n}\n\nexport class SetCartData extends StateUtils.EntitySuccessAction {\n  readonly type = SET_CART_DATA;\n  constructor(public payload: { cart: Cart; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type MultiCartActions =\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState\n  | SetCartTypeIndex\n  | SetCartData;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-entry.action';\nexport * from './cart-voucher.action';\nexport * from './cart.action';\nexport * from './multi-cart.action';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as CartActions from './cart-group.actions';\nexport { CartActions };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CartModification } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty?: number,\n    pickupStore?: string,\n    pickupToDelivery?: boolean\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CartModification } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from './cart-entry.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity, pickupStore);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty?: number,\n    pickupStore?: string,\n    pickupToDelivery: boolean = false\n  ): Observable<CartModification> {\n    return this.adapter.update(\n      userId,\n      cartId,\n      entryNumber,\n      qty,\n      pickupStore,\n      pickupToDelivery\n    );\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { CartModification } from '@spartacus/cart/base/root';\nimport {\n  normalizeHttpError,\n  SiteContextActions,\n  withdrawOn,\n} from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CART_ADD_ENTRY),\n      map((action: CartActions.CartAddEntry) => action.payload),\n      concatMap((payload) => {\n        return this.cartEntryConnector\n          .add(\n            payload.userId,\n            payload.cartId,\n            payload.productCode,\n            payload.quantity,\n            payload.pickupStore\n          )\n          .pipe(\n            map(\n              (cartModification: CartModification) =>\n                new CartActions.CartAddEntrySuccess({\n                  ...payload,\n                  ...(cartModification as Required<CartModification>),\n                })\n            ),\n            catchError((error) =>\n              from([\n                new CartActions.CartAddEntryFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                }),\n                new CartActions.LoadCart({\n                  cartId: payload.cartId,\n                  userId: payload.userId,\n                }),\n              ])\n            )\n          );\n      }),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CART_REMOVE_ENTRY),\n      map((action: CartActions.CartRemoveEntry) => action.payload),\n      concatMap((payload) =>\n        this.cartEntryConnector\n          .remove(payload.userId, payload.cartId, payload.entryNumber)\n          .pipe(\n            map(() => {\n              return new CartActions.CartRemoveEntrySuccess({\n                ...payload,\n              });\n            }),\n            catchError((error) =>\n              from([\n                new CartActions.CartRemoveEntryFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                }),\n                new CartActions.LoadCart({\n                  cartId: payload.cartId,\n                  userId: payload.userId,\n                }),\n              ])\n            )\n          )\n      ),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CART_UPDATE_ENTRY),\n      map((action: CartActions.CartUpdateEntry) => action.payload),\n      concatMap((payload) =>\n        this.cartEntryConnector\n          .update(\n            payload.userId,\n            payload.cartId,\n            payload.entryNumber,\n            payload.quantity,\n            payload.pickupStore,\n            payload.pickupToDelivery\n          )\n          .pipe(\n            map(() => {\n              return new CartActions.CartUpdateEntrySuccess({\n                ...payload,\n              });\n            }),\n            catchError((error) =>\n              from([\n                new CartActions.CartUpdateEntryFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                }),\n                new CartActions.LoadCart({\n                  cartId: payload.cartId,\n                  userId: payload.userId,\n                }),\n              ])\n            )\n          )\n      ),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n} from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CART_ADD_VOUCHER),\n      map((action: CartActions.CartAddVoucher) => action.payload),\n      mergeMap((payload) => {\n        return this.cartVoucherConnector\n          .add(payload.userId, payload.cartId, payload.voucherId)\n          .pipe(\n            map(() => {\n              this.showGlobalMessage(\n                'voucher.applyVoucherSuccess',\n                payload.voucherId,\n                GlobalMessageType.MSG_TYPE_CONFIRMATION\n              );\n              return new CartActions.CartAddVoucherSuccess({\n                ...payload,\n              });\n            }),\n            catchError((error) =>\n              from([\n                new CartActions.CartAddVoucherFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                }),\n                new CartActions.CartProcessesDecrement(payload.cartId),\n                new CartActions.LoadCart({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                }),\n              ])\n            )\n          );\n      })\n    )\n  );\n\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CART_REMOVE_VOUCHER),\n      map((action: CartActions.CartRemoveVoucher) => action.payload),\n      mergeMap((payload) => {\n        return this.cartVoucherConnector\n          .remove(payload.userId, payload.cartId, payload.voucherId)\n          .pipe(\n            map(() => {\n              this.showGlobalMessage(\n                'voucher.removeVoucherSuccess',\n                payload.voucherId,\n                GlobalMessageType.MSG_TYPE_INFO\n              );\n              return new CartActions.CartRemoveVoucherSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n                voucherId: payload.voucherId,\n              });\n            }),\n            catchError((error) =>\n              from([\n                new CartActions.CartRemoveVoucherFail({\n                  error: normalizeHttpError(error),\n                  cartId: payload.cartId,\n                  userId: payload.userId,\n                  voucherId: payload.voucherId,\n                }),\n                new CartActions.LoadCart({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                }),\n              ])\n            )\n          );\n      })\n    )\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Cart } from '@spartacus/cart/base/root';\nimport {\n  EMAIL_PATTERN,\n  ErrorModel,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart?: Cart, userId?: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart?.guid ?? '';\n  }\n  return cart?.code ?? '';\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\nexport function voucherExceededError(error: ErrorModel): boolean {\n  return error.message === 'coupon.already.redeemed';\n}\n\nexport function voucherInvalidError(error: ErrorModel): boolean {\n  return error.message === 'coupon.invalid.code.provided';\n}\n\nexport function isVoucherError(error: ErrorModel): boolean {\n  return error.type === 'VoucherOperationError';\n}\n\nexport function isCartError(error: ErrorModel): boolean {\n  return (\n    error.type === 'CartError' ||\n    error.type === 'CartAddressError' ||\n    error.type === 'CartEntryError' ||\n    error.type === 'CartEntryGroupError'\n  );\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n\n/**\n * Indicates if given cart is empty.\n * Returns true is cart is undefined, null or is an empty object.\n */\nexport function isEmpty(cart?: Cart): boolean {\n  return !cart || (typeof cart === 'object' && Object.keys(cart).length === 0);\n}\n\n/**\n * Indicates if given string is matching email pattern\n */\nexport function isEmail(str?: string): boolean {\n  if (str) {\n    return str.match(EMAIL_PATTERN) ? true : false;\n  }\n  return false;\n}\n\n/**\n * Indicates if a given user is logged in on account different than preceding user account\n */\nexport function isJustLoggedIn(\n  userId: string,\n  previousUserId: string\n): boolean {\n  return (\n    userId !== OCC_USER_ID_ANONYMOUS && // not logged out\n    previousUserId !== userId // *just* logged in / switched to ASM emulation\n  );\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart, OrderEntry } from '@spartacus/cart/base/root';\nimport { StateUtils } from '@spartacus/core';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  StateUtils.EntityProcessesLoaderState<Cart | undefined>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<\n  StateWithMultiCart,\n  StateUtils.ProcessesLoaderState<Cart | undefined>\n> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: StateUtils.EntityProcessesLoaderState<Cart | undefined>) =>\n      StateUtils.entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: StateUtils.EntityProcessesLoaderState<Cart | undefined>) =>\n      StateUtils.entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: StateUtils.EntityProcessesLoaderState<Cart | undefined>) =>\n      StateUtils.entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: StateUtils.EntityProcessesLoaderState<Cart | undefined>) =>\n      StateUtils.entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry | undefined> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state.find((entry) => entry.product?.code === productCode);\n    }\n  );\n};\n\nexport const getCartsSelectorFactory: MemoizedSelector<\n  StateWithMultiCart,\n  Cart[]\n> = createSelector(\n  getMultiCartEntities,\n  (state: StateUtils.EntityProcessesLoaderState<Cart | undefined>) =>\n    Object.keys(state.entities).map((key) =>\n      StateUtils.entityValueSelector(state, key)\n    )\n);\n\nexport const getCartTypeIndex: MemoizedSelector<\n  StateWithMultiCart,\n  { [cartType: string]: string }\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.index);\n\nexport const getCartIdByTypeFactory = (\n  type: string\n): MemoizedSelector<StateWithMultiCart, string> => {\n  return createSelector(\n    getCartTypeIndex,\n    (state: { [cartType: string]: string }) => {\n      return state && state[type];\n    }\n  );\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Cart } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart | undefined>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   *\n   * Abstract method used to save a cart or update a saved cart\n   */\n  abstract save(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Cart } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart | undefined> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public save(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<Cart> {\n    return this.adapter.save(userId, cartId, saveCartName, saveCartDescription);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { Cart } from '@spartacus/cart/base/root';\nimport {\n  isNotUndefined,\n  normalizeHttpError,\n  OCC_CART_ID_CURRENT,\n  SiteContextActions,\n  withdrawOn,\n} from '@spartacus/core';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.LOAD_CART),\n      map((action: CartActions.LoadCart) => action.payload),\n      groupBy((payload) => payload.cartId),\n      mergeMap((group$) =>\n        group$.pipe(\n          switchMap((payload) => {\n            return of(payload).pipe(\n              withLatestFrom(\n                this.store.pipe(\n                  select(\n                    getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                  )\n                )\n              )\n            );\n          }),\n          filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n          map(([payload]) => payload),\n          switchMap((payload) => {\n            return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n              mergeMap((cart) => {\n                let actions = [];\n                if (cart) {\n                  actions.push(\n                    new CartActions.LoadCartSuccess({\n                      ...payload,\n                      cart,\n                      cartId: getCartIdByUserId(cart, payload.userId),\n                    })\n                  );\n\n                  if (payload.cartId === OCC_CART_ID_CURRENT) {\n                    // Removing cart from entity object under `current` key as it is no longer needed.\n                    // Current cart is loaded under it's code entity.\n                    actions.push(\n                      new CartActions.RemoveCart({\n                        cartId: OCC_CART_ID_CURRENT,\n                      })\n                    );\n                  }\n                } else {\n                  actions = [\n                    new CartActions.LoadCartFail({\n                      ...payload,\n                      error: {},\n                    }),\n                  ];\n                }\n                return actions;\n              }),\n              catchError((error) => this.handleLoadCartError(payload, error))\n            );\n          })\n        )\n      ),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  protected handleLoadCartError(payload: any, error: any) {\n    if (error?.error?.errors) {\n      const couponExpiredErrors = error.error.errors.filter(\n        (err: any) => err.reason === 'invalid'\n      );\n      if (couponExpiredErrors.length > 0) {\n        // Reload in case of expired coupon.\n        return of(new CartActions.LoadCart({ ...payload }));\n      }\n\n      const cartNotFoundErrors = error.error.errors.filter(\n        (err: any) =>\n          isCartNotFoundError(err) || err.reason === 'UnknownResourceError'\n      );\n      if (cartNotFoundErrors.length > 0) {\n        // Remove cart as it doesn't exist on backend (selective cart always exists).\n        return of(new CartActions.RemoveCart({ cartId: payload.cartId }));\n      }\n    }\n    return of(\n      new CartActions.LoadCartFail({\n        ...payload,\n        error: normalizeHttpError(error),\n      })\n    );\n  }\n\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.RemoveCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CREATE_CART),\n      map((action: CartActions.CreateCart) => action.payload),\n      mergeMap((payload) => {\n        return this.cartConnector\n          .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n          .pipe(\n            switchMap((cart: Cart) => {\n              const conditionalActions = [];\n              if (payload.oldCartId) {\n                conditionalActions.push(\n                  new CartActions.MergeCartSuccess({\n                    extraData: payload.extraData,\n                    userId: payload.userId,\n                    tempCartId: payload.tempCartId,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                    oldCartId: payload.oldCartId,\n                  })\n                );\n              }\n              return [\n                new CartActions.CreateCartSuccess({\n                  ...payload,\n                  cart,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                }),\n                new CartActions.RemoveCart({ cartId: payload.tempCartId }),\n                ...conditionalActions,\n              ];\n            }),\n            catchError((error) =>\n              of(\n                new CartActions.CreateCartFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                })\n              )\n            )\n          );\n      }),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  mergeCart$: Observable<CartActions.CreateCart> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.MERGE_CART),\n      map((action: CartActions.MergeCart) => action.payload),\n      switchMap((payload) => {\n        return this.cartConnector\n          .load(payload.userId, OCC_CART_ID_CURRENT)\n          .pipe(\n            map((currentCart) => {\n              if (currentCart?.code !== payload.cartId) {\n                return new CartActions.CreateCart({\n                  userId: payload.userId,\n                  oldCartId: payload.cartId,\n                  toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n                  extraData: payload.extraData,\n                  tempCartId: payload.tempCartId,\n                });\n              }\n            }),\n            filter(isNotUndefined)\n          );\n      }),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n      map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n      concatMap((payload) =>\n        from([\n          new CartActions.CartProcessesDecrement(payload.cartId),\n          new CartActions.LoadCart({\n            userId: payload.userId,\n            cartId: payload.cartId,\n          }),\n        ])\n      )\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  refreshWithoutProcesses$: Observable<CartActions.LoadCart> = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(\n          CartActions.CART_ADD_ENTRY_SUCCESS,\n          CartActions.CART_REMOVE_ENTRY_SUCCESS,\n          CartActions.CART_UPDATE_ENTRY_SUCCESS,\n          CartActions.CART_REMOVE_VOUCHER_SUCCESS\n        ),\n        map(\n          (\n            action:\n              | CartActions.CartAddEntrySuccess\n              | CartActions.CartUpdateEntrySuccess\n              | CartActions.CartRemoveEntrySuccess\n              | CartActions.CartRemoveVoucherSuccess\n          ) => action.payload\n        ),\n        map(\n          (payload) =>\n            new CartActions.LoadCart({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            })\n        )\n      )\n  );\n\n  resetCartDetailsOnSiteContextChange$: Observable<CartActions.ResetCartDetails> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(\n          SiteContextActions.LANGUAGE_CHANGE,\n          SiteContextActions.CURRENCY_CHANGE\n        ),\n        mergeMap(() => {\n          return [new CartActions.ResetCartDetails()];\n        })\n      )\n    );\n\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.ADD_EMAIL_TO_CART),\n      map((action: CartActions.AddEmailToCart) => action.payload),\n      mergeMap((payload) =>\n        this.cartConnector\n          .addEmail(payload.userId, payload.cartId, payload.email)\n          .pipe(\n            mergeMap(() => {\n              return [\n                new CartActions.AddEmailToCartSuccess({\n                  ...payload,\n                }),\n                new CartActions.LoadCart({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                }),\n              ];\n            }),\n            catchError((error) =>\n              from([\n                new CartActions.AddEmailToCartFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                }),\n                new CartActions.LoadCart({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                }),\n              ])\n            )\n          )\n      ),\n      withdrawOn(this.contextChange$)\n    )\n  );\n\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.DELETE_CART),\n      map((action: CartActions.DeleteCart) => action.payload),\n      mergeMap((payload) =>\n        this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n          map(() => {\n            return new CartActions.DeleteCartSuccess({ ...payload });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.DeleteCartFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              // Error might happen in higher backend layer and cart could still be removed.\n              // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n              new CartActions.LoadCart({\n                ...payload,\n              }),\n            ])\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { CartType } from '@spartacus/cart/base/root';\nimport { isNotUndefined, OCC_CART_ID_CURRENT } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { isSelectiveCart } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n\n  processesIncrement$: Observable<CartActions.CartProcessesIncrement> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(CartActions.CART_ADD_VOUCHER),\n        map((action: CartActions.CartAddVoucher) => action.payload),\n        map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n      )\n    );\n\n  setSelectiveId$: Observable<CartActions.SetCartTypeIndex> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.LOAD_CART_SUCCESS),\n      map((action: Action) => {\n        switch (action.type) {\n          case CartActions.LOAD_CART_SUCCESS: {\n            const payload = (action as CartActions.LoadCartSuccess).payload;\n            if (isSelectiveCart(payload.cartId)) {\n              return new CartActions.SetCartTypeIndex({\n                cartType: CartType.SELECTIVE,\n                cartId: payload.cartId,\n              });\n            }\n            break;\n          }\n        }\n      }),\n      filter(isNotUndefined)\n    )\n  );\n\n  setActiveCartId$: Observable<CartActions.SetCartTypeIndex> = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(\n          CartActions.LOAD_CART_SUCCESS,\n          CartActions.LOAD_CART,\n          CartActions.CREATE_CART_SUCCESS,\n          CartActions.CREATE_CART,\n          CartActions.SET_ACTIVE_CART_ID\n        ),\n        map((action: CartActions.CartAction | CartActions.SetActiveCartId) => {\n          switch (action.type) {\n            case CartActions.LOAD_CART: {\n              return this.getActiveCartTypeOnLoad(action);\n            }\n            case CartActions.LOAD_CART_SUCCESS: {\n              if (action?.payload?.extraData?.active) {\n                // saved cart is not active cart\n                if (action.payload?.cart.saveTime) {\n                  return new CartActions.SetCartTypeIndex({\n                    cartType: CartType.ACTIVE,\n                    cartId: '',\n                  });\n                }\n                return new CartActions.SetCartTypeIndex({\n                  cartType: CartType.ACTIVE,\n                  cartId: action.meta.entityId as string,\n                });\n              }\n              break;\n            }\n            case CartActions.CREATE_CART: {\n              return this.getActiveCartTypeOnCreate(action);\n            }\n            case CartActions.CREATE_CART_SUCCESS: {\n              return new CartActions.SetCartTypeIndex({\n                cartType: action?.payload?.extraData?.active\n                  ? CartType.ACTIVE\n                  : CartType.NEW_CREATED,\n                cartId: action.meta.entityId as string,\n              });\n            }\n            case CartActions.SET_ACTIVE_CART_ID:\n              return new CartActions.SetCartTypeIndex({\n                cartType: CartType.ACTIVE,\n                cartId: action.payload,\n              });\n          }\n          return undefined;\n        }),\n        filter(isNotUndefined)\n      )\n  );\n\n  /**\n   * Verifies if cart is the current cart and returns the appropriate cart type\n   * @param action\n   * @returns cart type needed on load\n   */\n  private getActiveCartTypeOnLoad(\n    action: CartActions.LoadCart\n  ): CartActions.SetCartTypeIndex | undefined {\n    if (action?.payload?.cartId === OCC_CART_ID_CURRENT) {\n      return new CartActions.SetCartTypeIndex({\n        cartType: CartType.ACTIVE,\n        cartId: '',\n      });\n    }\n    return undefined;\n  }\n\n  /**\n   * Verifies if cart is active and returns the appropriate cart type\n   * @param action\n   * @returns cart type needed on creation\n   */\n  private getActiveCartTypeOnCreate(\n    action: CartActions.CreateCart\n  ): CartActions.SetCartTypeIndex | undefined {\n    if (action?.payload?.extraData?.active) {\n      return new CartActions.SetCartTypeIndex({\n        cartType: CartType.ACTIVE,\n        cartId: action.meta.entityId as string,\n      });\n    }\n    return undefined;\n  }\n\n  constructor(private actions$: Actions) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CartEntryEffects } from './cart-entry.effect';\nimport { CartVoucherEffects } from './cart-voucher.effect';\nimport { CartEffects } from './cart.effect';\nimport { MultiCartEffects } from './multi-cart.effect';\n\nexport const effects: any[] = [\n  CartEntryEffects,\n  CartVoucherEffects,\n  CartEffects,\n  MultiCartEffects,\n];\n\nexport * from './cart-entry.effect';\nexport * from './cart-voucher.effect';\nexport * from './cart.effect';\nexport * from './multi-cart.effect';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Cart, CartType } from '@spartacus/cart/base/root';\nimport { StateUtils } from '@spartacus/core';\nimport { CartActions } from '../actions/index';\n\nexport const cartTypeIndexInitialState = { [CartType.ACTIVE]: '' };\nexport function cartTypeIndexReducer(\n  state: {\n    [cartType: string]: string;\n  } = cartTypeIndexInitialState,\n  action: CartActions.MultiCartActions | CartActions.CartAction\n): {\n  [cartType: string]: string;\n} {\n  switch (action.type) {\n    case CartActions.SET_CART_TYPE_INDEX:\n      return {\n        ...state,\n        [action.payload.cartType]: action.payload.cartId as string,\n      };\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS: {\n      if (action.payload?.cartId === state[CartType.ACTIVE]) {\n        return {\n          ...state,\n          [CartType.ACTIVE]: '',\n        };\n      }\n      return state;\n    }\n    case CartActions.CLEAR_CART_STATE:\n      return cartTypeIndexInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\nexport function cartEntitiesReducer(\n  state: Cart | undefined = cartEntitiesInitialState,\n  action: StateUtils.LoaderAction\n): Cart | undefined {\n  switch (action.type) {\n    case CartActions.LOAD_CARTS_SUCCESS:\n      return action.payload;\n\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.SET_CART_DATA:\n      return action.payload.cart;\n  }\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Cart } from '@spartacus/cart/base/root';\nimport { AuthActions, StateUtils } from '@spartacus/core';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  cartEntitiesReducer,\n  cartTypeIndexReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<\n  ActionReducerMap<MultiCartState>\n> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState, any> {\n  return {\n    carts: StateUtils.entityProcessesLoaderReducer<Cart | undefined>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    index: cartTypeIndexReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './multi-cart.selector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as MultiCartSelectors from './multi-cart-group.selectors';\nexport { MultiCartSelectors };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './actions/index';\nexport * from './effects/index';\nexport * from './multi-cart-state';\nexport * from './reducers/index';\nexport * from './selectors/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { CartType } from '@spartacus/cart/base/root';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  SiteContextParamsService,\n  StatePersistenceService,\n  StorageSyncType,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: 'cart',\n        state$: this.getCartState(),\n        context$: this.siteContextParamsService.getValues([\n          BASE_SITE_CONTEXT_ID,\n        ]),\n        storageType: StorageSyncType.LOCAL_STORAGE,\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      // Since getCartState() may be called while the module is lazy loded\n      // The cart state slice may not exist yet in the first store emissions.\n      filter((store) => !!store.cart),\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      map((state) => state.index),\n      distinctUntilKeyChanged('Active'),\n      map((indexState) => {\n        return {\n          active: indexState[CartType.ACTIVE] ?? '',\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string } | undefined) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    } else {\n      this.store.dispatch(new CartActions.SetActiveCartId(''));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { Action, ActionReducer, MetaReducer, META_REDUCERS } from '@ngrx/store';\nimport { CartType } from '@spartacus/cart/base/root';\nimport {\n  Config,\n  ConfigInitializerService,\n  MODULE_INITIALIZER,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n): () => Promise<Config> {\n  const result = () =>\n    configInit\n      .getStable('context')\n      .pipe(\n        tap(() => {\n          cartStatePersistenceService.initSync();\n        })\n      )\n      .toPromise();\n  return result;\n}\n\n/**\n * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`\n * will use `current` cart instead of the one saved in browser. This meta reducer\n * sets the value on store initialization to undefined cart which holds active cart loading\n * until the data from storage is restored.\n */\nexport function uninitializeActiveCartMetaReducerFactory(): MetaReducer<any> {\n  const metaReducer =\n    (reducer: ActionReducer<any>) => (state: any, action: Action) => {\n      const newState = { ...state };\n      if (action.type === '@ngrx/store/init') {\n        newState.cart = {\n          ...newState.cart,\n          ...{ index: { [CartType.ACTIVE]: undefined } },\n        };\n      }\n      return reducer(newState, action);\n    };\n  return metaReducer;\n}\n\n/**\n * Complimentary module for cart to store cart id in browser storage.\n * This makes it possible to work on the same anonymous cart even after page refresh.\n */\n@NgModule({\n  imports: [],\n  providers: [\n    {\n      provide: MODULE_INITIALIZER,\n      useFactory: cartStatePersistenceFactory,\n      deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n      multi: true,\n    },\n    {\n      provide: META_REDUCERS,\n      useFactory: uninitializeActiveCartMetaReducerFactory,\n      multi: true,\n    },\n  ],\n})\nexport class CartPersistenceModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CartModificationList } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CartValidationAdapter {\n  abstract validate(\n    cartId: string,\n    userId: string\n  ): Observable<CartModificationList>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CartModificationList } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CartValidationAdapter } from './cart-validation.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartValidationConnector {\n  constructor(protected adapter: CartValidationAdapter) {}\n\n  validate(cartId: string, userId: string): Observable<CartModificationList> {\n    return this.adapter.validate(cartId, userId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ActiveCartFacade,\n  AddCartVoucherEvent,\n  AddCartVoucherFailEvent,\n  AddCartVoucherSuccessEvent,\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n  CartRemoveEntryFailEvent,\n  CartRemoveEntrySuccessEvent,\n  CartUpdateEntryFailEvent,\n  CartUpdateEntrySuccessEvent,\n  CreateCartEvent,\n  CreateCartFailEvent,\n  CreateCartSuccessEvent,\n  DeleteCartEvent,\n  DeleteCartFailEvent,\n  DeleteCartSuccessEvent,\n  RemoveCartVoucherEvent,\n  RemoveCartVoucherFailEvent,\n  RemoveCartVoucherSuccessEvent,\n  MergeCartSuccessEvent,\n} from '@spartacus/cart/base/root';\nimport {\n  ActionToEventMapping,\n  createFrom,\n  EventService,\n  StateEventService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { CartActions } from '../store/index';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartFacade,\n    protected stateEventService: StateEventService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerCreateCart();\n    this.registerAddEntry();\n    this.registerRemoveEntry();\n    this.registerUpdateEntry();\n    this.registerDeleteCart();\n    this.registerAddCartVoucher();\n    this.registerRemoveCartVoucher();\n    this.registerMergeCartSuccess();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry(): void {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  protected registerRemoveEntry(): void {\n    this.registerMapped({\n      action: CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      event: CartRemoveEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_REMOVE_ENTRY_FAIL,\n      event: CartRemoveEntryFailEvent,\n    });\n  }\n\n  protected registerUpdateEntry(): void {\n    this.registerMapped({\n      action: CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      event: CartUpdateEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_UPDATE_ENTRY_FAIL,\n      event: CartUpdateEntryFailEvent,\n    });\n  }\n\n  protected registerMergeCartSuccess(): void {\n    this.registerMapped({\n      action: CartActions.MERGE_CART_SUCCESS,\n      event: MergeCartSuccessEvent,\n    });\n  }\n\n  protected registerCreateCart(): void {\n    this.stateEventService.register({\n      action: CartActions.CREATE_CART,\n      event: CreateCartEvent,\n    });\n    this.stateEventService.register({\n      action: CartActions.CREATE_CART_SUCCESS,\n      event: CreateCartSuccessEvent,\n    });\n    this.stateEventService.register({\n      action: CartActions.CREATE_CART_FAIL,\n      event: CreateCartFailEvent,\n    });\n  }\n\n  /**\n   * Registers delete cart events\n   */\n  protected registerDeleteCart(): void {\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART,\n      event: DeleteCartEvent,\n      factory: (action: CartActions.DeleteCart) =>\n        createFrom(DeleteCartEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART_SUCCESS,\n      event: DeleteCartSuccessEvent,\n      factory: (action: CartActions.DeleteCartSuccess) =>\n        createFrom(DeleteCartSuccessEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART_FAIL,\n      event: DeleteCartFailEvent,\n      factory: (action: CartActions.DeleteCartFail) =>\n        createFrom(DeleteCartFailEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n  }\n\n  protected registerAddCartVoucher(): void {\n    this.stateEventService.register({\n      action: CartActions.CART_ADD_VOUCHER,\n      event: AddCartVoucherEvent,\n    });\n\n    this.stateEventService.register({\n      action: CartActions.CART_ADD_VOUCHER_SUCCESS,\n      event: AddCartVoucherSuccessEvent,\n    });\n\n    this.stateEventService.register({\n      action: CartActions.CART_ADD_VOUCHER_FAIL,\n      event: AddCartVoucherFailEvent,\n    });\n  }\n\n  protected registerRemoveCartVoucher(): void {\n    this.stateEventService.register({\n      action: CartActions.CART_REMOVE_VOUCHER,\n      event: RemoveCartVoucherEvent,\n    });\n\n    this.stateEventService.register({\n      action: CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      event: RemoveCartVoucherSuccessEvent,\n    });\n\n    this.stateEventService.register({\n      action: CartActions.CART_REMOVE_VOUCHER_FAIL,\n      event: RemoveCartVoucherFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      switchMap((action) => {\n        // SwitchMap was used instead of withLatestFrom, because we only want to subscribe to cart stream when action is dispatched.\n        // Using withLatestFrom would trigger subscription to cart observables on event subscription and that causes side effects,\n        // such as loading cart when we don't yet need it.\n        return of(action).pipe(\n          withLatestFrom(\n            this.activeCartService.getActive(),\n            this.activeCartService.getActiveCartId()\n          )\n        );\n      }),\n      filter(\n        ([action, _activeCart, activeCartId]) =>\n          action.payload['cartId'] === activeCartId\n      ),\n      map(([action, activeCart]) =>\n        createFrom(mapping.event as Type<T>, {\n          ...action.payload,\n          cartCode: activeCart.code,\n          entry: action.payload.entry\n            ? action.payload.entry\n            : activeCart.entries?.[Number(action.payload.entryNumber)],\n        })\n      )\n    );\n    return this.event.register(mapping.event as Type<T>, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(\n      ofType(...([] as string[]).concat(actionType))\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {\n    // Intentional empty constructor\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CartPageEvent } from '@spartacus/cart/base/root';\nimport { createFrom, EventService } from '@spartacus/core';\nimport { NavigationEvent } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageEventBuilder {\n  constructor(protected eventService: EventService) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(CartPageEvent, this.buildCartPageEvent());\n  }\n\n  protected buildCartPageEvent(): Observable<CartPageEvent> {\n    return this.eventService.get(NavigationEvent).pipe(\n      filter((navigationEvent) => navigationEvent.semanticRoute === 'cart'),\n      map((navigationEvent) =>\n        createFrom(CartPageEvent, {\n          navigation: navigationEvent,\n        })\n      )\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CartPageEventBuilder } from './cart-page-event.builder';\n\n@NgModule({})\nexport class CartPageEventModule {\n  constructor(_cartPageEventBuilder: CartPageEventBuilder) {\n    // Intentional empty constructor\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport {\n  ActiveCartFacade,\n  Cart,\n  CartType,\n  MultiCartFacade,\n  OrderEntry,\n} from '@spartacus/cart/base/root';\nimport {\n  getLastValueSync,\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n  StateUtils,\n  User,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of, Subscription, using } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pairwise,\n  shareReplay,\n  switchMap,\n  switchMapTo,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  getCartIdByUserId,\n  isEmail,\n  isEmpty,\n  isJustLoggedIn,\n  isTempCartId,\n} from '../utils/utils';\n\n@Injectable()\nexport class ActiveCartService implements ActiveCartFacade, OnDestroy {\n  protected activeCart$: Observable<Cart>;\n  protected subscription = new Subscription();\n\n  // This stream is used for referencing carts in API calls.\n  protected activeCartId$ = this.userIdService.getUserId().pipe(\n    // We want to wait the initialization of cartId until the userId is initialized\n    // We have take(1) to not trigger this stream, when userId changes.\n    take(1),\n    switchMapTo(this.multiCartFacade.getCartIdByType(CartType.ACTIVE)),\n    // We also wait until we initialize cart from localStorage\n    filter((cartId) => cartId !== undefined),\n    // fallback to current when we don't have particular cart id\n    map((cartId) => (cartId === '' ? OCC_CART_ID_CURRENT : cartId))\n  );\n\n  // Stream with active cart entity\n  protected cartEntity$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartFacade.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected multiCartFacade: MultiCartFacade,\n    protected userIdService: UserIdService\n  ) {\n    this.initActiveCart();\n    this.detectUserChange();\n  }\n\n  protected initActiveCart() {\n    // Stream for getting the cart value\n    const cartValue$ = this.cartEntity$.pipe(\n      map((cartEntity) => {\n        return {\n          cart: cartEntity.value,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded: Boolean(\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading\n          ),\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || isEmpty(cart))\n    );\n\n    // Responsible for loading cart when it does not exist (eg. app initialization when we have only cartId)\n    const loading = cartValue$.pipe(\n      withLatestFrom(this.activeCartId$, this.userIdService.getUserId()),\n      tap(([{ cart, loaded, isStable }, cartId, userId]) => {\n        if (isStable && isEmpty(cart) && !loaded && !isTempCartId(cartId)) {\n          this.load(cartId, userId);\n        }\n      })\n    );\n\n    this.activeCart$ = using(\n      () => loading.subscribe(),\n      () => cartValue$\n    ).pipe(\n      // Normalization for empty cart value returned as empty object.\n      map(({ cart }) => (cart ? cart : {})),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  protected detectUserChange() {\n    // Any changes of userId is interesting for us, because we have to merge/load/switch cart in those cases.\n    this.subscription.add(\n      this.userIdService\n        .getUserId()\n        .pipe(\n          // We never trigger cart merge/load on app initialization here and that's why we wait with pairwise for a change of userId.\n          pairwise(),\n          // We need cartId once we have the previous and current userId. We don't want to subscribe to cartId stream before.\n          withLatestFrom(this.activeCartId$)\n        )\n        .subscribe(([[previousUserId, userId], cartId]) => {\n          // Only change of user and not logout (current userId !== anonymous) should trigger loading mechanism\n          if (isJustLoggedIn(userId, previousUserId)) {\n            this.loadOrMerge(cartId, userId, previousUserId);\n          }\n        })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Waits for the cart to be stable before returning the active cart.\n   */\n  takeActive(): Observable<Cart> {\n    return this.isStable().pipe(\n      filter((isStable) => isStable),\n      switchMap(() => this.getActive()),\n      filter((cart) => !!cart),\n      take(1)\n    );\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      withLatestFrom(this.userIdService.getUserId()),\n      map(([cart, userId]) => getCartIdByUserId(cart, userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Waits for the cart to be stable before returning the active cart's ID.\n   */\n  takeActiveCartId(): Observable<string> {\n    return this.isStable().pipe(\n      filter((isStable) => isStable),\n      switchMap(() => this.getActiveCartId()),\n      filter((cartId) => !!cartId),\n      take(1)\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartFacade.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns last cart entry for provided product code.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param productCode\n   */\n  getLastEntry(productCode: string): Observable<OrderEntry | undefined> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartFacade.getLastEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartEntity$.pipe(\n      map((cartEntity) => Boolean(cartEntity.loading)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartFacade.isStable(cartId))\n    );\n  }\n\n  /**\n   * Loads cart in every case except anonymous user and current cart combination\n   */\n  protected load(cartId: string, userId: string): void {\n    if (!(userId === OCC_USER_ID_ANONYMOUS && cartId === OCC_CART_ID_CURRENT)) {\n      this.multiCartFacade.loadCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  /**\n   * Loads cart upon login, whenever there's an existing cart, merge it into the current user cart\n   * cartId will be defined (not '', null, undefined)\n   */\n  protected loadOrMerge(\n    cartId: string,\n    userId: string,\n    previousUserId: string\n  ): void {\n    if (\n      cartId === OCC_CART_ID_CURRENT ||\n      // It covers the case when you are logged in and then asm user login, you don't want to merge, but only load emulated user cart\n      // Similarly when you are logged in as asm user and you logout and want to resume previous user session\n      previousUserId !== OCC_USER_ID_ANONYMOUS\n    ) {\n      this.multiCartFacade.loadCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (Boolean(getLastValueSync(this.isGuestCart()))) {\n      this.guestCartMerge(cartId);\n    } else {\n      // We have particular cart locally, but we logged in, so we need to combine this with current cart or make it ours.\n      this.multiCartFacade.mergeToCurrentCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  protected guestCartMerge(cartId: string): void {\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        this.multiCartFacade.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n        this.addEntriesGuestMerge(entries);\n      });\n  }\n\n  /**\n   * Adds entries from guest cart to user cart\n   */\n  protected addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product?.code ?? '',\n      quantity: entry.quantity ?? 0,\n    }));\n    this.requireLoadedCart(true)\n      .pipe(withLatestFrom(this.userIdService.getUserId()))\n      .subscribe(([cart, userId]) => {\n        this.multiCartFacade.addEntries(\n          userId,\n          getCartIdByUserId(cart, userId),\n          entriesToAdd\n        );\n      });\n  }\n\n  protected isCartCreating(\n    cartState: StateUtils.ProcessesLoaderState<Cart | undefined>,\n    cartId: string\n  ) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  // When the function `requireLoadedCart` is first called, the init cart loading for login user may not be done\n  private checkInitLoad: boolean | undefined = undefined;\n\n  requireLoadedCart(forGuestMerge = false): Observable<Cart> {\n    this.checkInitLoad = this.checkInitLoad === undefined;\n\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    const cartSelector$ = (\n      forGuestMerge\n        ? this.cartEntity$.pipe(\n            filter(() => !Boolean(getLastValueSync(this.isGuestCart())))\n          )\n        : this.cartEntity$\n    ).pipe(filter((cartState) => !cartState.loading || !!this.checkInitLoad));\n\n    return this.activeCartId$.pipe(\n      // Avoid load/create call when there are new cart creating at the moment\n      withLatestFrom(cartSelector$),\n      filter(([cartId, cartState]) => !this.isCartCreating(cartState, cartId)),\n      map(([, cartState]) => cartState),\n      take(1),\n      withLatestFrom(this.userIdService.getUserId()),\n      tap(([cartState, userId]) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          isEmpty(cartState.value) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          !cartState.loading\n        ) {\n          this.load(OCC_CART_ID_CURRENT, userId);\n        }\n        this.checkInitLoad = false;\n      }),\n      switchMapTo(cartSelector$),\n      // create cart can happen to anonymous user if it is empty or to any other user if it is loaded and empty\n      withLatestFrom(this.userIdService.getUserId()),\n      filter(([cartState, userId]) =>\n        Boolean(\n          userId === OCC_USER_ID_ANONYMOUS ||\n            cartState.success ||\n            cartState.error\n        )\n      ),\n      take(1),\n      tap(([cartState, userId]) => {\n        if (isEmpty(cartState.value)) {\n          this.multiCartFacade.createCart({\n            userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n      }),\n      switchMapTo(cartSelector$),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      withLatestFrom(this.activeCartId$),\n      filter(([cartState, cartId]) => !this.isCartCreating(cartState, cartId)),\n      map(([cartState]) => cartState.value),\n      filter((cart) => !isEmpty(cart)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  addEntry(productCode: string, quantity: number, pickupStore?: string): void {\n    this.requireLoadedCart()\n      .pipe(withLatestFrom(this.userIdService.getUserId()))\n      .subscribe(([cart, userId]) => {\n        this.multiCartFacade.addEntry(\n          userId,\n          getCartIdByUserId(cart, userId),\n          productCode,\n          quantity,\n          pickupStore\n        );\n      });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.activeCartId$\n      .pipe(withLatestFrom(this.userIdService.getUserId()), take(1))\n      .subscribe(([cartId, userId]) => {\n        this.multiCartFacade.removeEntry(\n          userId,\n          cartId,\n          entry.entryNumber as number\n        );\n      });\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   * @param pickupStore\n   * @param pickupToDelivery\n   */\n  updateEntry(\n    entryNumber: number,\n    quantity?: number,\n    pickupStore?: string,\n    pickupToDelivery: boolean = false\n  ): void {\n    this.activeCartId$\n      .pipe(withLatestFrom(this.userIdService.getUserId()), take(1))\n      .subscribe(([cartId, userId]) => {\n        this.multiCartFacade.updateEntry(\n          userId,\n          cartId,\n          entryNumber,\n          quantity,\n          pickupStore,\n          pickupToDelivery\n        );\n      });\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry | undefined> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartFacade.getEntry(cartId, productCode)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.activeCartId$\n      .pipe(withLatestFrom(this.userIdService.getUserId()), take(1))\n      .subscribe(([cartId, userId]) => {\n        this.multiCartFacade.assignEmail(cartId, userId, email);\n      });\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.activeCart$.pipe(map((cart) => cart.user as User));\n  }\n\n  // TODO: Make cart required param in 4.0\n  /**\n   * Returns observable of true for guest cart\n   */\n  isGuestCart(cart?: Cart): Observable<boolean> {\n    return cart\n      ? of(this.isCartUserGuest(cart))\n      : this.activeCart$.pipe(\n          map((activeCart) => this.isCartUserGuest(activeCart)),\n          distinctUntilChanged()\n        );\n  }\n\n  protected isCartUserGuest(cart: Cart): boolean {\n    const cartUser = cart.user;\n    return Boolean(\n      cartUser &&\n        (cartUser.name === OCC_USER_ID_GUEST ||\n          isEmail(cartUser.uid?.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product?.code ?? '',\n      quantity: entry.quantity ?? 0,\n    }));\n    this.requireLoadedCart()\n      .pipe(withLatestFrom(this.userIdService.getUserId()))\n      .subscribe(([cart, userId]) => {\n        if (cart) {\n          this.multiCartFacade.addEntries(\n            userId,\n            getCartIdByUserId(cart, userId),\n            entriesToAdd\n          );\n        }\n      });\n  }\n\n  /**\n   * Reloads active cart\n   */\n  reloadActiveCart() {\n    combineLatest([this.getActiveCartId(), this.userIdService.takeUserId()])\n      .pipe(\n        take(1),\n        map(([cartId, userId]) => {\n          this.multiCartFacade.loadCart({\n            cartId,\n            userId,\n            extraData: { active: true },\n          });\n        })\n      )\n      .subscribe();\n  }\n\n  hasPickupItems(): Observable<boolean> {\n    return this.getActive().pipe(\n      map((cart) =>\n        cart.pickupItemsQuantity ? cart.pickupItemsQuantity > 0 : false\n      )\n    );\n  }\n\n  hasDeliveryItems(): Observable<boolean> {\n    return this.getActive().pipe(\n      map((cart) =>\n        cart.deliveryItemsQuantity ? cart.deliveryItemsQuantity > 0 : false\n      )\n    );\n  }\n\n  getPickupEntries(): Observable<OrderEntry[]> {\n    return this.getEntries().pipe(\n      map((entries) =>\n        entries.filter((entry) => entry.deliveryPointOfService !== undefined)\n      )\n    );\n  }\n\n  getDeliveryEntries(): Observable<OrderEntry[]> {\n    return this.getEntries().pipe(\n      map((entries) =>\n        entries.filter((entry) => entry.deliveryPointOfService === undefined)\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { CartModification } from '@spartacus/cart/base/root';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { take, tap, withLatestFrom } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartValidationStateService implements OnDestroy {\n  protected NAVIGATION_SKIPS = 2;\n  protected navigationIdCount = 0;\n\n  protected subscription = new Subscription();\n  cartValidationResult$: Observable<CartModification[]> = new ReplaySubject<\n    CartModification[]\n  >(1) as Observable<CartModification[]>;\n\n  constructor(protected routingService: RoutingService) {\n    this.setInitialState();\n  }\n\n  protected checkForValidationResultClear$ = this.routingService\n    .getRouterState()\n    .pipe(\n      withLatestFrom(this.cartValidationResult$),\n      tap(([routerState, cartModifications]) => {\n        if (\n          this.navigationIdCount + this.NAVIGATION_SKIPS <=\n            routerState.navigationId &&\n          cartModifications.length\n        ) {\n          (\n            this.cartValidationResult$ as ReplaySubject<CartModification[]>\n          ).next([]);\n          this.navigationIdCount = routerState.navigationId;\n        }\n      })\n    );\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  protected setInitialState() {\n    this.setNavigationIdStep();\n    this.subscription.add(this.checkForValidationResultClear$.subscribe());\n  }\n\n  updateValidationResultAndRoutingId(cartModification: CartModification[]) {\n    (this.cartValidationResult$ as ReplaySubject<CartModification[]>).next(\n      cartModification\n    );\n    this.setNavigationIdStep();\n  }\n\n  protected setNavigationIdStep() {\n    this.routingService\n      .getRouterState()\n      .pipe(take(1))\n      .subscribe(\n        (routerState) => (this.navigationIdCount = routerState.navigationId)\n      );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  ActiveCartFacade,\n  CartModification,\n  CartModificationList,\n  CartValidationFacade,\n} from '@spartacus/cart/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, switchMap, take } from 'rxjs/operators';\nimport { CartValidationConnector } from '../connectors/validation/cart-validation.connector';\nimport { CartValidationStateService } from '../services/cart-validation-state.service';\n\n@Injectable()\nexport class CartValidationService implements CartValidationFacade {\n  protected validateCartCommand: Command<void, CartModificationList> =\n    this.command.create(\n      () =>\n        combineLatest([\n          this.activeCartFacade.getActiveCartId(),\n          this.userIdService.takeUserId(),\n          this.activeCartFacade.isStable(),\n        ]).pipe(\n          filter(([_, __, loaded]) => loaded),\n          take(1),\n          switchMap(([cartId, userId]) =>\n            this.cartValidationConnector.validate(cartId, userId)\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected cartValidationConnector: CartValidationConnector,\n    protected command: CommandService,\n    protected userIdService: UserIdService,\n    protected activeCartFacade: ActiveCartFacade,\n    protected cartValidationStateService: CartValidationStateService\n  ) {}\n\n  /**\n   * Validates cart and returns cart modification list.\n   */\n  validateCart(): Observable<CartModificationList> {\n    return this.validateCartCommand.execute();\n  }\n\n  /**\n   * Returns cart modification results\n   */\n  getValidationResults(): Observable<CartModification[]> {\n    return this.cartValidationStateService.cartValidationResult$;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { ActiveCartFacade, CartVoucherFacade } from '@spartacus/cart/base/root';\nimport {\n  ProcessSelectors,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\n\n@Injectable()\nexport class CartVoucherService implements CartVoucherFacade {\n  constructor(\n    protected store: Store<StateWithProcess<void>>,\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  /**\n   * Get add voucher process error flag\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(ProcessSelectors.getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Get add voucher process success flag\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(ProcessSelectors.getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Get add voucher process loading flag\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(ProcessSelectors.getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset add voucher process\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId?: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.userIdService.getUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.userIdService.getUserId(),\n        this.activeCartFacade.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  Cart,\n  CartType,\n  MultiCartFacade,\n  OrderEntry,\n} from '@spartacus/cart/base/root';\nimport { isNotUndefined, StateUtils, UserIdService } from '@spartacus/core';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class MultiCartService implements MultiCartFacade {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns a list of carts from store as an observable\n   *\n   */\n  getCarts(): Observable<Cart[]> {\n    return this.store.pipe(select(MultiCartSelectors.getCartsSelectorFactory));\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(\n    cartId: string\n  ): Observable<StateUtils.ProcessesLoaderState<Cart | undefined>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  protected generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<Cart> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n\n    return this.getCartIdByType(\n      extraData?.active ? CartType.ACTIVE : CartType.NEW_CREATED\n    ).pipe(\n      switchMap((cartId) => this.getCart(cartId)),\n      filter(isNotUndefined)\n    );\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Get last entry for specific product code from cart.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getLastEntry(\n    cartId: string,\n    productCode: string\n  ): Observable<OrderEntry | undefined> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId)),\n      map((entries) => {\n        const filteredEntries = entries.filter(\n          (entry) => entry.product?.code === productCode\n        );\n        return filteredEntries\n          ? filteredEntries[filteredEntries.length - 1]\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number,\n    pickupStore?: string\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n        pickupStore,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   * @param pickupStore\n   * @param pickupToDelivery\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity?: number,\n    pickupStore?: string,\n    pickupToDelivery: boolean = false\n  ): void {\n    if (quantity !== undefined && quantity <= 0) {\n      this.removeEntry(userId, cartId, entryNumber);\n    } else {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          pickupStore,\n          pickupToDelivery,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get first entry from cart matching the specified product code\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(\n    cartId: string,\n    productCode: string\n  ): Observable<OrderEntry | undefined> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  removeCart(cartId: string): void {\n    this.store.dispatch(new CartActions.RemoveCart({ cartId }));\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string): void {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n\n  /**\n   * Reloads the cart with specified id.\n   *\n   * @param cartId\n   * @param extraData\n   */\n  reloadCart(cartId: string, extraData?: { active: boolean }): void {\n    this.userIdService.takeUserId().subscribe((userId) =>\n      this.store.dispatch(\n        new CartActions.LoadCart({\n          userId,\n          cartId,\n          extraData,\n        })\n      )\n    );\n  }\n\n  /**\n   * Get the cart id based on cart type\n   *\n   * @param cartType\n   */\n  getCartIdByType(cartType: CartType): Observable<string> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIdByTypeFactory(cartType)),\n      distinctUntilChanged()\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  Cart,\n  CartType,\n  MultiCartFacade,\n  OrderEntry,\n  SelectiveCartFacade,\n} from '@spartacus/cart/base/root';\nimport {\n  BaseSiteService,\n  OCC_USER_ID_ANONYMOUS,\n  UserIdService,\n} from '@spartacus/core';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Injectable()\nexport class SelectiveCartService implements SelectiveCartFacade {\n  protected selectiveCart$: Observable<Cart>;\n\n  constructor(\n    protected userProfileFacade: UserProfileFacade,\n    protected multiCartFacade: MultiCartFacade,\n    protected baseSiteService: BaseSiteService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Initialize the stream when first call this function\n   */\n  getCart(): Observable<Cart> {\n    if (!this.selectiveCart$) {\n      this.selectiveCart$ = combineLatest([\n        this.getSelectiveCartId(),\n        this.userProfileFacade.get(),\n        this.userIdService.getUserId(),\n        this.baseSiteService.getActive(),\n      ]).pipe(\n        distinctUntilChanged(),\n        tap(([selectiveId, user, userId, activeBaseSite]) => {\n          if (\n            !Boolean(selectiveId) &&\n            userId !== OCC_USER_ID_ANONYMOUS &&\n            user?.customerId\n          ) {\n            this.multiCartFacade.loadCart({\n              userId: userId,\n              cartId: `selectivecart${activeBaseSite}${user.customerId}`,\n            });\n          }\n        }),\n        filter(([selectiveId]) => Boolean(selectiveId)),\n        switchMap(([selectiveId]) => this.multiCartFacade.getCart(selectiveId)),\n        shareReplay({ bufferSize: 1, refCount: true })\n      );\n    }\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getSelectiveCartId().pipe(\n      switchMap((selectiveId) => this.multiCartFacade.getEntries(selectiveId))\n    );\n  }\n\n  isStable(): Observable<boolean> {\n    return this.getSelectiveCartId().pipe(\n      switchMap((selectiveId) => this.multiCartFacade.isStable(selectiveId))\n    );\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {\n      this.multiCartFacade.addEntry(userId, selectiveId, productCode, quantity);\n    });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {\n      this.multiCartFacade.removeEntry(\n        userId,\n        selectiveId,\n        entry.entryNumber as number\n      );\n    });\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {\n      this.multiCartFacade.updateEntry(\n        userId,\n        selectiveId,\n        entryNumber,\n        quantity\n      );\n    });\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry | undefined> {\n    return this.getSelectiveCartId().pipe(\n      switchMap((selectiveId) =>\n        this.multiCartFacade.getEntry(selectiveId, productCode)\n      )\n    );\n  }\n\n  protected getSelectiveCartId(): Observable<string> {\n    return this.multiCartFacade.getCartIdByType(CartType.SELECTIVE);\n  }\n\n  private getSelectiveIdWithUserId(): Observable<string[]> {\n    return this.getSelectiveCartId().pipe(\n      distinctUntilChanged(),\n      withLatestFrom(this.userIdService.getUserId()),\n      take(1)\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport {\n  ActiveCartFacade,\n  CartValidationFacade,\n  CartVoucherFacade,\n  MultiCartFacade,\n  SelectiveCartFacade,\n} from '@spartacus/cart/base/root';\nimport { ActiveCartService } from './active-cart.service';\nimport { CartValidationService } from './cart-validation.service';\nimport { CartVoucherService } from './cart-voucher.service';\nimport { MultiCartService } from './multi-cart.service';\nimport { SelectiveCartService } from './selective-cart.service';\n\nexport const facadeProviders: Provider[] = [\n  ActiveCartService,\n  {\n    provide: ActiveCartFacade,\n    useExisting: ActiveCartService,\n  },\n  CartVoucherService,\n  {\n    provide: CartVoucherFacade,\n    useExisting: CartVoucherService,\n  },\n  MultiCartService,\n  {\n    provide: MultiCartFacade,\n    useExisting: MultiCartService,\n  },\n  SelectiveCartService,\n  {\n    provide: SelectiveCartFacade,\n    useExisting: SelectiveCartService,\n  },\n  CartValidationService,\n  {\n    provide: CartValidationFacade,\n    useExisting: CartValidationService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ErrorModel,\n  GlobalMessageType,\n  HttpErrorHandler,\n  HttpResponseStatus,\n  Priority,\n} from '@spartacus/core';\nimport { isCartError, isCartNotFoundError } from '../../utils/utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadCartRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  getPriority(): Priority {\n    return Priority.NORMAL;\n  }\n\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return (\n      super.hasMatch(errorResponse) &&\n      this.getErrors(errorResponse).some(isCartError)\n    );\n  }\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleCartNotFoundError(request, response);\n    this.handleOtherCartErrors(request, response);\n  }\n\n  protected handleCartNotFoundError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleOtherCartErrors(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.reason !== 'notFound' || e.subjectType !== 'cart')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          error.message\n            ? error.message\n            : { key: 'httpHandlers.otherCartErrors' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error: any) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ErrorModel,\n  GlobalMessageType,\n  HttpErrorHandler,\n  HttpResponseStatus,\n  Priority,\n} from '@spartacus/core';\nimport {\n  isVoucherError,\n  voucherExceededError,\n  voucherInvalidError,\n} from '../../utils/utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadVoucherRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  getPriority(): Priority {\n    return Priority.NORMAL;\n  }\n\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return (\n      super.hasMatch(errorResponse) &&\n      this.getErrors(errorResponse).some(isVoucherError)\n    );\n  }\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleVoucherExceededError(request, response);\n    this.handleVoucherInvalidError(request, response);\n  }\n\n  protected handleVoucherExceededError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => voucherExceededError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.voucherExceeded' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherInvalidError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => voucherInvalidError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error: ErrorModel) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '@spartacus/core';\nimport { effects } from './effects/index';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { HttpErrorHandler } from '@spartacus/core';\nimport { CartPersistenceModule } from './cart-persistence.module';\nimport { CartConnector } from './connectors/cart/cart.connector';\nimport { CartEntryConnector } from './connectors/entry/cart-entry.connector';\nimport { CartValidationConnector } from './connectors/validation/cart-validation.connector';\nimport { CartVoucherConnector } from './connectors/voucher/cart-voucher.connector';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageEventModule } from './event/cart-page-event.module';\nimport { facadeProviders } from './facade/facade-providers';\nimport { BadCartRequestHandler } from './http-interceptors/handlers/bad-cart-request.handler';\nimport { BadVoucherRequestHandler } from './http-interceptors/handlers/bad-voucher-request.handler';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\n@NgModule({\n  imports: [\n    CartEventModule,\n    MultiCartStoreModule,\n    CartPersistenceModule,\n    CartPageEventModule,\n  ],\n  providers: [\n    CartConnector,\n    CartEntryConnector,\n    CartVoucherConnector,\n    CartValidationConnector,\n    ...facadeProviders,\n    {\n      provide: HttpErrorHandler,\n      useExisting: BadCartRequestHandler,\n      multi: true,\n    },\n    {\n      provide: HttpErrorHandler,\n      useExisting: BadVoucherRequestHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartBaseCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart.adapter';\nexport * from './cart.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-entry.adapter';\nexport * from './cart-entry.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { CartModificationList } from '@spartacus/cart/base/root';\nimport { Converter } from '@spartacus/core';\n\nexport const CART_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModificationList>\n>('CartValidationNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './converters';\nexport * from './cart-validation.adapter';\nexport * from './cart-validation.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-voucher.adapter';\nexport * from './cart-voucher.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart/index';\nexport * from './entry/index';\nexport * from './validation/index';\nexport * from './voucher/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-event.builder';\nexport * from './cart-event.module';\nexport * from './cart-page-event.builder';\nexport * from './cart-page-event.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './active-cart.service';\nexport * from './cart-validation.service';\nexport * from './cart-voucher.service';\nexport * from './multi-cart.service';\nexport * from './selective-cart.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CartConfig } from '@spartacus/cart/base/root';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n\n  isCartValidationEnabled(): boolean {\n    return Boolean(this.config?.cart?.validation?.enabled);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport {\n  ActiveCartFacade,\n  CartValidationFacade,\n  CartValidationStatusCode,\n} from '@spartacus/cart/base/root';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { CartValidationStateService } from '../services/cart-validation-state.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartValidationGuard implements CanActivate {\n  constructor(\n    protected cartValidationService: CartValidationFacade,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router,\n    protected globalMessageService: GlobalMessageService,\n    protected activeCartService: ActiveCartFacade,\n    protected cartValidationStateService: CartValidationStateService,\n    protected cartConfigService: CartConfigService\n  ) {}\n\n  protected GLOBAL_MESSAGE_TIMEOUT = 10000;\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return !this.cartConfigService.isCartValidationEnabled()\n      ? of(true)\n      : this.cartValidationService.validateCart().pipe(\n          withLatestFrom(this.activeCartService.getEntries()),\n          map(([cartModificationList, cartEntries]) => {\n            this.cartValidationStateService.updateValidationResultAndRoutingId(\n              cartModificationList.cartModifications ?? []\n            );\n\n            if (\n              cartModificationList.cartModifications !== undefined &&\n              cartModificationList.cartModifications.length !== 0\n            ) {\n              let validationResultMessage;\n              const modification = cartModificationList.cartModifications[0];\n\n              if (\n                cartEntries.length === 1 &&\n                cartEntries[0].product?.code ===\n                  modification.entry?.product?.code &&\n                modification.statusCode === CartValidationStatusCode.NO_STOCK\n              ) {\n                validationResultMessage = {\n                  key: 'validation.cartEntryRemoved',\n                  params: {\n                    name: modification.entry?.product?.name,\n                  },\n                };\n              } else {\n                validationResultMessage = {\n                  key: 'validation.cartEntriesChangeDuringCheckout',\n                };\n              }\n\n              this.globalMessageService.add(\n                validationResultMessage,\n                GlobalMessageType.MSG_TYPE_ERROR,\n                this.GLOBAL_MESSAGE_TIMEOUT\n              );\n              this.activeCartService.reloadActiveCart();\n              return this.router.parseUrl(\n                this.semanticPathService.get('cart') ?? ''\n              );\n            }\n\n            return true;\n          })\n        );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-validation.guard';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, isDevMode } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ProductImportInfo,\n  ProductImportStatus,\n} from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CartActions } from '../store/actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductImportInfoService {\n  protected constructor(protected actionsSubject: ActionsSubject) {}\n\n  /**\n   * Get emission of add entry results from actions subject\n   *\n   * @param {string} cartId\n   * @returns {Observable<ProductImportInfo>}\n   */\n  getResults(cartId: string): Observable<ProductImportInfo> {\n    return this.actionsSubject.pipe(\n      ofType(\n        CartActions.CART_ADD_ENTRY_SUCCESS,\n        CartActions.CART_ADD_ENTRY_FAIL\n      ),\n      filter(\n        (\n          action: CartActions.CartAddEntrySuccess | CartActions.CartAddEntryFail\n        ) => action.payload.cartId === cartId\n      ),\n      map((action) => this.mapMessages(action))\n    );\n  }\n\n  /**\n   * Map actions to summary messages\n   *\n   * @param {CartActions.CartAddEntrySuccess | CartActions.CartAddEntryFail} action\n   * @returns ProductImportInfo\n   */\n  protected mapMessages(\n    action: CartActions.CartAddEntrySuccess | CartActions.CartAddEntryFail\n  ): ProductImportInfo {\n    const { productCode } = action.payload;\n    if (action instanceof CartActions.CartAddEntrySuccess) {\n      const { quantity, quantityAdded, entry, statusCode } = action.payload;\n      if (statusCode === ProductImportStatus.LOW_STOCK) {\n        return {\n          productCode,\n          statusCode,\n          productName: entry?.product?.name,\n          quantity,\n          quantityAdded,\n        };\n      }\n      if (\n        statusCode === ProductImportStatus.SUCCESS ||\n        statusCode === ProductImportStatus.NO_STOCK\n      ) {\n        return { productCode, statusCode, productName: entry?.product?.name };\n      }\n    } else if (action instanceof CartActions.CartAddEntryFail) {\n      const { error } = action.payload;\n      if (error?.details[0]?.type === 'UnknownIdentifierError') {\n        return {\n          productCode,\n          statusCode: ProductImportStatus.UNKNOWN_IDENTIFIER,\n        };\n      }\n    }\n    if (isDevMode()) {\n      console.warn(\n        'Unrecognized cart add entry action type while mapping messages',\n        action\n      );\n    }\n    return { productCode, statusCode: ProductImportStatus.UNKNOWN_ERROR };\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-config.service';\nexport * from './cart-validation-state.service';\nexport * from './multi-cart-state-persistence.service';\nexport * from './product-import-info.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cart-base-core.module';\nexport * from './cart-persistence.module';\nexport * from './connectors/index';\nexport * from './event/index';\nexport * from './facade/index';\nexport * from './guards/index';\nexport * from './services/index';\nexport * from './store/actions/index';\nexport * from './store/multi-cart-state';\nexport * from './store/selectors/index';\nexport * from './utils/utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.CartEntryAdapter","CartActions.CART_ADD_ENTRY","CartActions.CartAddEntrySuccess","CartActions.CartAddEntryFail","CartActions.LoadCart","CartActions.CART_REMOVE_ENTRY","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","CartActions.CART_UPDATE_ENTRY","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","i2.CartEntryConnector","i1.CartVoucherAdapter","CartActions.CART_ADD_VOUCHER","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","CartActions.CART_REMOVE_VOUCHER","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","i2.CartVoucherConnector","i3","i1.CartAdapter","CartActions.RemoveCart","CartActions.LoadCartFail","CartActions.LOAD_CART","CartActions.LoadCartSuccess","CartActions.CREATE_CART","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.CreateCartFail","CartActions.MERGE_CART","CartActions.CreateCart","CartActions.CART_ADD_VOUCHER_SUCCESS","CartActions.CART_ADD_ENTRY_SUCCESS","CartActions.CART_REMOVE_ENTRY_SUCCESS","CartActions.CART_UPDATE_ENTRY_SUCCESS","CartActions.CART_REMOVE_VOUCHER_SUCCESS","CartActions.ResetCartDetails","CartActions.ADD_EMAIL_TO_CART","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","CartActions.DELETE_CART","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","i2.CartConnector","CartActions.SetCartTypeIndex","CartActions.CartProcessesIncrement","CartActions.LOAD_CART_SUCCESS","CartActions.CREATE_CART_SUCCESS","CartActions.SET_ACTIVE_CART_ID","CartActions.SET_CART_TYPE_INDEX","CartActions.REMOVE_CART","CartActions.DELETE_CART_SUCCESS","CartActions.CLEAR_CART_STATE","CartActions.LOAD_CARTS_SUCCESS","CartActions.SET_CART_DATA","MultiCartSelectors.getMultiCartState","CartActions.ClearCartState","CartActions.SetActiveCartId","i1","i2","i1.CartValidationAdapter","CartActions.CART_ADD_ENTRY_FAIL","CartActions.CART_REMOVE_ENTRY_FAIL","CartActions.CART_UPDATE_ENTRY_FAIL","CartActions.MERGE_CART_SUCCESS","CartActions.CREATE_CART_FAIL","CartActions.DELETE_CART_FAIL","CartActions.CART_ADD_VOUCHER_FAIL","CartActions.CART_REMOVE_VOUCHER_FAIL","i1.CartEventBuilder","i1.CartPageEventBuilder","i1.CartValidationConnector","i4.CartValidationStateService","CartActions.CartAddVoucher","CartActions.CartRemoveVoucher","CartActions.CartResetAddVoucher","MultiCartSelectors.getCartSelectorFactory","MultiCartSelectors.getCartsSelectorFactory","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","CartActions.MergeCart","MultiCartSelectors.getCartEntriesSelectorFactory","CartActions.CartAddEntry","CartActions.CartRemoveEntry","CartActions.CartUpdateEntry","MultiCartSelectors.getCartEntrySelectorFactory","CartActions.AddEmailToCart","CartActions.DeleteCart","MultiCartSelectors.getCartIdByTypeFactory","i5.CartConfigService"],"mappings":"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"}