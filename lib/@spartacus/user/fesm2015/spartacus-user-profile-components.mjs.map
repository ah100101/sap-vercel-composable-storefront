{"version":3,"file":"spartacus-user-profile-components.mjs","sources":["../../../feature-libs/user/profile/components/close-account/components/close-account-modal/close-account-modal.component.ts","../../../feature-libs/user/profile/components/close-account/components/close-account-modal/close-account-modal.component.html","../../../feature-libs/user/profile/components/close-account/components/close-account-modal/default-close-account-modal-layout.config.ts","../../../feature-libs/user/profile/components/close-account/components/close-account/close-account.component.ts","../../../feature-libs/user/profile/components/close-account/components/close-account/close-account.component.html","../../../feature-libs/user/profile/components/close-account/close-account.module.ts","../../../feature-libs/user/profile/components/close-account/index.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password-component.service.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password.component.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password.component.html","../../../feature-libs/user/profile/components/forgot-password/forgot-password.module.ts","../../../feature-libs/user/profile/components/forgot-password/index.ts","../../../feature-libs/user/profile/components/register/register-component.service.ts","../../../feature-libs/user/profile/components/register/register.component.ts","../../../feature-libs/user/profile/components/register/register.component.html","../../../feature-libs/user/profile/components/register/register.module.ts","../../../feature-libs/user/profile/components/register/index.ts","../../../feature-libs/user/profile/components/reset-password/reset-password-component.service.ts","../../../feature-libs/user/profile/components/reset-password/reset-password.component.ts","../../../feature-libs/user/profile/components/reset-password/reset-password.component.html","../../../feature-libs/user/profile/components/reset-password/reset-password.module.ts","../../../feature-libs/user/profile/components/reset-password/index.ts","../../../feature-libs/user/profile/components/update-email/update-email-component.service.ts","../../../feature-libs/user/profile/components/update-email/update-email.component.ts","../../../feature-libs/user/profile/components/update-email/update-email.component.html","../../../feature-libs/user/profile/components/update-email/update-email.module.ts","../../../feature-libs/user/profile/components/update-email/index.ts","../../../feature-libs/user/profile/components/update-password/update-password-component.service.ts","../../../feature-libs/user/profile/components/update-password/update-password.component.ts","../../../feature-libs/user/profile/components/update-password/update-password.component.html","../../../feature-libs/user/profile/components/update-password/update-password.module.ts","../../../feature-libs/user/profile/components/update-password/index.ts","../../../feature-libs/user/profile/components/update-profile/update-profile-component.service.ts","../../../feature-libs/user/profile/components/update-profile/update-profile.component.ts","../../../feature-libs/user/profile/components/update-profile/update-profile.component.html","../../../feature-libs/user/profile/components/update-profile/update-profile.module.ts","../../../feature-libs/user/profile/components/update-profile/index.ts","../../../feature-libs/user/profile/components/user-profile-components.module.ts","../../../feature-libs/user/profile/components/public_api.ts","../../../feature-libs/user/profile/components/spartacus-user-profile-components.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport {\n  FocusConfig,\n  ICON_TYPE,\n  LaunchDialogService,\n} from '@spartacus/storefront';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'button',\n    focusOnEscape: true,\n  };\n\n  isLoggedIn$: Observable<boolean>;\n  protected loading$ = new BehaviorSubject(false);\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.dismissModal('Cross click');\n    }\n  }\n\n  constructor(\n    protected authService: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected userProfile: UserProfileFacade,\n    protected launchDialogService: LaunchDialogService,\n    protected el: ElementRef\n  ) {}\n\n  get isLoading$(): Observable<boolean> {\n    return this.loading$.asObservable();\n  }\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isUserLoggedIn();\n  }\n\n  onSuccess(): void {\n    this.dismissModal('Success');\n    this.translationService\n      .translate('closeAccount.accountClosedSuccessfully')\n      .pipe(first())\n      .subscribe((text) => {\n        this.globalMessageService.add(\n          text,\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n      });\n\n    this.authService.coreLogout().then(() => {\n      this.routingService.go({ cxRoute: 'home' });\n    });\n  }\n\n  onError(): void {\n    this.dismissModal('Error');\n    this.translationService\n      .translate('closeAccount.accountClosedFailure')\n      .pipe(first())\n      .subscribe((text) => {\n        this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n      });\n  }\n\n  dismissModal(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  closeAccount() {\n    this.loading$.next(true);\n\n    this.userProfile.close().subscribe({\n      next: () => {\n        this.onSuccess();\n        this.loading$.next(false);\n      },\n      error: () => {\n        this.onError();\n        this.loading$.next(false);\n      },\n    });\n  }\n}\n","<ng-container *ngIf=\"isLoggedIn$ | async\">\n  <div\n    class=\"cx-close-account-modal\"\n    [cxFocus]=\"focusConfig\"\n    (esc)=\"dismissModal('Escape click')\"\n  >\n    <div class=\"cx-close-account-modal-container\">\n      <div class=\"cx-close-account-modal-header cx-modal-header\">\n        <h3 class=\"cx-close-account-modal-title\">\n          {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\n        </h3>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n\n      <div *ngIf=\"isLoading$ | async; else loaded\">\n        <div class=\"cx-spinner\">\n          <cx-spinner> </cx-spinner>\n        </div>\n      </div>\n\n      <ng-template #loaded>\n        <div class=\"cx-close-account-modal-body modal-body\">\n          <p class=\"cx-confirmation\">\n            {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\n          </p>\n        </div>\n        <div class=\"cx-close-account-modal-footer cx-modal-footer\">\n          <button class=\"btn btn-primary\" (click)=\"closeAccount()\">\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n          </button>\n          <button\n            (click)=\"dismissModal('Cancel')\"\n            class=\"btn btn-block btn-secondary\"\n          >\n            {{ 'common.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</ng-container>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DIALOG_TYPE, LayoutConfig } from '@spartacus/storefront';\nimport { CloseAccountModalComponent } from './close-account-modal.component';\n\nexport const defaultCloseDialogModalLayoutConfig: LayoutConfig = {\n  launch: {\n    CLOSE_ACCOUNT: {\n      inline: true,\n      component: CloseAccountModalComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { LaunchDialogService, LAUNCH_CALLER } from '@spartacus/storefront';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  @ViewChild('element') element: ElementRef;\n\n  constructor(\n    protected launchDialogService: LaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  openModal(): void {\n    const dialog = this.launchDialogService.openDialog(\n      LAUNCH_CALLER.CLOSE_ACCOUNT,\n      this.element,\n      this.vcr\n    );\n\n    dialog?.pipe(take(1)).subscribe();\n  }\n}\n","<div class=\"col-lg-8 col-md-9\">\n  <div class=\"row cx-btn-group\">\n    <div class=\"col-sm-6\">\n      <a\n        [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n        class=\"btn btn-block btn-secondary\"\n        >{{ 'common.cancel' | cxTranslate }}</a\n      >\n    </div>\n    <div class=\"col-sm-6\">\n      <button #element class=\"btn btn-block btn-primary\" (click)=\"openModal()\">\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</div>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  IconModule,\n  KeyboardFocusModule,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { defaultCloseDialogModalLayoutConfig } from './components/close-account-modal/default-close-account-modal-layout.config';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    provideDefaultConfig(defaultCloseDialogModalLayoutConfig),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './close-account.module';\nexport * from './components/close-account-modal/close-account-modal.component';\nexport * from './components/close-account/close-account.component';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthConfigService,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ForgotPasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected authConfigService: AuthConfigService,\n    protected globalMessage: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: UntypedFormGroup = new UntypedFormGroup({\n    userEmail: new UntypedFormControl('', [\n      Validators.required,\n      CustomFormValidators.emailValidator,\n    ]),\n  });\n\n  /**\n   * Sends an email to the user to reset the password.\n   *\n   * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n   * to the login page.\n   */\n  requestEmail() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    this.userPasswordService\n      .requestForgotPasswordEmail(this.form.value.userEmail)\n      .subscribe({\n        next: () => this.onSuccess(),\n        error: (error: Error) => this.onError(error),\n      });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessage.add(\n      { key: 'forgottenPassword.passwordResetEmailSent' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n\n  /**\n   * Redirects the user back to the login page.\n   *\n   * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n   */\n  protected redirect() {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ForgotPasswordComponentService } from './forgot-password-component.service';\n\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ForgotPasswordComponent {\n  constructor(protected service: ForgotPasswordComponentService) {}\n\n  form: UntypedFormGroup = this.service.form;\n  isUpdating$: Observable<boolean> = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.requestEmail();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'forgottenPassword.emailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"email\"\n      class=\"form-control\"\n      placeholder=\"{{\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"userEmail\"\n    />\n    <cx-form-errors [control]=\"form.get('userEmail')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n    >{{ 'common.cancel' | cxTranslate }}</a\n  >\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.submit' | cxTranslate }}\n  </button>\n</form>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthConfigService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { ForgotPasswordComponentService } from './forgot-password-component.service';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: ForgotPasswordComponentService,\n              useClass: ForgotPasswordComponentService,\n              deps: [\n                UserPasswordFacade,\n                RoutingService,\n                AuthConfigService,\n                GlobalMessageService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './forgot-password-component.service';\nexport * from './forgot-password.component';\nexport * from './forgot-password.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  User,\n} from '@spartacus/core';\nimport { UserRegisterFacade, UserSignUp } from '@spartacus/user/profile/root';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RegisterComponentService {\n  constructor(\n    protected userRegisterFacade: UserRegisterFacade,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Register a new user.\n   *\n   * @param user as UserSignUp\n   */\n  register(user: UserSignUp): Observable<User> {\n    return this.userRegisterFacade.register(user);\n  }\n\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n  getTitles(): Observable<Title[]> {\n    return this.userRegisterFacade.getTitles();\n  }\n\n  /**\n   * Show the message after successful registration.\n   */\n  postRegisterMessage(): void {\n    this.globalMessageService.add(\n      { key: 'register.postRegisterMessage' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  UntypedFormBuilder,\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthConfigService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators, sortTitles } from '@spartacus/storefront';\nimport { Title, UserSignUp } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { RegisterComponentService } from './register-component.service';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n\n  isLoading$ = new BehaviorSubject(false);\n\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent | undefined;\n    template: string;\n  }>;\n\n  registerForm: UntypedFormGroup = this.fb.group(\n    {\n      titleCode: [null],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new UntypedFormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected globalMessageService: GlobalMessageService,\n    protected fb: UntypedFormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected authConfigService: AuthConfigService,\n    protected registerComponentService: RegisterComponentService\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.registerComponentService.getTitles().pipe(\n      map((titles: Title[]) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(\n              (message) => message.raw === 'This field is required.'\n            )\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent ?? '';\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(\n        ([consent, template]: [\n          AnonymousConsent | undefined,\n          ConsentTemplate | undefined\n        ]) => {\n          return {\n            consent,\n            template: template?.description ? template.description : '',\n          };\n        }\n      )\n    );\n\n    this.subscription.add(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.registerForm.get('newsletter')!.valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.isLoading$.next(true);\n    this.registerComponentService\n      .register(this.collectDataFromRegisterForm(this.registerForm.value))\n      .subscribe({\n        next: () => this.onRegisterUserSuccess(),\n        complete: () => this.isLoading$.next(false),\n        error: () => this.isLoading$.next(false),\n      });\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent | undefined): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const requiredConsents =\n      this.anonymousConsentsConfig?.anonymousConsents?.requiredConsents;\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  protected onRegisterUserSuccess(): void {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.router.go('login');\n    }\n    this.registerComponentService.postRegisterMessage();\n  }\n\n  toggleAnonymousConsent(): void {\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent;\n\n    if (registerConsent) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (Boolean(this.registerForm.get('newsletter')!.value)) {\n        this.anonymousConsentsService.giveConsent(registerConsent);\n      } else {\n        this.anonymousConsentsService.withdrawConsent(registerConsent);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","<section\n  class=\"cx-page-section container\"\n  *ngIf=\"!(isLoading$ | async); else loading\"\n>\n  <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-6\">\n      <div class=\"cx-section\">\n        <form (ngSubmit)=\"submitForm()\" [formGroup]=\"registerForm\">\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.title' | cxTranslate\n              }}</span>\n              <ng-select\n                [clearable]=\"false\"\n                [items]=\"titles$ | async\"\n                [placeholder]=\"'register.selectTitle' | cxTranslate\"\n                [searchable]=\"false\"\n                bindLabel=\"name\"\n                bindValue=\"code\"\n                formControlName=\"titleCode\"\n                id=\"title-select\"\n                [cxNgSelectA11y]=\"{\n                  ariaLabel: 'register.title' | cxTranslate\n                }\"\n              >\n              </ng-select>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.firstName.label' | cxTranslate\n              }}</span>\n              <input\n                required=\"true\"\n                class=\"form-control\"\n                type=\"text\"\n                name=\"firstname\"\n                placeholder=\"{{\n                  'register.firstName.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"firstName\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('firstName')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.lastName.label' | cxTranslate\n              }}</span>\n              <input\n                required=\"true\"\n                class=\"form-control\"\n                type=\"text\"\n                name=\"lastname\"\n                placeholder=\"{{\n                  'register.lastName.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"lastName\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('lastName')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.emailAddress.label' | cxTranslate\n              }}</span>\n              <input\n                required=\"true\"\n                class=\"form-control\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"{{\n                  'register.emailAddress.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"email\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('email')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.password.label' | cxTranslate\n              }}</span>\n              <input\n                required=\"true\"\n                class=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"{{\n                  'register.password.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"password\"\n                [attr.aria-label]=\"\n                  'register.password.placeholder' | cxTranslate\n                \"\n                cxPasswordVisibilitySwitch\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('password')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.confirmPassword.label' | cxTranslate\n              }}</span>\n              <input\n                required=\"true\"\n                class=\"form-control\"\n                type=\"password\"\n                name=\"confirmpassword\"\n                placeholder=\"{{\n                  'register.confirmPassword.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"passwordconf\"\n                [attr.aria-label]=\"\n                  'register.confirmPassword.placeholder' | cxTranslate\n                \"\n                cxPasswordVisibilitySwitch\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('passwordconf')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"form-check\">\n              <label *ngIf=\"anonymousConsent$ | async as anonymousConsent\">\n                <input\n                  type=\"checkbox\"\n                  name=\"newsletter\"\n                  class=\"form-check-input\"\n                  formControlName=\"newsletter\"\n                  [checked]=\"isConsentGiven(anonymousConsent.consent)\"\n                />\n                <span class=\"form-check-label\">\n                  {{ anonymousConsent.template }}\n                </span>\n              </label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"form-check\">\n              <label>\n                <input\n                  required=\"true\"\n                  type=\"checkbox\"\n                  name=\"termsandconditions\"\n                  formControlName=\"termsandconditions\"\n                />\n                <span class=\"form-check-label\">\n                  {{ 'register.confirmThatRead' | cxTranslate }}\n                  <a\n                    [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {{ 'register.termsAndConditions' | cxTranslate }}\n                  </a>\n                </span>\n                <cx-form-errors\n                  [control]=\"registerForm.get('termsandconditions')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-block btn-primary\">\n            {{ 'register.register' | cxTranslate }}\n          </button>\n          <a\n            class=\"cx-login-link btn-link\"\n            [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n            >{{ 'register.signIn' | cxTranslate }}</a\n          >\n        </form>\n      </div>\n    </div>\n  </div>\n</section>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  NgSelectA11yModule,\n  PasswordVisibilityToggleModule,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { UserRegisterFacade } from '@spartacus/user/profile/root';\nimport { RegisterComponentService } from './register-component.service';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n    NgSelectModule,\n    NgSelectA11yModule,\n    PasswordVisibilityToggleModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: RegisterComponentService,\n              useClass: RegisterComponentService,\n              deps: [UserRegisterFacade, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './register.component';\nexport * from './register.module';\nexport * from './register-component.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  HttpErrorModel,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ResetPasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected globalMessage: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  resetToken$: Observable<string> = this.routingService\n    .getRouterState()\n    .pipe(\n      map((routerState: RouterState) => routerState.state.queryParams['token'])\n    );\n\n  form: UntypedFormGroup = new UntypedFormGroup(\n    {\n      password: new UntypedFormControl('', [\n        Validators.required,\n        CustomFormValidators.passwordValidator,\n      ]),\n      passwordConfirm: new UntypedFormControl('', Validators.required),\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordConfirm'\n      ),\n    }\n  );\n\n  /**\n   * Resets the password by the given token.\n   *\n   * The token has been provided during the request password flow.\n   * The token is not validated on the client.\n   */\n  resetPassword(token: string): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const password = (this.form.get('password') as UntypedFormControl).value;\n\n    this.userPasswordService.reset(token, password).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: unknown) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessage.add(\n      { key: 'forgottenPassword.passwordResetSuccess' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  protected onError(error: unknown): void {\n    this.busy$.next(false);\n    if (error instanceof HttpErrorModel) {\n      (error.details ?? []).forEach((err) => {\n        if (err.message) {\n          this.globalMessage.add(\n            { raw: err.message },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * Redirects the user to the login page.\n   */\n  protected redirect() {\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ResetPasswordComponentService } from './reset-password-component.service';\n\n@Component({\n  selector: 'cx-reset-password',\n  templateUrl: './reset-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class ResetPasswordComponent {\n  form: UntypedFormGroup = this.service.form;\n  isUpdating$: Observable<boolean> = this.service.isUpdating$;\n\n  token$: Observable<string> = this.service.resetToken$;\n\n  constructor(protected service: ResetPasswordComponentService) {}\n\n  onSubmit(token: string) {\n    this.service.resetPassword(token);\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form\n  *ngIf=\"token$ | async as token\"\n  (ngSubmit)=\"onSubmit(token)\"\n  [formGroup]=\"form\"\n>\n  <label>\n    <span class=\"label-content\">{{\n      'register.newPassword' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      placeholder=\"{{ 'register.password.placeholder' | cxTranslate }}\"\n      formControlName=\"password\"\n      [attr.aria-label]=\"'register.password.placeholder' | cxTranslate\"\n      cxPasswordVisibilitySwitch\n    />\n    <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'register.passwordMinRequirements' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      placeholder=\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\"\n      formControlName=\"passwordConfirm\"\n      [attr.aria-label]=\"'register.confirmPassword.placeholder' | cxTranslate\"\n      cxPasswordVisibilitySwitch\n    />\n    <cx-form-errors [control]=\"form.get('passwordConfirm')\"></cx-form-errors>\n  </label>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'register.resetPassword' | cxTranslate }}\n  </button>\n</form>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  RoutingService,\n} from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  SpinnerModule,\n  PasswordVisibilityToggleModule,\n} from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { ResetPasswordComponentService } from './reset-password-component.service';\nimport { ResetPasswordComponent } from './reset-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n    PasswordVisibilityToggleModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: ResetPasswordComponentService,\n              useClass: ResetPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordComponent],\n})\nexport class ResetPasswordModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './reset-password-component.service';\nexport * from './reset-password.component';\nexport * from './reset-password.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdateEmailComponentService {\n  constructor(\n    protected userEmail: UserEmailFacade,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: UntypedFormGroup = new UntypedFormGroup(\n    {\n      email: new UntypedFormControl('', [\n        Validators.required,\n        CustomFormValidators.emailValidator,\n      ]),\n      confirmEmail: new UntypedFormControl('', [Validators.required]),\n      password: new UntypedFormControl('', [Validators.required]),\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  save(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const newEmail = this.form.get('confirmEmail')?.value;\n    const password = this.form.get('password')?.value;\n\n    this.userEmail.update(password, newEmail).subscribe({\n      next: () => this.onSuccess(newEmail),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  /**\n   * Handles successful updating of the user email.\n   */\n  protected onSuccess(newUid: string): void {\n    this.globalMessageService.add(\n      {\n        key: 'updateEmailForm.emailUpdateSuccess',\n        params: { newUid },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    // sets the redirect url after login\n    this.authRedirectService.setRedirectUrl(\n      this.routingService.getUrl({ cxRoute: 'home' })\n    );\n    // TODO(#9638): Use logout route when it will support passing redirect url\n    this.authService.coreLogout().then(() => {\n      this.routingService.go(\n        { cxRoute: 'login' },\n        {\n          state: {\n            newUid,\n          },\n        }\n      );\n    });\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { UpdateEmailComponentService } from './update-email-component.service';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdateEmailComponent {\n  constructor(protected service: UpdateEmailComponentService) {}\n\n  form: UntypedFormGroup = this.service.form;\n  isUpdating$: Observable<boolean> = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.save();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"email\"\n      name=\"email\"\n      formControlName=\"email\"\n      placeholder=\"{{\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors [control]=\"form.get('email')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"email\"\n      name=\"confirmEmail\"\n      formControlName=\"confirmEmail\"\n      placeholder=\"{{\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors [control]=\"form.get('confirmEmail')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.password.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"password\"\n      name=\"password\"\n      formControlName=\"password\"\n      placeholder=\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\"\n      class=\"form-control\"\n      autocomplete=\"new-password\"\n      [attr.aria-label]=\"'updateEmailForm.password.placeholder' | cxTranslate\"\n      cxPasswordVisibilitySwitch\n    />\n    <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  AuthRedirectService,\n  AuthService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  SpinnerModule,\n  PasswordVisibilityToggleModule,\n} from '@spartacus/storefront';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { UpdateEmailComponentService } from './update-email-component.service';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    UrlModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n    PasswordVisibilityToggleModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdateEmailComponentService,\n              useClass: UpdateEmailComponentService,\n              deps: [\n                UserEmailFacade,\n                RoutingService,\n                GlobalMessageService,\n                AuthService,\n                AuthRedirectService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './update-email-component.service';\nexport * from './update-email.component';\nexport * from './update-email.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdatePasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected authRedirectService?: AuthRedirectService,\n    protected authService?: AuthService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: UntypedFormGroup = new UntypedFormGroup(\n    {\n      oldPassword: new UntypedFormControl('', Validators.required),\n      newPassword: new UntypedFormControl('', [\n        Validators.required,\n        CustomFormValidators.passwordValidator,\n      ]),\n      newPasswordConfirm: new UntypedFormControl('', Validators.required),\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'newPassword',\n        'newPasswordConfirm'\n      ),\n    }\n  );\n\n  /**\n   * Updates the password for the user.\n   */\n  updatePassword(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const oldPassword = this.form.get('oldPassword')?.value;\n    const newPassword = this.form.get('newPassword')?.value;\n\n    this.userPasswordService.update(oldPassword, newPassword).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessageService.add(\n      { key: 'updatePasswordForm.passwordUpdateSuccess' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n\n    // sets the redirect url after login\n    this.authRedirectService?.setRedirectUrl(\n      this.routingService.getUrl({ cxRoute: 'home' })\n    );\n    // TODO(#9638): Use logout route when it will support passing redirect url\n    this.authService?.coreLogout().then(() => {\n      this.routingService.go({ cxRoute: 'login' });\n    });\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n    this.form.reset();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { UpdatePasswordComponentService } from './update-password-component.service';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdatePasswordComponent {\n  constructor(protected service: UpdatePasswordComponentService) {}\n\n  form: UntypedFormGroup = this.service.form;\n  isUpdating$: Observable<boolean> = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.updatePassword();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.oldPassword.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"oldPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"oldPassword\"\n      [attr.aria-label]=\"\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\n      \"\n      cxPasswordVisibilitySwitch\n    />\n    <cx-form-errors [control]=\"form.get('oldPassword')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.newPassword.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPassword\"\n      [attr.aria-label]=\"\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\n      \"\n      cxPasswordVisibilitySwitch\n    />\n    <cx-form-errors [control]=\"form.get('newPassword')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      placeholder=\"{{\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPasswordConfirm\"\n      [attr.aria-label]=\"\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\n      \"\n      cxPasswordVisibilitySwitch\n    />\n    <cx-form-errors [control]=\"form.get('newPasswordConfirm')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  AuthRedirectService,\n  AuthService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  PasswordVisibilityToggleModule,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { UpdatePasswordComponentService } from './update-password-component.service';\nimport { UpdatePasswordComponent } from './update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n    UrlModule,\n    RouterModule,\n    PasswordVisibilityToggleModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdatePasswordComponentService,\n              useClass: UpdatePasswordComponentService,\n              deps: [\n                UserPasswordFacade,\n                RoutingService,\n                GlobalMessageService,\n                AuthRedirectService,\n                AuthService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './update-password-component.service';\nexport * from './update-password.component';\nexport * from './update-password.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport { GlobalMessageService, GlobalMessageType } from '@spartacus/core';\nimport { User } from '@spartacus/user/account/root';\nimport { Title, UserProfileFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdateProfileComponentService {\n  constructor(\n    protected userProfile: UserProfileFacade,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  protected user$ = this.userProfile\n    .get()\n    .pipe(filter((user): user is User => Boolean(user)));\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$: Observable<boolean> = this.user$.pipe(\n    tap((user) => this.form.patchValue(user)),\n    switchMap((_user: User) => this.busy$),\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  titles$: Observable<Title[]> = this.userProfile.getTitles();\n\n  form: UntypedFormGroup = new UntypedFormGroup({\n    customerId: new UntypedFormControl(''),\n    titleCode: new UntypedFormControl(''),\n    firstName: new UntypedFormControl('', Validators.required),\n    lastName: new UntypedFormControl('', Validators.required),\n  });\n\n  /**\n   * Updates the user's details and handles the UI.\n   */\n  updateProfile(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    this.userProfile.update(this.form.value).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessageService.add(\n      {\n        key: 'updateProfileForm.profileUpdateSuccess',\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n\n    this.busy$.next(false);\n    this.form.reset();\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { Title } from '@spartacus/user/profile/root';\nimport { Observable } from 'rxjs';\nimport { UpdateProfileComponentService } from './update-profile-component.service';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdateProfileComponent {\n  constructor(protected service: UpdateProfileComponentService) {}\n\n  form: UntypedFormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n  titles$: Observable<Title[]> = this.service.titles$;\n\n  onSubmit(): void {\n    this.service.updateProfile();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.title' | cxTranslate\n    }}</span>\n    <ng-select\n      [clearable]=\"false\"\n      [searchable]=\"false\"\n      formControlName=\"titleCode\"\n      id=\"title-select\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: 'updateProfileForm.title' | cxTranslate\n      }\"\n    >\n      <ng-option *ngFor=\"let title of titles$ | async\" [value]=\"title.code\">{{\n        title.name\n      }}</ng-option>\n    </ng-select>\n  </label>\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.firstName.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"text\"\n      class=\"form-control\"\n      name=\"firstName\"\n      placeholder=\"{{\n        'updateProfileForm.firstName.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"firstName\"\n    />\n    <cx-form-errors [control]=\"form.get('firstName')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.lastName.label' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"text\"\n      class=\"form-control\"\n      name=\"lastName\"\n      placeholder=\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\"\n      formControlName=\"lastName\"\n    />\n    <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.customerId' | cxTranslate\n    }}</span>\n    <input\n      required=\"true\"\n      type=\"text\"\n      class=\"form-control\"\n      name=\"customerId\"\n      formControlName=\"customerId\"\n      readonly\n    />\n    <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  SpinnerModule,\n  NgSelectA11yModule,\n} from '@spartacus/storefront';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { UpdateProfileComponentService } from './update-profile-component.service';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n    RouterModule,\n    UrlModule,\n    NgSelectModule,\n    NgSelectA11yModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdateProfileComponentService,\n              useClass: UpdateProfileComponentService,\n              deps: [UserProfileFacade, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './update-profile-component.service';\nexport * from './update-profile.component';\nexport * from './update-profile.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CloseAccountModule } from './close-account/close-account.module';\nimport { ForgotPasswordModule } from './forgot-password/forgot-password.module';\nimport { RegisterComponentModule } from './register/register.module';\nimport { ResetPasswordModule } from './reset-password/reset-password.module';\nimport { UpdateEmailModule } from './update-email/update-email.module';\nimport { UpdatePasswordModule } from './update-password/update-password.module';\nimport { UpdateProfileModule } from './update-profile/update-profile.module';\n\n@NgModule({\n  imports: [\n    RegisterComponentModule,\n    UpdateProfileModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    CloseAccountModule,\n  ],\n})\nexport class UserProfileComponentsModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './close-account/index';\nexport * from './forgot-password/index';\nexport * from './register/index';\nexport * from './reset-password/index';\nexport * from './update-email/index';\nexport * from './update-password/index';\nexport * from './update-profile/index';\nexport * from './user-profile-components.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","i2","i3","i4","i1.ForgotPasswordComponentService","i5","i6","i3.RegisterComponentService","i7","i1.ResetPasswordComponentService","i1.UpdateEmailComponentService","i1.UpdatePasswordComponentService","i1.UpdateProfileComponentService"],"mappings":"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"}