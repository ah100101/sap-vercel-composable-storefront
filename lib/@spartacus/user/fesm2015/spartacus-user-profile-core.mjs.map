{"version":3,"file":"spartacus-user-profile-core.mjs","sources":["../../../feature-libs/user/profile/core/connectors/converters.ts","../../../feature-libs/user/profile/core/connectors/user-profile.adapter.ts","../../../feature-libs/user/profile/core/connectors/user-profile.connector.ts","../../../feature-libs/user/profile/core/connectors/index.ts","../../../feature-libs/user/profile/core/facade/user-email.service.ts","../../../feature-libs/user/profile/core/facade/user-password.service.ts","../../../feature-libs/user/profile/core/facade/user-profile.service.ts","../../../feature-libs/user/profile/core/facade/user-register.service.ts","../../../feature-libs/user/profile/core/facade/index.ts","../../../feature-libs/user/profile/core/facade/facade-providers.ts","../../../feature-libs/user/profile/core/user-profile-core.module.ts","../../../feature-libs/user/profile/core/public_api.ts","../../../feature-libs/user/profile/core/spartacus-user-profile-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { User } from '@spartacus/user/account/root';\nimport { Title, UserSignUp } from '@spartacus/user/profile/root';\n\nexport const USER_PROFILE_NORMALIZER = new InjectionToken<Converter<User, any>>(\n  'UserProfileNormalizer'\n);\n\nexport const USER_PROFILE_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserProfileSerializer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { User } from '@spartacus/user/account/root';\nimport { Observable } from 'rxjs';\nimport { Title, UserSignUp } from '@spartacus/user/profile/root';\n\nexport abstract class UserProfileAdapter {\n  abstract update(username: string, user: User): Observable<unknown>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(\n    userEmailAddress: string\n  ): Observable<unknown>;\n\n  abstract resetPassword(\n    token: string,\n    newPassword: string\n  ): Observable<unknown>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<unknown>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<unknown>;\n\n  abstract close(userId: string): Observable<unknown>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { User } from '@spartacus/user/account/root';\nimport { Observable } from 'rxjs';\nimport { Title, UserSignUp } from '@spartacus/user/profile/root';\nimport { UserProfileAdapter } from './user-profile.adapter';\n\n@Injectable()\nexport class UserProfileConnector {\n  constructor(protected userProfileAdapter: UserProfileAdapter) {}\n\n  update(username: string, user: User): Observable<unknown> {\n    return this.userProfileAdapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.userProfileAdapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.userProfileAdapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<unknown> {\n    return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<unknown> {\n    return this.userProfileAdapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<unknown> {\n    return this.userProfileAdapter.updateEmail(\n      userId,\n      currentPassword,\n      newUserId\n    );\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<unknown> {\n    return this.userProfileAdapter.updatePassword(\n      userId,\n      oldPassword,\n      newPassword\n    );\n  }\n\n  remove(userId: string): Observable<unknown> {\n    return this.userProfileAdapter.close(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.userProfileAdapter.loadTitles();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './converters';\nexport * from './user-profile.adapter';\nexport * from './user-profile.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { UserProfileConnector } from '../connectors/user-profile.connector';\n\n@Injectable()\nexport class UserEmailService implements UserEmailFacade {\n  constructor(\n    protected userIdService: UserIdService,\n    protected userProfileConnector: UserProfileConnector,\n    protected command: CommandService\n  ) {}\n\n  protected updateCommand: Command<{\n    password: string;\n    newUid: string;\n  }> = this.command.create(\n    (payload) =>\n      this.userIdService\n        .takeUserId(true)\n        .pipe(\n          switchMap((uid) =>\n            this.userProfileConnector.updateEmail(\n              uid,\n              payload.password,\n              payload.newUid\n            )\n          )\n        ),\n    {\n      strategy: CommandStrategy.Queue,\n    }\n  );\n\n  /**\n   * Updates the user's email.\n   *\n   * @param password to users password to confirm the users\n   * @param newUid the new proposed email address.\n   */\n  update(password: string, newUid: string): Observable<unknown> {\n    return this.updateCommand.execute({ password, newUid });\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Command, CommandService, UserIdService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { UserProfileConnector } from '../connectors/user-profile.connector';\n\n@Injectable()\nexport class UserPasswordService implements UserPasswordFacade {\n  protected updateCommand: Command<{\n    oldPassword: string;\n    newPassword: string;\n  }> = this.command.create((payload) =>\n    this.userIdService.takeUserId(true).pipe(\n      take(1),\n      switchMap((uid) =>\n        this.userProfileConnector.updatePassword(\n          uid,\n          payload.oldPassword,\n          payload.newPassword\n        )\n      )\n    )\n  );\n\n  protected resetCommand: Command<{\n    token: string;\n    password: string;\n  }> = this.command.create((payload) =>\n    this.userProfileConnector.resetPassword(payload.token, payload.password)\n  );\n\n  protected requestForgotPasswordEmailCommand: Command<{\n    email: string;\n  }> = this.command.create((payload) =>\n    this.userProfileConnector.requestForgotPasswordEmail(payload.email)\n  );\n\n  constructor(\n    protected userProfileConnector: UserProfileConnector,\n    protected userIdService: UserIdService,\n    protected command: CommandService\n  ) {}\n\n  /**\n   * Updates the password for the user\n   *\n   * The method returns an observable with `LoaderState` information, including the\n   * actual user data.\n   *\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  update(oldPassword: string, newPassword: string): Observable<unknown> {\n    return this.updateCommand.execute({ oldPassword, newPassword });\n  }\n\n  /**\n   * Reset new password. Part of the forgot password flow.\n   *\n   * @param token\n   * @param password\n   */\n  reset(token: string, password: string): Observable<unknown> {\n    return this.resetCommand.execute({ token, password });\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(email: string): Observable<unknown> {\n    return this.requestForgotPasswordEmailCommand.execute({ email });\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  AuthService,\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  LanguageSetEvent,\n  Query,\n  QueryService,\n  UserIdService,\n} from '@spartacus/core';\nimport {\n  User,\n  UserAccountChangedEvent,\n  UserAccountFacade,\n} from '@spartacus/user/account/root';\nimport { Observable } from 'rxjs';\nimport { Title, UserProfileFacade } from '@spartacus/user/profile/root';\nimport { UserProfileConnector } from '../connectors/user-profile.connector';\nimport { map, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UserProfileService implements UserProfileFacade {\n  protected updateCommand: Command<{ details: User }> = this.command.create(\n    (payload) =>\n      this.userIdService.takeUserId(true).pipe(\n        switchMap((uid) =>\n          this.userProfileConnector.update(uid, payload.details).pipe(\n            tap(() => {\n              this.eventService.dispatch(\n                { user: payload.details },\n                UserAccountChangedEvent\n              );\n            })\n          )\n        )\n      ),\n    {\n      strategy: CommandStrategy.Queue,\n    }\n  );\n\n  protected closeCommand: Command = this.command.create(() =>\n    this.userIdService\n      .takeUserId(true)\n      .pipe(\n        switchMap((uid) =>\n          this.userProfileConnector\n            .remove(uid)\n            .pipe(tap(() => this.authService.logout()))\n        )\n      )\n  );\n\n  protected titleQuery: Query<Title[]> = this.query.create(\n    () => this.userProfileConnector.getTitles(),\n    {\n      reloadOn: [LanguageSetEvent],\n    }\n  );\n\n  constructor(\n    protected userAccountService: UserAccountFacade,\n    protected authService: AuthService,\n    protected userProfileConnector: UserProfileConnector,\n    protected eventService: EventService,\n    protected userIdService: UserIdService,\n    protected query: QueryService,\n    protected command: CommandService\n  ) {}\n\n  get(): Observable<User | undefined> {\n    return this.userAccountService.get();\n  }\n\n  /**\n   * Updates the user's details.\n   *\n   * @param details User details to be updated.\n   */\n  update(details: User): Observable<unknown> {\n    return this.updateCommand.execute({ details });\n  }\n\n  /**\n   * Closes the user account.\n   */\n  close(): Observable<unknown> {\n    return this.closeCommand.execute(undefined);\n  }\n\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n  getTitles(): Observable<Title[]> {\n    return this.titleQuery.get().pipe(map((titles) => titles ?? []));\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  AuthService,\n  Command,\n  CommandService,\n  UserActions,\n} from '@spartacus/core';\nimport { User } from '@spartacus/user/account/root';\nimport { Observable } from 'rxjs';\nimport {\n  Title,\n  UserRegisterFacade,\n  UserSignUp,\n} from '@spartacus/user/profile/root';\nimport { UserProfileConnector } from '../connectors/user-profile.connector';\nimport { tap } from 'rxjs/operators';\nimport { UserProfileService } from './user-profile.service';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class UserRegisterService implements UserRegisterFacade {\n  protected registerCommand: Command<{ user: UserSignUp }, User> =\n    this.command.create(({ user }) =>\n      this.userConnector.register(user).pipe(\n        tap(() => {\n          // this is a compatibility mechanism only, to make anonymous consents\n          // management work properly in transitional period (when we move logic\n          // to separate libraries)\n          this.store.dispatch(new UserActions.RegisterUserSuccess());\n        })\n      )\n    );\n\n  protected registerGuestCommand: Command<\n    {\n      guid: string;\n      password: string;\n    },\n    User\n  > = this.command.create((payload) =>\n    this.userConnector.registerGuest(payload.guid, payload.password).pipe(\n      tap((user) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.authService.loginWithCredentials(user.uid!, payload.password);\n      })\n    )\n  );\n\n  constructor(\n    protected userProfile: UserProfileService,\n    protected userConnector: UserProfileConnector,\n    protected authService: AuthService,\n    protected command: CommandService,\n    protected store: Store\n  ) {}\n\n  /**\n   * Register a new user.\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(user: UserSignUp): Observable<User> {\n    return this.registerCommand.execute({ user });\n  }\n\n  /**\n   * Register a new user from guest.\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.registerGuestCommand.execute({ guid, password });\n  }\n\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n  getTitles(): Observable<Title[]> {\n    return this.userProfile.getTitles();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './user-email.service';\nexport * from './user-password.service';\nexport * from './user-profile.service';\nexport * from './user-register.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UserEmailService } from './user-email.service';\nimport { UserPasswordService } from './user-password.service';\nimport { UserProfileService } from './user-profile.service';\nimport { UserRegisterService } from './user-register.service';\nimport {\n  UserEmailFacade,\n  UserPasswordFacade,\n  UserProfileFacade,\n  UserRegisterFacade,\n} from '@spartacus/user/profile/root';\nimport { Provider } from '@angular/core';\nexport const facadeProviders: Provider[] = [\n  UserEmailService,\n  UserPasswordService,\n  UserProfileService,\n  UserRegisterService,\n  {\n    provide: UserEmailFacade,\n    useExisting: UserEmailService,\n  },\n  {\n    provide: UserPasswordFacade,\n    useExisting: UserPasswordService,\n  },\n  {\n    provide: UserProfileFacade,\n    useExisting: UserProfileService,\n  },\n  {\n    provide: UserRegisterFacade,\n    useExisting: UserRegisterService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { UserProfileConnector } from './connectors/user-profile.connector';\nimport { facadeProviders } from './facade/facade-providers';\n\n@NgModule({\n  providers: [UserProfileConnector, ...facadeProviders],\n})\nexport class UserProfileCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './connectors/index';\nexport * from './facade/index';\nexport * from './user-profile-core.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.UserProfileAdapter","i1","i2.UserProfileConnector","i1.UserProfileConnector","i3.UserProfileConnector","i1.UserProfileService","i3"],"mappings":";;;;;;;;;;AAAA;;;;AAIG;MAOU,uBAAuB,GAAG,IAAI,cAAc,CACvD,uBAAuB,EACvB;MAEW,uBAAuB,GAAG,IAAI,cAAc,CACvD,uBAAuB,EACvB;MAEW,eAAe,GAAG,IAAI,cAAc,CAC/C,gBAAgB,EAChB;MAEW,uBAAuB,GAAG,IAAI,cAAc,CAEvD,sBAAsB,EAAE;MAEb,gBAAgB,GAAG,IAAI,cAAc,CAChD,iBAAiB;;AC5BnB;;;;AAIG;MAMmB,kBAAkB,CAAA;AA+BvC;;ACzCD;;;;AAIG;MASU,oBAAoB,CAAA;AAC/B,IAAA,WAAA,CAAsB,kBAAsC,EAAA;AAAtC,QAAA,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;KAAI;IAEhE,MAAM,CAAC,QAAgB,EAAE,IAAU,EAAA;QACjC,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KACvD;AAED,IAAA,QAAQ,CAAC,IAAgB,EAAA;QACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/C;IAED,aAAa,CAAC,IAAY,EAAE,QAAgB,EAAA;QAC1C,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC9D;AAED,IAAA,0BAA0B,CAAC,gBAAwB,EAAA;QACjD,OAAO,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;KAC7E;IAED,aAAa,CAAC,KAAa,EAAE,WAAmB,EAAA;QAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;KAClE;AAED,IAAA,WAAW,CACT,MAAc,EACd,eAAuB,EACvB,SAAiB,EAAA;AAEjB,QAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CACxC,MAAM,EACN,eAAe,EACf,SAAS,CACV,CAAC;KACH;AAED,IAAA,cAAc,CACZ,MAAc,EACd,WAAmB,EACnB,WAAmB,EAAA;AAEnB,QAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAC3C,MAAM,EACN,WAAW,EACX,WAAW,CACZ,CAAC;KACH;AAED,IAAA,MAAM,CAAC,MAAc,EAAA;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC9C;IAED,SAAS,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,CAAC;KAC7C;;iHArDU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,kBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;qHAApB,oBAAoB,EAAA,CAAA,CAAA;2FAApB,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBADhC,UAAU;;;ACZX;;;;AAIG;;ACJH;;;;AAIG;MAeU,gBAAgB,CAAA;AAC3B,IAAA,WAAA,CACY,aAA4B,EAC5B,oBAA0C,EAC1C,OAAuB,EAAA;AAFvB,QAAA,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;AAC5B,QAAA,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;AAC1C,QAAA,IAAO,CAAA,OAAA,GAAP,OAAO,CAAgB;AAGzB,QAAA,IAAA,CAAA,aAAa,GAGlB,IAAI,CAAC,OAAO,CAAC,MAAM,CACtB,CAAC,OAAO,KACN,IAAI,CAAC,aAAa;aACf,UAAU,CAAC,IAAI,CAAC;aAChB,IAAI,CACH,SAAS,CAAC,CAAC,GAAG,KACZ,IAAI,CAAC,oBAAoB,CAAC,WAAW,CACnC,GAAG,EACH,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,MAAM,CACf,CACF,CACF,EACL;YACE,QAAQ,EAAE,eAAe,CAAC,KAAK;AAChC,SAAA,CACF,CAAC;KArBE;AAuBJ;;;;;AAKG;IACH,MAAM,CAAC,QAAgB,EAAE,MAAc,EAAA;AACrC,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;KACzD;;6GApCU,gBAAgB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAC,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAAD,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;iHAAhB,gBAAgB,EAAA,CAAA,CAAA;2FAAhB,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBAD5B,UAAU;;;AClBX;;;;AAIG;MAUU,mBAAmB,CAAA;AA8B9B,IAAA,WAAA,CACY,oBAA0C,EAC1C,aAA4B,EAC5B,OAAuB,EAAA;AAFvB,QAAA,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;AAC1C,QAAA,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;AAC5B,QAAA,IAAO,CAAA,OAAA,GAAP,OAAO,CAAgB;QAhCzB,IAAa,CAAA,aAAA,GAGlB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,KAC/B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CACtC,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,CAAC,GAAG,KACZ,IAAI,CAAC,oBAAoB,CAAC,cAAc,CACtC,GAAG,EACH,OAAO,CAAC,WAAW,EACnB,OAAO,CAAC,WAAW,CACpB,CACF,CACF,CACF,CAAC;AAEQ,QAAA,IAAY,CAAA,YAAA,GAGjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,KAC/B,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,CACzE,CAAC;QAEQ,IAAiC,CAAA,iCAAA,GAEtC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,KAC/B,IAAI,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,CAAC,CACpE,CAAC;KAME;AAEJ;;;;;;;;AAQG;IACH,MAAM,CAAC,WAAmB,EAAE,WAAmB,EAAA;AAC7C,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;KACjE;AAED;;;;;AAKG;IACH,KAAK,CAAC,KAAa,EAAE,QAAgB,EAAA;AACnC,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;KACvD;AAED;;AAEG;AACH,IAAA,0BAA0B,CAAC,KAAa,EAAA;QACtC,OAAO,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;KAClE;;gHAhEU,mBAAmB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAE,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;oHAAnB,mBAAmB,EAAA,CAAA,CAAA;2FAAnB,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAD/B,UAAU;;;ACbX;;;;AAIG;MAyBU,kBAAkB,CAAA;AAuC7B,IAAA,WAAA,CACY,kBAAqC,EACrC,WAAwB,EACxB,oBAA0C,EAC1C,YAA0B,EAC1B,aAA4B,EAC5B,KAAmB,EACnB,OAAuB,EAAA;AANvB,QAAA,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAmB;AACrC,QAAA,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;AACxB,QAAA,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;AAC1C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAC1B,QAAA,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;AAC5B,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAc;AACnB,QAAA,IAAO,CAAA,OAAA,GAAP,OAAO,CAAgB;QA7CzB,IAAa,CAAA,aAAA,GAA+B,IAAI,CAAC,OAAO,CAAC,MAAM,CACvE,CAAC,OAAO,KACN,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CACtC,SAAS,CAAC,CAAC,GAAG,KACZ,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CACzD,GAAG,CAAC,MAAK;AACP,YAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CACxB,EAAE,IAAI,EAAE,OAAO,CAAC,OAAO,EAAE,EACzB,uBAAuB,CACxB,CAAC;AACJ,SAAC,CAAC,CACH,CACF,CACF,EACH;YACE,QAAQ,EAAE,eAAe,CAAC,KAAK;AAChC,SAAA,CACF,CAAC;AAEQ,QAAA,IAAA,CAAA,YAAY,GAAY,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MACpD,IAAI,CAAC,aAAa;aACf,UAAU,CAAC,IAAI,CAAC;aAChB,IAAI,CACH,SAAS,CAAC,CAAC,GAAG,KACZ,IAAI,CAAC,oBAAoB;aACtB,MAAM,CAAC,GAAG,CAAC;AACX,aAAA,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAC9C,CACF,CACJ,CAAC;AAEQ,QAAA,IAAA,CAAA,UAAU,GAAmB,IAAI,CAAC,KAAK,CAAC,MAAM,CACtD,MAAM,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,EAC3C;YACE,QAAQ,EAAE,CAAC,gBAAgB,CAAC;AAC7B,SAAA,CACF,CAAC;KAUE;IAEJ,GAAG,GAAA;AACD,QAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC;KACtC;AAED;;;;AAIG;AACH,IAAA,MAAM,CAAC,OAAa,EAAA;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;KAChD;AAED;;AAEG;IACH,KAAK,GAAA;QACH,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC7C;AAED;;AAEG;IACH,SAAS,GAAA;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,KAAN,IAAA,IAAA,MAAM,KAAN,KAAA,CAAA,GAAA,MAAM,GAAI,EAAE,CAAC,CAAC,CAAC;KAClE;;+GA1EU,kBAAkB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;mHAAlB,kBAAkB,EAAA,CAAA,CAAA;2FAAlB,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAD9B,UAAU;;;AC5BX;;;;AAIG;MAsBU,mBAAmB,CAAA;IA4B9B,WACY,CAAA,WAA+B,EAC/B,aAAmC,EACnC,WAAwB,EACxB,OAAuB,EACvB,KAAY,EAAA;AAJZ,QAAA,IAAW,CAAA,WAAA,GAAX,WAAW,CAAoB;AAC/B,QAAA,IAAa,CAAA,aAAA,GAAb,aAAa,CAAsB;AACnC,QAAA,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;AACxB,QAAA,IAAO,CAAA,OAAA,GAAP,OAAO,CAAgB;AACvB,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAO;AAhCd,QAAA,IAAA,CAAA,eAAe,GACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,KAC3B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CACpC,GAAG,CAAC,MAAK;;;;YAIP,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC;SAC5D,CAAC,CACH,CACF,CAAC;AAEM,QAAA,IAAA,CAAA,oBAAoB,GAM1B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,KAC9B,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CACnE,GAAG,CAAC,CAAC,IAAI,KAAI;;AAEX,YAAA,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;SACpE,CAAC,CACH,CACF,CAAC;KAQE;AAEJ;;;;AAIG;AACH,IAAA,QAAQ,CAAC,IAAgB,EAAA;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;KAC/C;AAED;;;;;AAKG;IACH,aAAa,CAAC,IAAY,EAAE,QAAgB,EAAA;AAC1C,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC9D;AAED;;AAEG;IACH,SAAS,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;KACrC;;gHA5DU,mBAAmB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAC,kBAAA,EAAA,EAAA,EAAA,KAAA,EAAAH,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAAI,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,KAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;oHAAnB,mBAAmB,EAAA,CAAA,CAAA;2FAAnB,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAD/B,UAAU;;;ACzBX;;;;AAIG;;ACJH;;;;AAIG;AAaI,MAAM,eAAe,GAAe;IACzC,gBAAgB;IAChB,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;AACnB,IAAA;AACE,QAAA,OAAO,EAAE,eAAe;AACxB,QAAA,WAAW,EAAE,gBAAgB;AAC9B,KAAA;AACD,IAAA;AACE,QAAA,OAAO,EAAE,kBAAkB;AAC3B,QAAA,WAAW,EAAE,mBAAmB;AACjC,KAAA;AACD,IAAA;AACE,QAAA,OAAO,EAAE,iBAAiB;AAC1B,QAAA,WAAW,EAAE,kBAAkB;AAChC,KAAA;AACD,IAAA;AACE,QAAA,OAAO,EAAE,kBAAkB;AAC3B,QAAA,WAAW,EAAE,mBAAmB;AACjC,KAAA;CACF;;ACtCD;;;;AAIG;MASU,qBAAqB,CAAA;;kHAArB,qBAAqB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;mHAArB,qBAAqB,EAAA,CAAA,CAAA;AAArB,qBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,qBAAqB,aAFrB,CAAC,oBAAoB,EAAE,GAAG,eAAe,CAAC,EAAA,CAAA,CAAA;2FAE1C,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBAHjC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,SAAS,EAAE,CAAC,oBAAoB,EAAE,GAAG,eAAe,CAAC;iBACtD,CAAA;;;ACZD;;;;AAIG;;ACJH;;AAEG;;;;"}