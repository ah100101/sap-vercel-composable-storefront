/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { facadeFactory } from '@spartacus/core';
import { ORDER_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export function orderReturnRequestFacadeFactory() {
    return facadeFactory({
        facade: OrderReturnRequestFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'createOrderReturnRequest',
            'getOrderReturnRequest',
            'getOrderReturnRequestList',
            'loadOrderReturnRequestDetail',
            'loadOrderReturnRequestList',
            'clearOrderReturnRequestList',
            'getReturnRequestLoading',
            'getReturnRequestSuccess',
            'clearOrderReturnRequestDetail',
            'cancelOrderReturnRequest',
            'getCancelReturnRequestLoading',
            'getCancelReturnRequestSuccess',
            'resetCancelReturnRequestProcessState',
        ],
        async: true,
    });
}
export class OrderReturnRequestFacade {
}
OrderReturnRequestFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderReturnRequestFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OrderReturnRequestFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderReturnRequestFacade, providedIn: 'root', useFactory: orderReturnRequestFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderReturnRequestFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: orderReturnRequestFacadeFactory,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItcmV0dXJuLXJlcXVlc3QuZmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZGVyL3Jvb3QvZmFjYWRlL29yZGVyLXJldHVybi1yZXF1ZXN0LmZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBUXJELE1BQU0sVUFBVSwrQkFBK0I7SUFDN0MsT0FBTyxhQUFhLENBQUM7UUFDbkIsTUFBTSxFQUFFLHdCQUF3QjtRQUNoQyxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLE9BQU8sRUFBRTtZQUNQLDBCQUEwQjtZQUMxQix1QkFBdUI7WUFDdkIsMkJBQTJCO1lBQzNCLDhCQUE4QjtZQUM5Qiw0QkFBNEI7WUFDNUIsNkJBQTZCO1lBQzdCLHlCQUF5QjtZQUN6Qix5QkFBeUI7WUFDekIsK0JBQStCO1lBQy9CLDBCQUEwQjtZQUMxQiwrQkFBK0I7WUFDL0IsK0JBQStCO1lBQy9CLHNDQUFzQztTQUN2QztRQUNELEtBQUssRUFBRSxJQUFJO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQU1ELE1BQU0sT0FBZ0Isd0JBQXdCOztxSEFBeEIsd0JBQXdCO3lIQUF4Qix3QkFBd0IsY0FIaEMsTUFBTSxjQUNOLCtCQUErQjsyRkFFdkIsd0JBQXdCO2tCQUo3QyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO29CQUNsQixVQUFVLEVBQUUsK0JBQStCO2lCQUM1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZhY2FkZUZhY3RvcnkgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT1JERVJfQ09SRV9GRUFUVVJFIH0gZnJvbSAnLi4vZmVhdHVyZS1uYW1lJztcbmltcG9ydCB7XG4gIFJldHVyblJlcXVlc3QsXG4gIFJldHVyblJlcXVlc3RFbnRyeUlucHV0TGlzdCxcbiAgUmV0dXJuUmVxdWVzdExpc3QsXG4gIFJldHVyblJlcXVlc3RNb2RpZmljYXRpb24sXG59IGZyb20gJy4uL21vZGVsL29yZGVyLm1vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9yZGVyUmV0dXJuUmVxdWVzdEZhY2FkZUZhY3RvcnkoKSB7XG4gIHJldHVybiBmYWNhZGVGYWN0b3J5KHtcbiAgICBmYWNhZGU6IE9yZGVyUmV0dXJuUmVxdWVzdEZhY2FkZSxcbiAgICBmZWF0dXJlOiBPUkRFUl9DT1JFX0ZFQVRVUkUsXG4gICAgbWV0aG9kczogW1xuICAgICAgJ2NyZWF0ZU9yZGVyUmV0dXJuUmVxdWVzdCcsXG4gICAgICAnZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0JyxcbiAgICAgICdnZXRPcmRlclJldHVyblJlcXVlc3RMaXN0JyxcbiAgICAgICdsb2FkT3JkZXJSZXR1cm5SZXF1ZXN0RGV0YWlsJyxcbiAgICAgICdsb2FkT3JkZXJSZXR1cm5SZXF1ZXN0TGlzdCcsXG4gICAgICAnY2xlYXJPcmRlclJldHVyblJlcXVlc3RMaXN0JyxcbiAgICAgICdnZXRSZXR1cm5SZXF1ZXN0TG9hZGluZycsXG4gICAgICAnZ2V0UmV0dXJuUmVxdWVzdFN1Y2Nlc3MnLFxuICAgICAgJ2NsZWFyT3JkZXJSZXR1cm5SZXF1ZXN0RGV0YWlsJyxcbiAgICAgICdjYW5jZWxPcmRlclJldHVyblJlcXVlc3QnLFxuICAgICAgJ2dldENhbmNlbFJldHVyblJlcXVlc3RMb2FkaW5nJyxcbiAgICAgICdnZXRDYW5jZWxSZXR1cm5SZXF1ZXN0U3VjY2VzcycsXG4gICAgICAncmVzZXRDYW5jZWxSZXR1cm5SZXF1ZXN0UHJvY2Vzc1N0YXRlJyxcbiAgICBdLFxuICAgIGFzeW5jOiB0cnVlLFxuICB9KTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUZhY3Rvcnk6IG9yZGVyUmV0dXJuUmVxdWVzdEZhY2FkZUZhY3RvcnksXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE9yZGVyUmV0dXJuUmVxdWVzdEZhY2FkZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgb3JkZXIgcmV0dXJuIHJlcXVlc3RcbiAgICogQHBhcmFtIG9yZGVyQ29kZSBhbiBvcmRlciBjb2RlXG4gICAqIEBwYXJhbSByZXR1cm5SZXF1ZXN0SW5wdXQgb3JkZXIgcmV0dXJuIHJlcXVlc3QgZW50cnkgaW5wdXRcbiAgICovXG4gIGFic3RyYWN0IGNyZWF0ZU9yZGVyUmV0dXJuUmVxdWVzdChcbiAgICByZXR1cm5SZXF1ZXN0SW5wdXQ6IFJldHVyblJlcXVlc3RFbnRyeUlucHV0TGlzdFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gb3JkZXIgcmV0dXJuIHJlcXVlc3RcbiAgICovXG4gIGFic3RyYWN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdCgpOiBPYnNlcnZhYmxlPFJldHVyblJlcXVlc3Q+O1xuXG4gIC8qKlxuICAgKiBHZXRzIG9yZGVyIHJldHVybiByZXF1ZXN0IGxpc3RcbiAgICovXG4gIGFic3RyYWN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdExpc3QoXG4gICAgcGFnZVNpemU6IG51bWJlclxuICApOiBPYnNlcnZhYmxlPFJldHVyblJlcXVlc3RMaXN0IHwgdW5kZWZpbmVkPjtcblxuICAvKipcbiAgICogTG9hZHMgb3JkZXIgcmV0dXJuIHJlcXVlc3QgZGV0YWlsXG4gICAqIEBwYXJhbSByZXR1cm5SZXF1ZXN0Q29kZVxuICAgKi9cbiAgYWJzdHJhY3QgbG9hZE9yZGVyUmV0dXJuUmVxdWVzdERldGFpbChyZXR1cm5SZXF1ZXN0Q29kZTogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogTG9hZHMgb3JkZXIgcmV0dXJuIHJlcXVlc3QgbGlzdFxuICAgKiBAcGFyYW0gcGFnZVNpemUgcGFnZSBzaXplXG4gICAqIEBwYXJhbSBjdXJyZW50UGFnZSBjdXJyZW50IHBhZ2VcbiAgICogQHBhcmFtIHNvcnQgc29ydFxuICAgKi9cbiAgYWJzdHJhY3QgbG9hZE9yZGVyUmV0dXJuUmVxdWVzdExpc3QoXG4gICAgcGFnZVNpemU6IG51bWJlcixcbiAgICBjdXJyZW50UGFnZT86IG51bWJlcixcbiAgICBzb3J0Pzogc3RyaW5nXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENsZWFuaW5nIG9yZGVyIHJldHVybiByZXF1ZXN0IGxpc3RcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyT3JkZXJSZXR1cm5SZXF1ZXN0TGlzdCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG9yZGVyIHJldHVybiByZXF1ZXN0IGxvYWRpbmcgZmxhZ1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0UmV0dXJuUmVxdWVzdExvYWRpbmcoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogR2V0IHRoZSBvcmRlciByZXR1cm4gcmVxdWVzdCBzdWNjZXNzIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldFJldHVyblJlcXVlc3RTdWNjZXNzKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIENsZWFuaW5nIG9yZGVyIHJldHVybiByZXF1ZXN0IGRldGFpbHNcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyT3JkZXJSZXR1cm5SZXF1ZXN0RGV0YWlsKCk6IHZvaWQ7XG5cbiAgLypcbiAgICogQ2FuY2VsIG9yZGVyIHJldHVybiByZXF1ZXN0XG4gICAqL1xuICBhYnN0cmFjdCBjYW5jZWxPcmRlclJldHVyblJlcXVlc3QoXG4gICAgcmV0dXJuUmVxdWVzdENvZGU6IHN0cmluZyxcbiAgICByZXR1cm5SZXF1ZXN0TW9kaWZpY2F0aW9uOiBSZXR1cm5SZXF1ZXN0TW9kaWZpY2F0aW9uXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbmNlbCByZXR1cm4gcmVxdWVzdCBsb2FkaW5nIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldENhbmNlbFJldHVyblJlcXVlc3RMb2FkaW5nKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbmNlbCByZXR1cm4gcmVxdWVzdCBzdWNjZXNzIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldENhbmNlbFJldHVyblJlcXVlc3RTdWNjZXNzKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgY2FuY2VsIHJldHVybiByZXF1ZXN0IHByb2Nlc3MgZmxhZ3NcbiAgICovXG4gIGFic3RyYWN0IHJlc2V0Q2FuY2VsUmV0dXJuUmVxdWVzdFByb2Nlc3NTdGF0ZSgpOiB2b2lkO1xufVxuIl19