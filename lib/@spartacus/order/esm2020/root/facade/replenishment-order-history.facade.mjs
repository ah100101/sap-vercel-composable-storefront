/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { facadeFactory } from '@spartacus/core';
import { ORDER_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export function replenishmentOrderHistoryFacadeFactory() {
    return facadeFactory({
        facade: ReplenishmentOrderHistoryFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'loadReplenishmentOrderDetails',
            'getReplenishmentOrderDetails',
            'getReplenishmentOrderDetailsLoading',
            'getReplenishmentOrderDetailsSuccess',
            'getReplenishmentOrderDetailsError',
            'clearReplenishmentOrderDetails',
            'cancelReplenishmentOrder',
            'getCancelReplenishmentOrderLoading',
            'getCancelReplenishmentOrderSuccess',
            'getCancelReplenishmentOrderError',
            'clearCancelReplenishmentOrderProcessState',
            'getReplenishmentOrderHistoryList',
            'getReplenishmentOrderHistoryListLoading',
            'getReplenishmentOrderHistoryListError',
            'getReplenishmentOrderHistoryListSuccess',
            'loadReplenishmentOrderList',
            'clearReplenishmentOrderList',
        ],
        async: true,
    });
}
export class ReplenishmentOrderHistoryFacade {
}
ReplenishmentOrderHistoryFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ReplenishmentOrderHistoryFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderHistoryFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ReplenishmentOrderHistoryFacade, providedIn: 'root', useFactory: replenishmentOrderHistoryFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ReplenishmentOrderHistoryFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: replenishmentOrderHistoryFacadeFactory,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1oaXN0b3J5LmZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmRlci9yb290L2ZhY2FkZS9yZXBsZW5pc2htZW50LW9yZGVyLWhpc3RvcnkuZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFNckQsTUFBTSxVQUFVLHNDQUFzQztJQUNwRCxPQUFPLGFBQWEsQ0FBQztRQUNuQixNQUFNLEVBQUUsK0JBQStCO1FBQ3ZDLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsT0FBTyxFQUFFO1lBQ1AsK0JBQStCO1lBQy9CLDhCQUE4QjtZQUM5QixxQ0FBcUM7WUFDckMscUNBQXFDO1lBQ3JDLG1DQUFtQztZQUNuQyxnQ0FBZ0M7WUFDaEMsMEJBQTBCO1lBQzFCLG9DQUFvQztZQUNwQyxvQ0FBb0M7WUFDcEMsa0NBQWtDO1lBQ2xDLDJDQUEyQztZQUMzQyxrQ0FBa0M7WUFDbEMseUNBQXlDO1lBQ3pDLHVDQUF1QztZQUN2Qyx5Q0FBeUM7WUFDekMsNEJBQTRCO1lBQzVCLDZCQUE2QjtTQUM5QjtRQUNELEtBQUssRUFBRSxJQUFJO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQU1ELE1BQU0sT0FBZ0IsK0JBQStCOzs0SEFBL0IsK0JBQStCO2dJQUEvQiwrQkFBK0IsY0FIdkMsTUFBTSxjQUNOLHNDQUFzQzsyRkFFOUIsK0JBQStCO2tCQUpwRCxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO29CQUNsQixVQUFVLEVBQUUsc0NBQXNDO2lCQUNuRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZhY2FkZUZhY3RvcnkgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT1JERVJfQ09SRV9GRUFUVVJFIH0gZnJvbSAnLi4vZmVhdHVyZS1uYW1lJztcbmltcG9ydCB7XG4gIFJlcGxlbmlzaG1lbnRPcmRlcixcbiAgUmVwbGVuaXNobWVudE9yZGVyTGlzdCxcbn0gZnJvbSAnLi4vbW9kZWwvcmVwbGVuaXNobWVudC1vcmRlci5tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5RmFjYWRlRmFjdG9yeSgpIHtcbiAgcmV0dXJuIGZhY2FkZUZhY3Rvcnkoe1xuICAgIGZhY2FkZTogUmVwbGVuaXNobWVudE9yZGVySGlzdG9yeUZhY2FkZSxcbiAgICBmZWF0dXJlOiBPUkRFUl9DT1JFX0ZFQVRVUkUsXG4gICAgbWV0aG9kczogW1xuICAgICAgJ2xvYWRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzJyxcbiAgICAgICdnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzJyxcbiAgICAgICdnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzTG9hZGluZycsXG4gICAgICAnZ2V0UmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc1N1Y2Nlc3MnLFxuICAgICAgJ2dldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNFcnJvcicsXG4gICAgICAnY2xlYXJSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzJyxcbiAgICAgICdjYW5jZWxSZXBsZW5pc2htZW50T3JkZXInLFxuICAgICAgJ2dldENhbmNlbFJlcGxlbmlzaG1lbnRPcmRlckxvYWRpbmcnLFxuICAgICAgJ2dldENhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MnLFxuICAgICAgJ2dldENhbmNlbFJlcGxlbmlzaG1lbnRPcmRlckVycm9yJyxcbiAgICAgICdjbGVhckNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclByb2Nlc3NTdGF0ZScsXG4gICAgICAnZ2V0UmVwbGVuaXNobWVudE9yZGVySGlzdG9yeUxpc3QnLFxuICAgICAgJ2dldFJlcGxlbmlzaG1lbnRPcmRlckhpc3RvcnlMaXN0TG9hZGluZycsXG4gICAgICAnZ2V0UmVwbGVuaXNobWVudE9yZGVySGlzdG9yeUxpc3RFcnJvcicsXG4gICAgICAnZ2V0UmVwbGVuaXNobWVudE9yZGVySGlzdG9yeUxpc3RTdWNjZXNzJyxcbiAgICAgICdsb2FkUmVwbGVuaXNobWVudE9yZGVyTGlzdCcsXG4gICAgICAnY2xlYXJSZXBsZW5pc2htZW50T3JkZXJMaXN0JyxcbiAgICBdLFxuICAgIGFzeW5jOiB0cnVlLFxuICB9KTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUZhY3Rvcnk6IHJlcGxlbmlzaG1lbnRPcmRlckhpc3RvcnlGYWNhZGVGYWN0b3J5LFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5RmFjYWRlIHtcbiAgLyoqXG4gICAqIFJldHVybnMgcmVwbGVuaXNobWVudCBvcmRlciBkZXRhaWxzIGZvciBhIGdpdmVuICdjdXJyZW50JyB1c2VyXG4gICAqXG4gICAqIEBwYXJhbSByZXBsZW5pc2htZW50T3JkZXJDb2RlIGEgcmVwbGVuaXNobWVudCBvcmRlciBjb2RlXG4gICAqL1xuICBhYnN0cmFjdCBsb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscyhyZXBsZW5pc2htZW50T3JkZXJDb2RlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVwbGVuaXNobWVudCBvcmRlciBkZXRhaWxzXG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzKCk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyPjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlcGxlbmlzaG1lbnQgb3JkZXIgZGV0YWlscyBsb2FkaW5nIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNMb2FkaW5nKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXBsZW5pc2htZW50IG9yZGVyIGRldGFpbHMgc3VjY2VzcyBmbGFnXG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzU3VjY2VzcygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVwbGVuaXNobWVudCBvcmRlciBkZXRhaWxzIGVycm9yIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNFcnJvcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHJlcGxlbmlzaG1lbnQgb3JkZXJzIGRldGFpbHMgc3RhdGVcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgc3BlY2lmaWMgcmVwbGVuaXNobWVudCBvcmRlciBmb3IgYSBnaXZlbiAnY3VycmVudCcgdXNlclxuICAgKlxuICAgKiBAcGFyYW0gcmVwbGVuaXNobWVudE9yZGVyQ29kZSBhIHJlcGxlbmlzaG1lbnQgb3JkZXIgY29kZVxuICAgKi9cbiAgYWJzdHJhY3QgY2FuY2VsUmVwbGVuaXNobWVudE9yZGVyKHJlcGxlbmlzaG1lbnRPcmRlckNvZGU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbmNlbCByZXBsZW5pc2htZW50IG9yZGVyIGxvYWRpbmcgZmxhZ1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyTG9hZGluZygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYW5jZWwgcmVwbGVuaXNobWVudCBvcmRlciBzdWNjZXNzIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldENhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2FuY2VsIHJlcGxlbmlzaG1lbnQgb3JkZXIgZXJyb3IgZmxhZ1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyRXJyb3IoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBjYW5jZWwgcmVwbGVuaXNobWVudCBvcmRlciBwcm9jZXNzaW5nIHN0YXRlXG4gICAqL1xuICBhYnN0cmFjdCBjbGVhckNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclByb2Nlc3NTdGF0ZSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdChcbiAgICBwYWdlU2l6ZTogbnVtYmVyXG4gICk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyTGlzdCB8IHVuZGVmaW5lZD47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2FkaW5nIGZsYWcgZm9yIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdExvYWRpbmcoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGVycm9yIGZsYWcgZm9yIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdEVycm9yKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdWNjZXNzIGZsYWcgZm9yIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdFN1Y2Nlc3MoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgcmVwbGVuaXNobWVudCBvcmRlciBsaXN0XG4gICAqIEBwYXJhbSBwYWdlU2l6ZSBwYWdlIHNpemVcbiAgICogQHBhcmFtIGN1cnJlbnRQYWdlIGN1cnJlbnQgcGFnZVxuICAgKiBAcGFyYW0gc29ydCBzb3J0XG4gICAqL1xuICBhYnN0cmFjdCBsb2FkUmVwbGVuaXNobWVudE9yZGVyTGlzdChcbiAgICBwYWdlU2l6ZT86IG51bWJlcixcbiAgICBjdXJyZW50UGFnZT86IG51bWJlcixcbiAgICBzb3J0Pzogc3RyaW5nXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENsZWFuaW5nIHJlcGxlbmlzaG1lbnQgb3JkZXIgbGlzdFxuICAgKi9cbiAgYWJzdHJhY3QgY2xlYXJSZXBsZW5pc2htZW50T3JkZXJMaXN0KCk6IHZvaWQ7XG59XG4iXX0=