/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { GlobalMessageType, normalizeHttpError, SiteContextActions, } from '@spartacus/core';
import { EMPTY, of } from 'rxjs';
import { catchError, filter, map, switchMap, withLatestFrom, } from 'rxjs/operators';
import { OrderActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/order-history.connector";
import * as i3 from "@spartacus/core";
import * as i4 from "@ngrx/store";
export class OrderDetailsEffect {
    constructor(actions$, orderConnector, globalMessageService, userIdService, store) {
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.globalMessageService = globalMessageService;
        this.userIdService = userIdService;
        this.store = store;
        this.loadOrderDetails$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.LOAD_ORDER_DETAILS), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .get(payload.userId, payload.orderCode)
                .pipe(map((order) => {
                return new OrderActions.LoadOrderDetailsSuccess(order);
            }), catchError((error) => of(new OrderActions.LoadOrderDetailsFail(normalizeHttpError(error)))));
        })));
        this.cancelOrder$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.CANCEL_ORDER), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)
                .pipe(map(() => new OrderActions.CancelOrderSuccess()), catchError((error) => {
                error.error?.errors.forEach((err) => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));
                return of(new OrderActions.CancelOrderFail(normalizeHttpError(error)));
            }));
        })));
        this.resetOrderDetails$ = createEffect(() => this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), withLatestFrom(this.userIdService.getUserId(), this.store.pipe(filter((store) => !!store.order?.orderDetail), map((state) => state.order.orderDetail.value?.code))), switchMap(([, userId, orderCode]) => {
            if (orderCode) {
                return this.orderConnector.get(userId, orderCode).pipe(map((order) => {
                    return new OrderActions.LoadOrderDetailsSuccess(order);
                }), catchError((error) => of(new OrderActions.LoadOrderDetailsFail(normalizeHttpError(error)))));
            }
            return EMPTY;
        })));
    }
}
OrderDetailsEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderDetailsEffect, deps: [{ token: i1.Actions }, { token: i2.OrderHistoryConnector }, { token: i3.GlobalMessageService }, { token: i3.UserIdService }, { token: i4.Store }], target: i0.ɵɵFactoryTarget.Injectable });
OrderDetailsEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderDetailsEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderDetailsEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.OrderHistoryConnector }, { type: i3.GlobalMessageService }, { type: i3.UserIdService }, { type: i4.Store }]; } });
//# sourceMappingURL=data:application/json;base64,