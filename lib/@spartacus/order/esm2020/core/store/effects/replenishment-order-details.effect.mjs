/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { GlobalMessageType, normalizeHttpError, } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { OrderActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/replenishment-order-history.connector";
import * as i3 from "@spartacus/core";
export class ReplenishmentOrderDetailsEffect {
    constructor(actions$, replenishmentOrderConnector, globalMessageService) {
        this.actions$ = actions$;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.globalMessageService = globalMessageService;
        this.loadReplenishmentOrderDetails$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .load(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => {
                return new OrderActions.LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);
            }), catchError((error) => of(new OrderActions.LoadReplenishmentOrderDetailsFail(normalizeHttpError(error)))));
        })));
        this.cancelReplenishmentOrder$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.CANCEL_REPLENISHMENT_ORDER), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => new OrderActions.CancelReplenishmentOrderSuccess(replenishmentOrder)), catchError((error) => {
                error?.error?.errors.forEach((err) => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));
                return of(new OrderActions.CancelReplenishmentOrderFail(normalizeHttpError(error)));
            }));
        })));
    }
}
ReplenishmentOrderDetailsEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ReplenishmentOrderDetailsEffect, deps: [{ token: i1.Actions }, { token: i2.ReplenishmentOrderHistoryConnector }, { token: i3.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderDetailsEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ReplenishmentOrderDetailsEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ReplenishmentOrderDetailsEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.ReplenishmentOrderHistoryConnector }, { type: i3.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmRlci9jb3JlL3N0b3JlL2VmZmVjdHMvcmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVcsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLGtCQUFrQixHQUNuQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7OztBQUdoRCxNQUFNLE9BQU8sK0JBQStCO0lBa0UxQyxZQUNVLFFBQWlCLEVBQ2pCLDJCQUErRCxFQUMvRCxvQkFBMEM7UUFGMUMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQW9DO1FBQy9ELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFwRXBELG1DQUE4QixHQUM1QixZQUFZLENBQUMsR0FBRyxFQUFFLENBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsWUFBWSxDQUFDLGdDQUFnQyxDQUFDLEVBQ3JELEdBQUcsQ0FDRCxDQUFDLE1BQWtELEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQ3ZFLEVBQ0QsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsMkJBQTJCO2lCQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7aUJBQ3BELElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxrQkFBc0MsRUFBRSxFQUFFO2dCQUM3QyxPQUFPLElBQUksWUFBWSxDQUFDLG9DQUFvQyxDQUMxRCxrQkFBa0IsQ0FDbkIsQ0FBQztZQUNKLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLEVBQUUsQ0FDQSxJQUFJLFlBQVksQ0FBQyxpQ0FBaUMsQ0FDaEQsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQ0YsQ0FDRixDQUNGLENBQUM7UUFDTixDQUFDLENBQUMsQ0FDSCxDQUNGLENBQUM7UUFFSiw4QkFBeUIsR0FDdkIsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxFQUMvQyxHQUFHLENBQUMsQ0FBQyxNQUE2QyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3RFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsd0JBQXdCLENBQ3ZCLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUMvQjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUNELENBQUMsa0JBQXNDLEVBQUUsRUFBRSxDQUN6QyxJQUFJLFlBQVksQ0FBQywrQkFBK0IsQ0FDOUMsa0JBQWtCLENBQ25CLENBQ0osRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDbkIsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FDeEMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FDM0IsR0FBRyxDQUFDLE9BQU8sRUFDWCxpQkFBaUIsQ0FBQyxjQUFjLENBQ2pDLENBQ0YsQ0FBQztnQkFFRixPQUFPLEVBQUUsQ0FDUCxJQUFJLFlBQVksQ0FBQyw0QkFBNEIsQ0FDM0Msa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQ0YsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDTixDQUFDLENBQUMsQ0FDSCxDQUNGLENBQUM7SUFNRCxDQUFDOzs0SEF0RU8sK0JBQStCO2dJQUEvQiwrQkFBK0I7MkZBQS9CLCtCQUErQjtrQkFEM0MsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIGNyZWF0ZUVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQge1xuICBHbG9iYWxNZXNzYWdlU2VydmljZSxcbiAgR2xvYmFsTWVzc2FnZVR5cGUsXG4gIG5vcm1hbGl6ZUh0dHBFcnJvcixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFJlcGxlbmlzaG1lbnRPcmRlciB9IGZyb20gJ0BzcGFydGFjdXMvb3JkZXIvcm9vdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5Q29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9yZXBsZW5pc2htZW50LW9yZGVyLWhpc3RvcnkuY29ubmVjdG9yJztcbmltcG9ydCB7IE9yZGVyQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0VmZmVjdCB7XG4gIGxvYWRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzJDogT2JzZXJ2YWJsZTxPcmRlckFjdGlvbnMuUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0FjdGlvbj4gPVxuICAgIGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgICAgdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgICAgICBvZlR5cGUoT3JkZXJBY3Rpb25zLkxPQURfUkVQTEVOSVNITUVOVF9PUkRFUl9ERVRBSUxTKSxcbiAgICAgICAgbWFwKFxuICAgICAgICAgIChhY3Rpb246IE9yZGVyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscykgPT4gYWN0aW9uLnBheWxvYWRcbiAgICAgICAgKSxcbiAgICAgICAgc3dpdGNoTWFwKChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICAgICAgICAgICAubG9hZChwYXlsb2FkLnVzZXJJZCwgcGF5bG9hZC5yZXBsZW5pc2htZW50T3JkZXJDb2RlKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgIG1hcCgocmVwbGVuaXNobWVudE9yZGVyOiBSZXBsZW5pc2htZW50T3JkZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9yZGVyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc1N1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICByZXBsZW5pc2htZW50T3JkZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XG4gICAgICAgICAgICAgICAgb2YoXG4gICAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkxvYWRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzRmFpbChcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplSHR0cEVycm9yKGVycm9yKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuXG4gIGNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlciQ6IE9ic2VydmFibGU8T3JkZXJBY3Rpb25zLlJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNBY3Rpb24+ID1cbiAgICBjcmVhdGVFZmZlY3QoKCkgPT5cbiAgICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgICAgb2ZUeXBlKE9yZGVyQWN0aW9ucy5DQU5DRUxfUkVQTEVOSVNITUVOVF9PUkRFUiksXG4gICAgICAgIG1hcCgoYWN0aW9uOiBPcmRlckFjdGlvbnMuQ2FuY2VsUmVwbGVuaXNobWVudE9yZGVyKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgICAgIHN3aXRjaE1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3RvclxuICAgICAgICAgICAgLmNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICAgICAgICAgICAgcGF5bG9hZC51c2VySWQsXG4gICAgICAgICAgICAgIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgIG1hcChcbiAgICAgICAgICAgICAgICAocmVwbGVuaXNobWVudE9yZGVyOiBSZXBsZW5pc2htZW50T3JkZXIpID0+XG4gICAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlclxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGVycm9yPy5lcnJvcj8uZXJyb3JzLmZvckVhY2goKGVycjogYW55KSA9PlxuICAgICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxNZXNzYWdlU2VydmljZS5hZGQoXG4gICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9FUlJPUlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb2YoXG4gICAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlckZhaWwoXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXG4gICAgcHJpdmF0ZSByZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3I6IFJlcGxlbmlzaG1lbnRPcmRlckhpc3RvcnlDb25uZWN0b3IsXG4gICAgcHJpdmF0ZSBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2VcbiAgKSB7fVxufVxuIl19