/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { normalizeHttpError, SiteContextActions } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { OrderActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/index";
export class OrdersEffect {
    constructor(actions$, orderConnector, replenishmentOrderConnector) {
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.loadUserOrders$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.LOAD_USER_ORDERS), map((action) => action.payload), switchMap((payload) => {
            return (Boolean(payload.replenishmentOrderCode)
                ? this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(payload.userId, payload.replenishmentOrderCode ?? '', payload.pageSize, payload.currentPage, payload.sort)
                : this.orderConnector.getHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)).pipe(map((orders) => {
                return new OrderActions.LoadUserOrdersSuccess(orders);
            }), catchError((error) => of(new OrderActions.LoadUserOrdersFail(normalizeHttpError(error)))));
        })));
        this.resetUserOrders$ = createEffect(() => this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), map(() => {
            return new OrderActions.ClearUserOrders();
        })));
    }
}
OrdersEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrdersEffect, deps: [{ token: i1.Actions }, { token: i2.OrderHistoryConnector }, { token: i2.ReplenishmentOrderHistoryConnector }], target: i0.ɵɵFactoryTarget.Injectable });
OrdersEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrdersEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrdersEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.OrderHistoryConnector }, { type: i2.ReplenishmentOrderHistoryConnector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXJzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmRlci9jb3JlL3N0b3JlL2VmZmVjdHMvb3JkZXJzLmVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVcsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUdoRCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUNVLFFBQWlCLEVBQ2pCLGNBQXFDLEVBQ3JDLDJCQUErRDtRQUYvRCxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQUNyQyxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQW9DO1FBR3pFLG9CQUFlLEdBQThDLFlBQVksQ0FDdkUsR0FBRyxFQUFFLENBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLE1BQU0sQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFDckMsR0FBRyxDQUFDLENBQUMsTUFBbUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUM1RCxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQ0wsT0FBTyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDckMsQ0FBQyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQywrQkFBK0IsQ0FDOUQsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsc0JBQXNCLElBQUksRUFBRSxFQUNwQyxPQUFPLENBQUMsUUFBUSxFQUNoQixPQUFPLENBQUMsV0FBVyxFQUNuQixPQUFPLENBQUMsSUFBSSxDQUNiO2dCQUNILENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FDNUIsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsUUFBUSxFQUNoQixPQUFPLENBQUMsV0FBVyxFQUNuQixPQUFPLENBQUMsSUFBSSxDQUNiLENBQ04sQ0FBQyxJQUFJLENBQ0osR0FBRyxDQUFDLENBQUMsTUFBd0IsRUFBRSxFQUFFO2dCQUMvQixPQUFPLElBQUksWUFBWSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQ25FLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQ0osQ0FBQztRQUVGLHFCQUFnQixHQUE2QyxZQUFZLENBQ3ZFLEdBQUcsRUFBRSxDQUNILElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLEVBQzFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDUCxPQUFPLElBQUksWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUNILENBQ0osQ0FBQztJQTNDQyxDQUFDOzt5R0FMTyxZQUFZOzZHQUFaLFlBQVk7MkZBQVosWUFBWTtrQkFEeEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIGNyZWF0ZUVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBub3JtYWxpemVIdHRwRXJyb3IsIFNpdGVDb250ZXh0QWN0aW9ucyB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPcmRlckhpc3RvcnlMaXN0IH0gZnJvbSAnQHNwYXJ0YWN1cy9vcmRlci9yb290JztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIE9yZGVySGlzdG9yeUNvbm5lY3RvcixcbiAgUmVwbGVuaXNobWVudE9yZGVySGlzdG9yeUNvbm5lY3Rvcixcbn0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9pbmRleCc7XG5pbXBvcnQgeyBPcmRlckFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9yZGVyc0VmZmVjdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXG4gICAgcHJpdmF0ZSBvcmRlckNvbm5lY3RvcjogT3JkZXJIaXN0b3J5Q29ubmVjdG9yLFxuICAgIHByaXZhdGUgcmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yOiBSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5Q29ubmVjdG9yXG4gICkge31cblxuICBsb2FkVXNlck9yZGVycyQ6IE9ic2VydmFibGU8T3JkZXJBY3Rpb25zLlVzZXJPcmRlcnNBY3Rpb24+ID0gY3JlYXRlRWZmZWN0KFxuICAgICgpID0+XG4gICAgICB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgICAgIG9mVHlwZShPcmRlckFjdGlvbnMuTE9BRF9VU0VSX09SREVSUyksXG4gICAgICAgIG1hcCgoYWN0aW9uOiBPcmRlckFjdGlvbnMuTG9hZFVzZXJPcmRlcnMpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgICAgc3dpdGNoTWFwKChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIEJvb2xlYW4ocGF5bG9hZC5yZXBsZW5pc2htZW50T3JkZXJDb2RlKVxuICAgICAgICAgICAgICA/IHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yLmxvYWRSZXBsZW5pc2htZW50RGV0YWlsc0hpc3RvcnkoXG4gICAgICAgICAgICAgICAgICBwYXlsb2FkLnVzZXJJZCxcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQucGFnZVNpemUsXG4gICAgICAgICAgICAgICAgICBwYXlsb2FkLmN1cnJlbnRQYWdlLFxuICAgICAgICAgICAgICAgICAgcGF5bG9hZC5zb3J0XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IHRoaXMub3JkZXJDb25uZWN0b3IuZ2V0SGlzdG9yeShcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQudXNlcklkLFxuICAgICAgICAgICAgICAgICAgcGF5bG9hZC5wYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQuY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgICAgICBwYXlsb2FkLnNvcnRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgbWFwKChvcmRlcnM6IE9yZGVySGlzdG9yeUxpc3QpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPcmRlckFjdGlvbnMuTG9hZFVzZXJPcmRlcnNTdWNjZXNzKG9yZGVycyk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PlxuICAgICAgICAgICAgICBvZihuZXcgT3JkZXJBY3Rpb25zLkxvYWRVc2VyT3JkZXJzRmFpbChub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKVxuICApO1xuXG4gIHJlc2V0VXNlck9yZGVycyQ6IE9ic2VydmFibGU8T3JkZXJBY3Rpb25zLkNsZWFyVXNlck9yZGVycz4gPSBjcmVhdGVFZmZlY3QoXG4gICAgKCkgPT5cbiAgICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgICAgb2ZUeXBlKFNpdGVDb250ZXh0QWN0aW9ucy5MQU5HVUFHRV9DSEFOR0UpLFxuICAgICAgICBtYXAoKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBuZXcgT3JkZXJBY3Rpb25zLkNsZWFyVXNlck9yZGVycygpO1xuICAgICAgICB9KVxuICAgICAgKVxuICApO1xufVxuIl19