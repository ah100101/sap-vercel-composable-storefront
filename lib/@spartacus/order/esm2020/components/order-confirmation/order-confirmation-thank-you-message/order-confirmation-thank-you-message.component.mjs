/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { GlobalMessageType, } from '@spartacus/core';
import { filter, take, tap, withLatestFrom } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/order/root";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/storefront";
import * as i5 from "../order-guest-register-form/order-guest-register-form.component";
export class OrderConfirmationThankYouMessageComponent {
    constructor(orderFacade, globalMessageService, translationService) {
        this.orderFacade = orderFacade;
        this.globalMessageService = globalMessageService;
        this.translationService = translationService;
        this.isGuestCustomer = false;
    }
    ngOnInit() {
        this.order$ = this.orderFacade.getOrderDetails().pipe(tap((order) => {
            this.isGuestCustomer =
                order && 'guestCustomer' in order
                    ? order.guestCustomer ?? false
                    : false;
            this.orderGuid = order?.guid;
        }));
    }
    ngAfterViewInit() {
        this.addThankYouMessage();
    }
    ngOnDestroy() {
        this.orderFacade.clearPlacedOrder();
    }
    addThankYouMessage() {
        this.getThankYouAssistiveMessage()
            .pipe(take(1))
            .subscribe(([order, confirmationOfOrderMessage, thankYouMessage, invoiceHasBeenSentByEmailMessage,]) => {
            const code = order.replenishmentOrderCode ??
                order.code;
            const message = `${confirmationOfOrderMessage} ${code}. ${thankYouMessage} ${invoiceHasBeenSentByEmailMessage}`;
            this.globalMessageService.add(message, GlobalMessageType.MSG_TYPE_ASSISTIVE);
        });
    }
    getThankYouAssistiveMessage() {
        const confirmationOfOrderMessage$ = this.translationService.translate('checkoutOrderConfirmation.confirmationOfOrder');
        const thankYouMessage$ = this.translationService.translate('checkoutOrderConfirmation.thankYou');
        const invoiceHasBeenSentByEmailMessage$ = this.translationService.translate('checkoutOrderConfirmation.invoiceHasBeenSentByEmail');
        return this.order$.pipe(filter((order) => !!order), withLatestFrom(confirmationOfOrderMessage$, thankYouMessage$, invoiceHasBeenSentByEmailMessage$));
    }
}
OrderConfirmationThankYouMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderConfirmationThankYouMessageComponent, deps: [{ token: i1.OrderFacade }, { token: i2.GlobalMessageService }, { token: i2.TranslationService }], target: i0.ɵɵFactoryTarget.Component });
OrderConfirmationThankYouMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: OrderConfirmationThankYouMessageComponent, selector: "cx-order-confirmation-thank-you-message", ngImport: i0, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"cx-page-header\">\n    <span class=\"cx-page-title\">\n      {{ 'checkoutOrderConfirmation.confirmationOfOrder' | cxTranslate }}\n      {{ order.replenishmentOrderCode ?? order.code }}\n    </span>\n  </div>\n\n  <div class=\"cx-order-confirmation-message\">\n    <h2>{{ 'checkoutOrderConfirmation.thankYou' | cxTranslate }}</h2>\n    <p>\n      {{ 'checkoutOrderConfirmation.invoiceHasBeenSentByEmail' | cxTranslate }}\n    </p>\n  </div>\n\n  <div *ngIf=\"isGuestCustomer\">\n    <cx-guest-register-form\n      [guid]=\"orderGuid\"\n      [email]=\"order.paymentInfo.billingAddress.email\"\n    ></cx-guest-register-form>\n  </div>\n\n  <cx-add-to-home-screen-banner></cx-add-to-home-screen-banner>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.AddToHomeScreenBannerComponent, selector: "cx-add-to-home-screen-banner" }, { kind: "component", type: i5.OrderGuestRegisterFormComponent, selector: "cx-guest-register-form", inputs: ["guid", "email"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: OrderConfirmationThankYouMessageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-order-confirmation-thank-you-message', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"cx-page-header\">\n    <span class=\"cx-page-title\">\n      {{ 'checkoutOrderConfirmation.confirmationOfOrder' | cxTranslate }}\n      {{ order.replenishmentOrderCode ?? order.code }}\n    </span>\n  </div>\n\n  <div class=\"cx-order-confirmation-message\">\n    <h2>{{ 'checkoutOrderConfirmation.thankYou' | cxTranslate }}</h2>\n    <p>\n      {{ 'checkoutOrderConfirmation.invoiceHasBeenSentByEmail' | cxTranslate }}\n    </p>\n  </div>\n\n  <div *ngIf=\"isGuestCustomer\">\n    <cx-guest-register-form\n      [guid]=\"orderGuid\"\n      [email]=\"order.paymentInfo.billingAddress.email\"\n    ></cx-guest-register-form>\n  </div>\n\n  <cx-add-to-home-screen-banner></cx-add-to-home-screen-banner>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.OrderFacade }, { type: i2.GlobalMessageService }, { type: i2.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,