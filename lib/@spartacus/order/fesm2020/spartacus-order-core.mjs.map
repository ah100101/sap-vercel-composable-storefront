{"version":3,"file":"spartacus-order-core.mjs","sources":["../../../feature-libs/order/core/connectors/order-history.adapter.ts","../../../feature-libs/order/core/connectors/order-history.connector.ts","../../../feature-libs/order/core/connectors/order.adapter.ts","../../../feature-libs/order/core/connectors/order.connector.ts","../../../feature-libs/order/core/connectors/reorder-order.adapter.ts","../../../feature-libs/order/core/connectors/reorder-order.connector.ts","../../../feature-libs/order/core/connectors/replenishment-order-history.adapter.ts","../../../feature-libs/order/core/connectors/replenishment-order-history.connector.ts","../../../feature-libs/order/core/connectors/scheduled-replenishment-order.adapter.ts","../../../feature-libs/order/core/connectors/scheduled-replenishment-order.connector.ts","../../../feature-libs/order/core/connectors/index.ts","../../../feature-libs/order/core/store/actions/consignment-tracking.action.ts","../../../feature-libs/order/core/store/order-state.ts","../../../feature-libs/order/core/store/actions/order-details.action.ts","../../../feature-libs/order/core/store/actions/order-return-request.action.ts","../../../feature-libs/order/core/store/actions/orders.action.ts","../../../feature-libs/order/core/store/actions/replenishment-order-details.action.ts","../../../feature-libs/order/core/store/actions/replenishment-orders.action.ts","../../../feature-libs/order/core/store/actions/order-group.actions.ts","../../../feature-libs/order/core/store/actions/index.ts","../../../feature-libs/order/core/store/selectors/feature.selector.ts","../../../feature-libs/order/core/store/selectors/consignment-tracking.selectors.ts","../../../feature-libs/order/core/store/selectors/order-details.selectors.ts","../../../feature-libs/order/core/store/selectors/order-return-request.selectors.ts","../../../feature-libs/order/core/store/selectors/orders.selectors.ts","../../../feature-libs/order/core/store/selectors/replenishment-order-details.selectors.ts","../../../feature-libs/order/core/store/selectors/replenishment-orders.selectors.ts","../../../feature-libs/order/core/store/selectors/order-group.selectors.ts","../../../feature-libs/order/core/store/selectors/index.ts","../../../feature-libs/order/core/facade/order-history.service.ts","../../../feature-libs/order/core/facade/order-return-request.service.ts","../../../feature-libs/order/core/facade/order.service.ts","../../../feature-libs/order/core/facade/reorder-order.service.ts","../../../feature-libs/order/core/facade/replenishment-order-history.service.ts","../../../feature-libs/order/core/facade/scheduled-replenishment-order.service.ts","../../../feature-libs/order/core/facade/index.ts","../../../feature-libs/order/core/facade/facade-providers.ts","../../../feature-libs/order/core/store/effects/consignment-tracking.effect.ts","../../../feature-libs/order/core/store/effects/order-details.effect.ts","../../../feature-libs/order/core/store/effects/order-return-request.effect.ts","../../../feature-libs/order/core/store/effects/orders.effect.ts","../../../feature-libs/order/core/store/effects/replenishment-order-details.effect.ts","../../../feature-libs/order/core/store/effects/replenishment-orders.effect.ts","../../../feature-libs/order/core/store/effects/index.ts","../../../feature-libs/order/core/store/reducers/consignment-tracking.reducer.ts","../../../feature-libs/order/core/store/reducers/order-details.reducer.ts","../../../feature-libs/order/core/store/reducers/order-return-request.reducer.ts","../../../feature-libs/order/core/store/reducers/orders.reducer.ts","../../../feature-libs/order/core/store/reducers/replenishment-order-details.reducer.ts","../../../feature-libs/order/core/store/reducers/replenishment-orders.reducer.ts","../../../feature-libs/order/core/store/reducers/index.ts","../../../feature-libs/order/core/store/order-store.module.ts","../../../feature-libs/order/core/order-core.module.ts","../../../feature-libs/order/core/public_api.ts","../../../feature-libs/order/core/spartacus-order-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  CancellationRequestEntryInputList,\n  ConsignmentTracking,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class OrderHistoryAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  CancellationRequestEntryInputList,\n  ConsignmentTracking,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { OrderHistoryAdapter } from './order-history.adapter';\n\n@Injectable()\nexport class OrderHistoryConnector {\n  constructor(protected adapter: OrderHistoryAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Order } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class OrderAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   * @param termsChecked The `boolean value` whether the terms were accepted or not\n   */\n  abstract placeOrder(\n    userId: string,\n    cartId: string,\n    termsChecked: boolean\n  ): Observable<Order>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Order } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { OrderAdapter } from './order.adapter';\n\n@Injectable()\nexport class OrderConnector {\n  constructor(protected adapter: OrderAdapter) {}\n\n  public placeOrder(\n    userId: string,\n    cartId: string,\n    termsChecked: boolean\n  ): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId, termsChecked);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CartModificationList } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class ReorderOrderAdapter {\n  /**\n   * Abstract method used to reorder an order.\n   *\n   * @param orderId The `orderId` of an existing order to update the cart\n   * @param userId The `userId` for given user\n   */\n  abstract reorder(\n    orderId: string,\n    userId: string\n  ): Observable<CartModificationList>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReorderOrderAdapter } from './reorder-order.adapter';\nimport { CartModificationList } from '@spartacus/cart/base/root';\n\n@Injectable()\nexport class ReorderOrderConnector {\n  constructor(protected adapter: ReorderOrderAdapter) {}\n\n  public reorder(\n    orderId: string,\n    userId: string\n  ): Observable<CartModificationList> {\n    return this.adapter.reorder(orderId, userId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class ReplenishmentOrderHistoryAdapter {\n  /**\n   * Abstract method used to load replenishment order details.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   */\n  abstract load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder>;\n\n  /**\n   * Abstract method used to load order history from a replenishment order.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   * @param pageSize The `pageSize` to display number of data as order history\n   * @param currentPage The `currentPage` of the order history list\n   * @param sort The `sort` for a sorting method\n   */\n  abstract loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to cancel a replenishment order.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   */\n  abstract cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder>;\n\n  /**\n   * Abstract method used to load replenishment order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { ReplenishmentOrderHistoryAdapter } from './replenishment-order-history.adapter';\n@Injectable()\nexport class ReplenishmentOrderHistoryConnector {\n  constructor(protected adapter: ReplenishmentOrderHistoryAdapter) {}\n\n  public load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.load(userId, replenishmentOrderCode);\n  }\n\n  public loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadReplenishmentDetailsHistory(\n      userId,\n      replenishmentOrderCode,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.cancelReplenishmentOrder(\n      userId,\n      replenishmentOrderCode\n    );\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class ScheduledReplenishmentOrderAdapter {\n  /**\n   * Abstract method used to schedule a replenishment order.\n   *\n   * @param cartId The `cartId` for cart used for scheduling a replenishment order\n   * @param scheduleReplenishmentForm The `object` that contains the form data for replenishment\n   * @param termsChecked The `boolean value` whether the terms were accepted or not\n   * @param userId The `userId` for given user\n   */\n  abstract scheduleReplenishmentOrder(\n    cartId: string,\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean,\n    userId: string\n  ): Observable<ReplenishmentOrder>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { ScheduledReplenishmentOrderAdapter } from './scheduled-replenishment-order.adapter';\n\n@Injectable()\nexport class ScheduledReplenishmentOrderConnector {\n  constructor(protected adapter: ScheduledReplenishmentOrderAdapter) {}\n\n  public scheduleReplenishmentOrder(\n    cartId: string,\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean,\n    userId: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.scheduleReplenishmentOrder(\n      cartId,\n      scheduleReplenishmentForm,\n      termsChecked,\n      userId\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './order-history.adapter';\nexport * from './order-history.connector';\nexport * from './order.adapter';\nexport * from './order.connector';\nexport * from './reorder-order.adapter';\nexport * from './reorder-order.connector';\nexport * from './replenishment-order-history.adapter';\nexport * from './replenishment-order-history.connector';\nexport * from './scheduled-replenishment-order.adapter';\nexport * from './scheduled-replenishment-order.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '@spartacus/order/root';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[Order] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[Order] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[Order] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[Order] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {\n    // Intentional empty constructor\n  }\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StateUtils } from '@spartacus/core';\nimport {\n  ConsignmentTracking,\n  Order,\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '@spartacus/order/root';\nexport const ORDER_FEATURE = 'order';\n\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\nexport const CANCEL_REPLENISHMENT_ORDER_PROCESS_ID = 'cancelReplenishmentOrder';\nexport const ORDERS = '[Order] User Orders';\nexport const RETURN_REQUESTS = '[Order] Order Return Requests';\nexport const RETURN_REQUEST_DETAILS = '[Order] Return Request Details';\nexport const ORDER_DETAILS = '[Order] User Order Details';\nexport const REPLENISHMENT_ORDERS = '[Order] User Replenishment Orders';\nexport const REPLENISHMENT_ORDER_DETAILS =\n  '[Order] User Replenishment Order Details';\n\nexport interface StateWithOrder {\n  [ORDER_FEATURE]: OrderState;\n}\n\nexport interface OrderState {\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  orderDetail: StateUtils.LoaderState<Order>;\n  replenishmentOrders: StateUtils.LoaderState<ReplenishmentOrderList>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  consignmentTracking: ConsignmentTrackingState;\n  replenishmentOrder: StateUtils.LoaderState<ReplenishmentOrder>;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking: ConsignmentTracking;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PROCESS_FEATURE, StateUtils } from '@spartacus/core';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n} from '@spartacus/order/root';\nimport { CANCEL_ORDER_PROCESS_ID, ORDER_DETAILS } from '../order-state';\n\nexport const LOAD_ORDER_DETAILS = '[Order] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[Order] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[Order] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[Order] Clear Order Details';\n\nexport const CANCEL_ORDER = '[Order] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[Order] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[Order] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[Order] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PROCESS_FEATURE, StateUtils } from '@spartacus/core';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '@spartacus/order/root';\nimport {\n  CANCEL_RETURN_PROCESS_ID,\n  RETURN_REQUESTS,\n  RETURN_REQUEST_DETAILS,\n} from '../order-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST =\n  '[Order] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[Order] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[Order] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[Order] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[Order] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[Order] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST =\n  '[Order] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[Order] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[Order] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[Order] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[Order] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[Order] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[Order] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[Order] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[Order] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends StateUtils.LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends StateUtils.LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StateUtils } from '@spartacus/core';\nimport { OrderHistoryList } from '@spartacus/order/root';\nimport { ORDERS } from '../order-state';\n\nexport const LOAD_USER_ORDERS = '[Order] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[Order] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[Order] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[Order] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      replenishmentOrderCode?: string;\n    }\n  ) {\n    super(ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PROCESS_FEATURE, StateUtils } from '@spartacus/core';\nimport { ReplenishmentOrder } from '@spartacus/order/root';\nimport {\n  CANCEL_REPLENISHMENT_ORDER_PROCESS_ID,\n  REPLENISHMENT_ORDER_DETAILS,\n} from '../order-state';\n\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS =\n  '[Order] Load Replenishment Order Details';\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS =\n  '[Order] Load Replenishment Order Details Success';\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL =\n  '[Order] Load Replenishment Order Details Fail';\nexport const ClEAR_REPLENISHMENT_ORDER_DETAILS =\n  '[Order] Clear Replenishment Order Details';\n\nexport const CANCEL_REPLENISHMENT_ORDER = '[Order] Cancel Replenishment Order';\nexport const CANCEL_REPLENISHMENT_ORDER_SUCCESS =\n  '[Order] Cancel Replenishment Order Success';\nexport const CANCEL_REPLENISHMENT_ORDER_FAIL =\n  '[Order] Cancel Replenishment Order Fail';\nexport const CLEAR_CANCEL_REPLENISHMENT_ORDER =\n  '[Order] Clear Cancel Replenishment Order';\n\nexport class LoadReplenishmentOrderDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      replenishmentOrderCode: string;\n    }\n  ) {\n    super(REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class LoadReplenishmentOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class LoadReplenishmentOrderDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(REPLENISHMENT_ORDER_DETAILS, payload);\n  }\n}\n\nexport class ClearReplenishmentOrderDetails extends StateUtils.LoaderResetAction {\n  readonly type = ClEAR_REPLENISHMENT_ORDER_DETAILS;\n  constructor() {\n    super(REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class CancelReplenishmentOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      replenishmentOrderCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelReplenishmentOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class ClearCancelReplenishmentOrder extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_CANCEL_REPLENISHMENT_ORDER;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport type ReplenishmentOrderDetailsAction =\n  | LoadReplenishmentOrderDetails\n  | LoadReplenishmentOrderDetailsSuccess\n  | LoadReplenishmentOrderDetailsFail\n  | ClearReplenishmentOrderDetails\n  | CancelReplenishmentOrder\n  | CancelReplenishmentOrderSuccess\n  | CancelReplenishmentOrderFail\n  | ClearCancelReplenishmentOrder;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StateUtils } from '@spartacus/core';\nimport { ReplenishmentOrderList } from '@spartacus/order/root';\nimport { REPLENISHMENT_ORDERS } from '../order-state';\n\nexport const LOAD_USER_REPLENISHMENT_ORDERS =\n  '[Order] Load User Replenishment Orders';\nexport const LOAD_USER_REPLENISHMENT_ORDERS_FAIL =\n  '[Order] Load User Replenishment Orders Fail';\nexport const LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS =\n  '[Order] Load User Replenishment Orders Success';\nexport const CLEAR_USER_REPLENISHMENT_ORDERS =\n  '[Order] Clear User Replenishment Orders';\n\nexport class LoadUserReplenishmentOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(REPLENISHMENT_ORDERS);\n  }\n}\n\nexport class LoadUserReplenishmentOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(REPLENISHMENT_ORDERS, payload);\n  }\n}\n\nexport class LoadUserReplenishmentOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;\n  constructor(public payload: ReplenishmentOrderList) {\n    super(REPLENISHMENT_ORDERS);\n  }\n}\n\nexport class ClearUserReplenishmentOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_REPLENISHMENT_ORDERS;\n  constructor() {\n    super(REPLENISHMENT_ORDERS);\n  }\n}\n\nexport type UserReplenishmentOrdersAction =\n  | LoadUserReplenishmentOrders\n  | LoadUserReplenishmentOrdersFail\n  | LoadUserReplenishmentOrdersSuccess\n  | ClearUserReplenishmentOrders;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './consignment-tracking.action';\nexport * from './order-details.action';\nexport * from './order-return-request.action';\nexport * from './orders.action';\nexport * from './replenishment-order-details.action';\nexport * from './replenishment-orders.action';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as OrderActions from './order-group.actions';\nexport { OrderActions };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderState, ORDER_FEATURE, StateWithOrder } from '../order-state';\n\nexport const getOrderState: MemoizedSelector<StateWithOrder, OrderState> =\n  createFeatureSelector<OrderState>(ORDER_FEATURE);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport {\n  ConsignmentTrackingState,\n  OrderState,\n  StateWithOrder,\n} from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithOrder,\n  ConsignmentTrackingState\n> = createSelector(\n  getOrderState,\n  (state: OrderState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithOrder,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { Order } from '@spartacus/order/root';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getOrderDetailState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<Order>\n> = createSelector(getOrderState, (state: OrderState) => state.orderDetail);\n\nexport const getOrderDetails: MemoizedSelector<StateWithOrder, Order> =\n  createSelector(getOrderDetailState, (state: StateUtils.LoaderState<Order>) =>\n    StateUtils.loaderValueSelector(state)\n  );\n\nexport const getOrderDetailsLoading: MemoizedSelector<StateWithOrder, boolean> =\n  createSelector(getOrderDetailState, (state: StateUtils.LoaderState<Order>) =>\n    StateUtils.loaderLoadingSelector(state)\n  );\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { ReturnRequest, ReturnRequestList } from '@spartacus/order/root';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReturnRequest>\n> = createSelector(getOrderState, (state: OrderState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithOrder,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: StateUtils.LoaderState<ReturnRequest>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: StateUtils.LoaderState<ReturnRequest>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: StateUtils.LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReturnRequestList>\n> = createSelector(getOrderState, (state: OrderState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithOrder,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: StateUtils.LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { OrderHistoryList } from '@spartacus/order/root';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<OrderHistoryList>\n> = createSelector(getOrderState, (state: OrderState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<StateWithOrder, boolean> =\n  createSelector(\n    getOrdersState,\n    (state: StateUtils.LoaderState<OrderHistoryList>) =>\n      StateUtils.loaderSuccessSelector(state)\n  );\n\nexport const getOrders: MemoizedSelector<StateWithOrder, OrderHistoryList> =\n  createSelector(\n    getOrdersState,\n    (state: StateUtils.LoaderState<OrderHistoryList>) =>\n      StateUtils.loaderValueSelector(state)\n  );\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { ReplenishmentOrder } from '@spartacus/order/root';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getReplenishmentOrderState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReplenishmentOrder>\n> = createSelector(\n  getOrderState,\n  (state: OrderState) => state.replenishmentOrder\n);\n\nexport const getReplenishmentOrderDetailsValue: MemoizedSelector<\n  StateWithOrder,\n  ReplenishmentOrder\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsLoading: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsSuccess: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsError: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { ReplenishmentOrderList } from '@spartacus/order/root';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getReplenishmentOrdersState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReplenishmentOrderList>\n> = createSelector(\n  getOrderState,\n  (state: OrderState) => state.replenishmentOrders\n);\n\nexport const getReplenishmentOrders: MemoizedSelector<\n  StateWithOrder,\n  ReplenishmentOrderList\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getReplenishmentOrdersLoading: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getReplenishmentOrdersError: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n\nexport const getReplenishmentOrdersSuccess: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderSuccessSelector(state)\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './consignment-tracking.selectors';\nexport * from './feature.selector';\nexport * from './order-details.selectors';\nexport * from './order-return-request.selectors';\nexport * from './orders.selectors';\nexport * from './replenishment-order-details.selectors';\nexport * from './replenishment-orders.selectors';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as OrderSelectors from './order-group.selectors';\nexport { OrderSelectors };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  ProcessSelectors,\n  RoutingService,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport {\n  CancellationRequestEntryInputList,\n  ConsignmentTracking,\n  Order,\n  OrderHistoryFacade,\n  OrderHistoryList,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { OrderActions } from '../store/actions/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithOrder } from '../store/order-state';\nimport { OrderSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class OrderHistoryService implements OrderHistoryFacade {\n  constructor(\n    protected store: Store<StateWithOrder>,\n    protected processStateStore: Store<StateWithProcess<void>>,\n    protected userIdService: UserIdService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(OrderSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new OrderActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(\n    pageSize: number\n  ): Observable<OrderHistoryList | undefined> {\n    return this.store.pipe(\n      select(OrderSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        let replenishmentOrderCode: string | undefined;\n\n        this.routingService\n          .getRouterState()\n          .pipe(take(1))\n          .subscribe((data) => {\n            replenishmentOrderCode =\n              data?.state?.params?.replenishmentOrderCode;\n          })\n          .unsubscribe();\n\n        this.store.dispatch(\n          new OrderActions.LoadUserOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n            replenishmentOrderCode,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new OrderActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(OrderSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new OrderActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(ProcessSelectors.getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(ProcessSelectors.getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new OrderActions.ResetCancelOrderProcess());\n  }\n\n  /**\n   * Returns the order details loading flag\n   */\n  getOrderDetailsLoading(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrderDetailsLoading));\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  ProcessSelectors,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport {\n  OrderReturnRequestFacade,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { OrderActions } from '../store/actions/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithOrder } from '../store/order-state';\nimport { OrderSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class OrderReturnRequestService implements OrderReturnRequestFacade {\n  constructor(\n    protected store: Store<StateWithOrder>,\n    protected processStateStore: Store<StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(OrderSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(\n    pageSize: number\n  ): Observable<ReturnRequestList | undefined> {\n    return this.store.pipe(\n      select(OrderSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.LoadOrderReturnRequestList({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new OrderActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new OrderActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new OrderActions.ResetCancelReturnProcess());\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade, OrderEntry } from '@spartacus/cart/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  UserIdService,\n} from '@spartacus/core';\nimport { Order, OrderFacade, OrderPlacedEvent } from '@spartacus/order/root';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { OrderConnector } from '../connectors/order.connector';\n\n@Injectable()\nexport class OrderService implements OrderFacade {\n  protected placedOrder$ = new BehaviorSubject<Order | undefined>(undefined);\n\n  protected placeOrderCommand: Command<boolean, Order> =\n    this.commandService.create<boolean, Order>(\n      (payload) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.orderConnector.placeOrder(userId, cartId, payload).pipe(\n              tap((order) => {\n                this.placedOrder$.next(order);\n                this.eventService.dispatch(\n                  {\n                    userId,\n                    cartId,\n                    /**\n                     * As we know the cart is not anonymous (precondition checked),\n                     * we can safely use the cartId, which is actually the cart.code.\n                     */\n                    cartCode: cartId,\n                    order,\n                  },\n                  OrderPlacedEvent\n                );\n              })\n            )\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected commandService: CommandService,\n    protected orderConnector: OrderConnector,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Performs the necessary checkout preconditions.\n   */\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  placeOrder(termsChecked: boolean): Observable<Order> {\n    return this.placeOrderCommand.execute(termsChecked);\n  }\n\n  getOrderDetails(): Observable<Order | undefined> {\n    return this.placedOrder$.asObservable();\n  }\n\n  clearPlacedOrder(): void {\n    this.placedOrder$.next(undefined);\n  }\n\n  setPlacedOrder(order: Order): void {\n    this.placedOrder$.next(order);\n  }\n\n  getPickupEntries(): Observable<OrderEntry[]> {\n    return this.getOrderDetails().pipe(\n      map(\n        (order) =>\n          order?.entries?.filter(\n            (entry) => entry.deliveryPointOfService !== undefined\n          ) || []\n      )\n    );\n  }\n\n  getDeliveryEntries(): Observable<OrderEntry[]> {\n    return this.getOrderDetails().pipe(\n      map(\n        (order) =>\n          order?.entries?.filter(\n            (entry) => entry.deliveryPointOfService === undefined\n          ) || []\n      )\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  ActiveCartFacade,\n  CartModificationList,\n  MultiCartFacade,\n} from '@spartacus/cart/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  UserIdService,\n} from '@spartacus/core';\nimport { ReorderOrderFacade } from '@spartacus/order/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { ReorderOrderConnector } from '../connectors/reorder-order.connector';\n\n@Injectable()\nexport class ReorderOrderService implements ReorderOrderFacade {\n  protected reorderCommand: Command<{ orderId: string }, CartModificationList> =\n    this.commandService.create<{ orderId: string }, CartModificationList>(\n      ({ orderId }) =>\n        this.reorderPreconditions().pipe(\n          switchMap((userId: string) =>\n            this.reorderOrderConnector.reorder(orderId, userId)\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected commandService: CommandService,\n    protected reorderOrderConnector: ReorderOrderConnector,\n    protected userIdService: UserIdService,\n    protected activeCartFacade: ActiveCartFacade,\n    protected multiCartFacade: MultiCartFacade\n  ) {}\n\n  /**\n   * Create cart from an existing order\n   */\n  reorder(orderId: string): Observable<CartModificationList> {\n    return this.reorderCommand.execute({\n      orderId,\n    });\n  }\n\n  protected reorderPreconditions(): Observable<string> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.getActiveCartId(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId]) => {\n        if (!userId) {\n          throw new Error('Must be logged in to reorder');\n        }\n\n        if (cartId) {\n          this.multiCartFacade.deleteCart(cartId, userId);\n        }\n\n        return userId;\n      })\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  ProcessSelectors,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport {\n  ReplenishmentOrder,\n  ReplenishmentOrderHistoryFacade,\n  ReplenishmentOrderList,\n} from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { OrderActions } from '../store/actions/index';\nimport {\n  CANCEL_REPLENISHMENT_ORDER_PROCESS_ID,\n  StateWithOrder,\n} from '../store/order-state';\nimport { OrderSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ReplenishmentOrderHistoryService\n  implements ReplenishmentOrderHistoryFacade\n{\n  constructor(\n    protected store: Store<StateWithOrder>,\n    protected processStateStore: Store<StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns replenishment order details for a given 'current' user\n   *\n   * @param replenishmentOrderCode a replenishment order code\n   */\n  loadReplenishmentOrderDetails(replenishmentOrderCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.LoadReplenishmentOrderDetails({\n            userId,\n            replenishmentOrderCode,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Returns a replenishment order details\n   */\n  getReplenishmentOrderDetails(): Observable<ReplenishmentOrder> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsValue)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details loading flag\n   */\n  getReplenishmentOrderDetailsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsLoading)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details success flag\n   */\n  getReplenishmentOrderDetailsSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsSuccess)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details error flag\n   */\n  getReplenishmentOrderDetailsError(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsError)\n    );\n  }\n\n  /**\n   * Clears the replenishment orders details state\n   */\n  clearReplenishmentOrderDetails(): void {\n    this.store.dispatch(new OrderActions.ClearReplenishmentOrderDetails());\n  }\n\n  /**\n   * Cancels a specific replenishment order for a given 'current' user\n   *\n   * @param replenishmentOrderCode a replenishment order code\n   */\n  cancelReplenishmentOrder(replenishmentOrderCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.CancelReplenishmentOrder({\n            userId,\n            replenishmentOrderCode,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order loading flag\n   */\n  getCancelReplenishmentOrderLoading(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          CANCEL_REPLENISHMENT_ORDER_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order success flag\n   */\n  getCancelReplenishmentOrderSuccess(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          CANCEL_REPLENISHMENT_ORDER_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order error flag\n   */\n  getCancelReplenishmentOrderError(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          CANCEL_REPLENISHMENT_ORDER_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Clears the cancel replenishment order processing state\n   */\n  clearCancelReplenishmentOrderProcessState(): void {\n    this.store.dispatch(new OrderActions.ClearCancelReplenishmentOrder());\n  }\n\n  /**\n   * Returns replenishment order history list\n   */\n  getReplenishmentOrderHistoryList(\n    pageSize: number\n  ): Observable<ReplenishmentOrderList | undefined> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrdersState),\n      tap((replenishmentOrderListState) => {\n        const attemptedLoad =\n          replenishmentOrderListState.loading ||\n          replenishmentOrderListState.success ||\n          replenishmentOrderListState.error;\n        if (!attemptedLoad) {\n          this.loadReplenishmentOrderList(pageSize);\n        }\n      }),\n      map((replenishmentOrderListState) => replenishmentOrderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrdersLoading)\n    );\n  }\n\n  /**\n   * Returns a error flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListError(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getReplenishmentOrdersError));\n  }\n\n  /**\n   * Returns a success flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrdersSuccess)\n    );\n  }\n\n  /**\n   * Retrieves a replenishment order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadReplenishmentOrderList(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.LoadUserReplenishmentOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Cleaning replenishment order list\n   */\n  clearReplenishmentOrderList(): void {\n    this.store.dispatch(new OrderActions.ClearUserReplenishmentOrders());\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  UserIdService,\n} from '@spartacus/core';\nimport {\n  OrderFacade,\n  ReplenishmentOrder,\n  ReplenishmentOrderScheduledEvent,\n  ScheduledReplenishmentOrderFacade,\n  ScheduleReplenishmentForm,\n} from '@spartacus/order/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { ScheduledReplenishmentOrderConnector } from '../connectors/scheduled-replenishment-order.connector';\n\n@Injectable()\nexport class ScheduledReplenishmentOrderService\n  implements ScheduledReplenishmentOrderFacade\n{\n  protected scheduleReplenishmentOrderCommand: Command<\n    { termsChecked: boolean; form: ScheduleReplenishmentForm },\n    ReplenishmentOrder\n  > = this.commandService.create<\n    { termsChecked: boolean; form: ScheduleReplenishmentForm },\n    ReplenishmentOrder\n  >(\n    ({ form, termsChecked }) =>\n      this.checkoutPreconditions().pipe(\n        switchMap(([userId, cartId]) =>\n          this.scheduledReplenishmentOrderConnector\n            .scheduleReplenishmentOrder(cartId, form, termsChecked, userId)\n            .pipe(\n              tap((replenishmentOrder) => {\n                this.orderFacade.setPlacedOrder(replenishmentOrder);\n\n                this.eventService.dispatch(\n                  {\n                    userId,\n                    cartId,\n                    /**\n                     * As we know the cart is not anonymous (precondition checked),\n                     * we can safely use the cartId, which is actually the cart.code.\n                     */\n                    cartCode: cartId,\n                    replenishmentOrder,\n                  },\n                  ReplenishmentOrderScheduledEvent\n                );\n              })\n            )\n        )\n      ),\n    {\n      strategy: CommandStrategy.CancelPrevious,\n    }\n  );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected commandService: CommandService,\n    protected scheduledReplenishmentOrderConnector: ScheduledReplenishmentOrderConnector,\n    protected eventService: EventService,\n    protected orderFacade: OrderFacade\n  ) {}\n\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Order conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  /**\n   * Schedule a replenishment order\n   */\n  scheduleReplenishmentOrder(\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean\n  ): Observable<ReplenishmentOrder> {\n    return this.scheduleReplenishmentOrderCommand.execute({\n      termsChecked,\n      form: scheduleReplenishmentForm,\n    });\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './order-history.service';\nexport * from './order-return-request.service';\nexport * from './order.service';\nexport * from './reorder-order.service';\nexport * from './replenishment-order-history.service';\nexport * from './scheduled-replenishment-order.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport {\n  OrderFacade,\n  OrderHistoryFacade,\n  OrderReturnRequestFacade,\n  ReorderOrderFacade,\n  ReplenishmentOrderHistoryFacade,\n  ScheduledReplenishmentOrderFacade,\n} from '@spartacus/order/root';\nimport { OrderHistoryService } from './order-history.service';\nimport { OrderReturnRequestService } from './order-return-request.service';\nimport { OrderService } from './order.service';\nimport { ReorderOrderService } from './reorder-order.service';\nimport { ReplenishmentOrderHistoryService } from './replenishment-order-history.service';\nimport { ScheduledReplenishmentOrderService } from './scheduled-replenishment-order.service';\n\nexport const facadeProviders: Provider[] = [\n  OrderReturnRequestService,\n  {\n    provide: OrderReturnRequestFacade,\n    useExisting: OrderReturnRequestService,\n  },\n  OrderHistoryService,\n  {\n    provide: OrderHistoryFacade,\n    useExisting: OrderHistoryService,\n  },\n  ReplenishmentOrderHistoryService,\n  {\n    provide: ReplenishmentOrderHistoryFacade,\n    useExisting: ReplenishmentOrderHistoryService,\n  },\n  ScheduledReplenishmentOrderService,\n  {\n    provide: ScheduledReplenishmentOrderFacade,\n    useExisting: ScheduledReplenishmentOrderService,\n  },\n  OrderService,\n  {\n    provide: OrderFacade,\n    useExisting: OrderService,\n  },\n  ReorderOrderService,\n  {\n    provide: ReorderOrderFacade,\n    useExisting: ReorderOrderService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryConnector } from '../../connectors/order-history.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  loadConsignmentTracking$: Observable<OrderActions.ConsignmentTrackingAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_CONSIGNMENT_TRACKING),\n        map((action: OrderActions.LoadConsignmentTracking) => action.payload),\n        switchMap((payload) => {\n          return this.orderConnector\n            .getConsignmentTracking(\n              payload.orderCode,\n              payload.consignmentCode,\n              payload.userId\n            )\n            .pipe(\n              map(\n                (tracking: ConsignmentTracking) =>\n                  new OrderActions.LoadConsignmentTrackingSuccess(tracking)\n              ),\n              catchError((error) =>\n                of(\n                  new OrderActions.LoadConsignmentTrackingFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderHistoryConnector\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n  SiteContextActions,\n  UserIdService,\n} from '@spartacus/core';\nimport { Order } from '@spartacus/order/root';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { OrderHistoryConnector } from '../../connectors/order-history.connector';\nimport { OrderActions } from '../actions/index';\nimport { StateWithOrder } from '../order-state';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  loadOrderDetails$: Observable<OrderActions.OrderDetailsAction> = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_ORDER_DETAILS),\n        map((action: OrderActions.LoadOrderDetails) => action.payload),\n        switchMap((payload) => {\n          return this.orderConnector\n            .get(payload.userId, payload.orderCode)\n            .pipe(\n              map((order: Order) => {\n                return new OrderActions.LoadOrderDetailsSuccess(order);\n              }),\n              catchError((error) =>\n                of(\n                  new OrderActions.LoadOrderDetailsFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n  );\n\n  cancelOrder$: Observable<OrderActions.OrderDetailsAction> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(OrderActions.CANCEL_ORDER),\n      map((action: OrderActions.CancelOrder) => action.payload),\n      switchMap((payload) => {\n        return this.orderConnector\n          .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n          .pipe(\n            map(() => new OrderActions.CancelOrderSuccess()),\n            catchError((error) => {\n              error.error?.errors.forEach((err: any) =>\n                this.globalMessageService.add(\n                  err.message,\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n\n              return of(\n                new OrderActions.CancelOrderFail(normalizeHttpError(error))\n              );\n            })\n          );\n      })\n    )\n  );\n\n  resetOrderDetails$: Observable<\n    OrderActions.LoadOrderDetailsSuccess | OrderActions.LoadOrderDetailsFail\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        SiteContextActions.LANGUAGE_CHANGE,\n        SiteContextActions.CURRENCY_CHANGE\n      ),\n      withLatestFrom(\n        this.userIdService.getUserId(),\n        this.store.pipe(\n          filter((store) => !!store.order?.orderDetail),\n          map((state) => state.order.orderDetail.value?.code)\n        )\n      ),\n      switchMap(([, userId, orderCode]) => {\n        if (orderCode) {\n          return this.orderConnector.get(userId, orderCode).pipe(\n            map((order: Order) => {\n              return new OrderActions.LoadOrderDetailsSuccess(order);\n            }),\n            catchError((error) =>\n              of(\n                new OrderActions.LoadOrderDetailsFail(normalizeHttpError(error))\n              )\n            )\n          );\n        }\n        return EMPTY;\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderHistoryConnector,\n    private globalMessageService: GlobalMessageService,\n    private userIdService: UserIdService,\n    private store: Store<StateWithOrder>\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { ReturnRequest, ReturnRequestList } from '@spartacus/order/root';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryConnector } from '../../connectors/order-history.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  createReturnRequest$: Observable<OrderActions.OrderReturnRequestAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.CREATE_ORDER_RETURN_REQUEST),\n        map((action: OrderActions.CreateOrderReturnRequest) => action.payload),\n        switchMap((payload) => {\n          return this.orderConnector\n            .return(payload.userId, payload.returnRequestInput)\n            .pipe(\n              map(\n                (returnRequest: ReturnRequest) =>\n                  new OrderActions.CreateOrderReturnRequestSuccess(\n                    returnRequest\n                  )\n              ),\n              catchError((error) =>\n                of(\n                  new OrderActions.CreateOrderReturnRequestFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  loadReturnRequest$: Observable<OrderActions.OrderReturnRequestAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_ORDER_RETURN_REQUEST),\n        map((action: OrderActions.LoadOrderReturnRequest) => action.payload),\n        switchMap((payload) => {\n          return this.orderConnector\n            .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n            .pipe(\n              map(\n                (returnRequest: ReturnRequest) =>\n                  new OrderActions.LoadOrderReturnRequestSuccess(returnRequest)\n              ),\n              catchError((error) =>\n                of(\n                  new OrderActions.LoadOrderReturnRequestFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  cancelReturnRequest$: Observable<OrderActions.OrderReturnRequestAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.CANCEL_ORDER_RETURN_REQUEST),\n        map((action: OrderActions.CancelOrderReturnRequest) => action.payload),\n        switchMap((payload) => {\n          return this.orderConnector\n            .cancelReturnRequest(\n              payload.userId,\n              payload.returnRequestCode,\n              payload.returnRequestModification\n            )\n            .pipe(\n              map(() => new OrderActions.CancelOrderReturnRequestSuccess()),\n              catchError((error) =>\n                of(\n                  new OrderActions.CancelOrderReturnRequestFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  loadReturnRequestList$: Observable<OrderActions.OrderReturnRequestAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n        map(\n          (action: OrderActions.LoadOrderReturnRequestList) => action.payload\n        ),\n        switchMap((payload) => {\n          return this.orderConnector\n            .getReturnRequestList(\n              payload.userId,\n              payload.pageSize,\n              payload.currentPage,\n              payload.sort\n            )\n            .pipe(\n              map(\n                (returnRequestList: ReturnRequestList) =>\n                  new OrderActions.LoadOrderReturnRequestListSuccess(\n                    returnRequestList\n                  )\n              ),\n              catchError((error) =>\n                of(\n                  new OrderActions.LoadOrderReturnRequestListFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderHistoryConnector\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError, SiteContextActions } from '@spartacus/core';\nimport { OrderHistoryList } from '@spartacus/order/root';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport {\n  OrderHistoryConnector,\n  ReplenishmentOrderHistoryConnector,\n} from '../../connectors/index';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class OrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderHistoryConnector,\n    private replenishmentOrderConnector: ReplenishmentOrderHistoryConnector\n  ) {}\n\n  loadUserOrders$: Observable<OrderActions.UserOrdersAction> = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_USER_ORDERS),\n        map((action: OrderActions.LoadUserOrders) => action.payload),\n        switchMap((payload) => {\n          return (\n            Boolean(payload.replenishmentOrderCode)\n              ? this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(\n                  payload.userId,\n                  payload.replenishmentOrderCode ?? '',\n                  payload.pageSize,\n                  payload.currentPage,\n                  payload.sort\n                )\n              : this.orderConnector.getHistory(\n                  payload.userId,\n                  payload.pageSize,\n                  payload.currentPage,\n                  payload.sort\n                )\n          ).pipe(\n            map((orders: OrderHistoryList) => {\n              return new OrderActions.LoadUserOrdersSuccess(orders);\n            }),\n            catchError((error) =>\n              of(new OrderActions.LoadUserOrdersFail(normalizeHttpError(error)))\n            )\n          );\n        })\n      )\n  );\n\n  resetUserOrders$: Observable<OrderActions.ClearUserOrders> = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SiteContextActions.LANGUAGE_CHANGE),\n        map(() => {\n          return new OrderActions.ClearUserOrders();\n        })\n      )\n  );\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n} from '@spartacus/core';\nimport { ReplenishmentOrder } from '@spartacus/order/root';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReplenishmentOrderHistoryConnector } from '../../connectors/replenishment-order-history.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class ReplenishmentOrderDetailsEffect {\n  loadReplenishmentOrderDetails$: Observable<OrderActions.ReplenishmentOrderDetailsAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS),\n        map(\n          (action: OrderActions.LoadReplenishmentOrderDetails) => action.payload\n        ),\n        switchMap((payload) => {\n          return this.replenishmentOrderConnector\n            .load(payload.userId, payload.replenishmentOrderCode)\n            .pipe(\n              map((replenishmentOrder: ReplenishmentOrder) => {\n                return new OrderActions.LoadReplenishmentOrderDetailsSuccess(\n                  replenishmentOrder\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new OrderActions.LoadReplenishmentOrderDetailsFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  cancelReplenishmentOrder$: Observable<OrderActions.ReplenishmentOrderDetailsAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.CANCEL_REPLENISHMENT_ORDER),\n        map((action: OrderActions.CancelReplenishmentOrder) => action.payload),\n        switchMap((payload) => {\n          return this.replenishmentOrderConnector\n            .cancelReplenishmentOrder(\n              payload.userId,\n              payload.replenishmentOrderCode\n            )\n            .pipe(\n              map(\n                (replenishmentOrder: ReplenishmentOrder) =>\n                  new OrderActions.CancelReplenishmentOrderSuccess(\n                    replenishmentOrder\n                  )\n              ),\n              catchError((error) => {\n                error?.error?.errors.forEach((err: any) =>\n                  this.globalMessageService.add(\n                    err.message,\n                    GlobalMessageType.MSG_TYPE_ERROR\n                  )\n                );\n\n                return of(\n                  new OrderActions.CancelReplenishmentOrderFail(\n                    normalizeHttpError(error)\n                  )\n                );\n              })\n            );\n        })\n      )\n    );\n\n  constructor(\n    private actions$: Actions,\n    private replenishmentOrderConnector: ReplenishmentOrderHistoryConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { ReplenishmentOrderList } from '@spartacus/order/root';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReplenishmentOrderHistoryConnector } from '../../connectors/replenishment-order-history.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class ReplenishmentOrdersEffect {\n  loadUserReplenishmentOrders$: Observable<OrderActions.UserReplenishmentOrdersAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(OrderActions.LOAD_USER_REPLENISHMENT_ORDERS),\n        map(\n          (action: OrderActions.LoadUserReplenishmentOrders) => action.payload\n        ),\n        switchMap((payload) => {\n          return this.replenishmentOrderConnector\n            .loadHistory(\n              payload.userId,\n              payload.pageSize,\n              payload.currentPage,\n              payload.sort\n            )\n            .pipe(\n              map((orders: ReplenishmentOrderList) => {\n                return new OrderActions.LoadUserReplenishmentOrdersSuccess(\n                  orders\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new OrderActions.LoadUserReplenishmentOrdersFail(\n                    normalizeHttpError(error)\n                  )\n                )\n              )\n            );\n        })\n      )\n    );\n\n  constructor(\n    private actions$: Actions,\n    private replenishmentOrderConnector: ReplenishmentOrderHistoryConnector\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { OrdersEffect } from './orders.effect';\nimport { ReplenishmentOrderDetailsEffect } from './replenishment-order-details.effect';\nimport { ReplenishmentOrdersEffect } from './replenishment-orders.effect';\n\nexport const effects: any[] = [\n  OrdersEffect,\n  OrderDetailsEffect,\n  ConsignmentTrackingEffects,\n  OrderReturnRequestEffect,\n  ReplenishmentOrderDetailsEffect,\n  ReplenishmentOrdersEffect,\n];\n\nexport * from './consignment-tracking.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './orders.effect';\nexport * from './replenishment-order-details.effect';\nexport * from './replenishment-orders.effect';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../order-state';\n\nexport const initialState: ConsignmentTrackingState = { tracking: {} };\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case OrderActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case OrderActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Order } from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case OrderActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ReturnRequestList } from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { OrderHistoryList } from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case OrderActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case OrderActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ReplenishmentOrder } from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: ReplenishmentOrder = {};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.ReplenishmentOrderDetailsAction\n): ReplenishmentOrder {\n  switch (action.type) {\n    case OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS:\n    case OrderActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: ReplenishmentOrderList = {\n  replenishmentOrders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | OrderActions.UserReplenishmentOrdersAction\n    | OrderActions.ReplenishmentOrderDetailsAction\n): ReplenishmentOrderList {\n  switch (action.type) {\n    case OrderActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case OrderActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {\n      const cancelledReplenishmentOrder = action.payload;\n      const userReplenishmentOrders = [...(state.replenishmentOrders ?? [])];\n\n      const index = userReplenishmentOrders.findIndex(\n        (replenishmentOrder: ReplenishmentOrder) =>\n          replenishmentOrder.replenishmentOrderCode ===\n          cancelledReplenishmentOrder.replenishmentOrderCode\n      );\n\n      if (index === -1) {\n        return initialState;\n      } else {\n        userReplenishmentOrders[index] = {\n          ...cancelledReplenishmentOrder,\n        };\n      }\n\n      return { ...state, replenishmentOrders: userReplenishmentOrders };\n    }\n  }\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport {\n  Order,\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '@spartacus/order/root';\nimport {\n  ORDERS,\n  OrderState,\n  ORDER_DETAILS,\n  REPLENISHMENT_ORDERS,\n  REPLENISHMENT_ORDER_DETAILS,\n  RETURN_REQUESTS,\n  RETURN_REQUEST_DETAILS,\n} from '../order-state';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\nimport * as fromUserOrdersReducer from './orders.reducer';\nimport * as fromReplenishmentOrderDetailsReducer from './replenishment-order-details.reducer';\nimport * as fromUserReplenishmentOrdersReducer from './replenishment-orders.reducer';\n\nexport function getReducers(): ActionReducerMap<OrderState, any> {\n  return {\n    orders: StateUtils.loaderReducer<OrderHistoryList, any>(\n      ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    orderDetail: StateUtils.loaderReducer<Order, any>(\n      ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    replenishmentOrders: StateUtils.loaderReducer<ReplenishmentOrderList, any>(\n      REPLENISHMENT_ORDERS,\n      fromUserReplenishmentOrdersReducer.reducer\n    ),\n    orderReturn: StateUtils.loaderReducer<ReturnRequest>(\n      RETURN_REQUEST_DETAILS\n    ),\n    orderReturnList: StateUtils.loaderReducer<ReturnRequestList, any>(\n      RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    replenishmentOrder: StateUtils.loaderReducer<ReplenishmentOrder, any>(\n      REPLENISHMENT_ORDER_DETAILS,\n      fromReplenishmentOrderDetailsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<OrderState>> =\n  new InjectionToken<ActionReducerMap<OrderState>>('OrderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { effects } from './effects/index';\nimport { ORDER_FEATURE } from './order-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    EffectsModule.forFeature(effects),\n    StoreModule.forFeature(ORDER_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class OrderStoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { OrderHistoryConnector } from './connectors/order-history.connector';\nimport { OrderConnector } from './connectors/order.connector';\nimport { ReorderOrderConnector } from './connectors/reorder-order.connector';\nimport { ReplenishmentOrderHistoryConnector } from './connectors/replenishment-order-history.connector';\nimport { ScheduledReplenishmentOrderConnector } from './connectors/scheduled-replenishment-order.connector';\nimport { facadeProviders } from './facade/facade-providers';\nimport { OrderStoreModule } from './store/order-store.module';\n\n@NgModule({\n  imports: [OrderStoreModule],\n  providers: [\n    ...facadeProviders,\n    OrderHistoryConnector,\n    ReplenishmentOrderHistoryConnector,\n    OrderConnector,\n    ScheduledReplenishmentOrderConnector,\n    ReorderOrderConnector,\n  ],\n})\nexport class OrderCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './connectors/index';\nexport * from './facade/index';\nexport * from './order-core.module';\nexport * from './store/actions/index';\nexport * from './store/order-state';\nexport * from './store/selectors/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.OrderHistoryAdapter","i1.OrderAdapter","i1.ReorderOrderAdapter","i1.ReplenishmentOrderHistoryAdapter","i1.ScheduledReplenishmentOrderAdapter","OrderSelectors.getOrderDetails","OrderActions.LoadOrderDetails","OrderActions.ClearOrderDetails","OrderSelectors.getOrdersState","OrderSelectors.getOrdersLoaded","OrderActions.LoadUserOrders","OrderActions.ClearUserOrders","OrderSelectors.getConsignmentTracking","OrderActions.LoadConsignmentTracking","OrderActions.ClearConsignmentTracking","OrderActions.CancelOrder","OrderActions.ResetCancelOrderProcess","OrderSelectors.getOrderDetailsLoading","OrderActions.CreateOrderReturnRequest","OrderSelectors.getOrderReturnRequest","OrderSelectors.getOrderReturnRequestListState","OrderActions.LoadOrderReturnRequest","OrderActions.LoadOrderReturnRequestList","OrderActions.ClearOrderReturnRequestList","OrderSelectors.getOrderReturnRequestLoading","OrderSelectors.getOrderReturnRequestSuccess","OrderActions.ClearOrderReturnRequest","OrderActions.CancelOrderReturnRequest","OrderActions.ResetCancelReturnProcess","i1","i3.OrderConnector","i2.ReorderOrderConnector","OrderActions.LoadReplenishmentOrderDetails","OrderSelectors.getReplenishmentOrderDetailsValue","OrderSelectors.getReplenishmentOrderDetailsLoading","OrderSelectors.getReplenishmentOrderDetailsSuccess","OrderSelectors.getReplenishmentOrderDetailsError","OrderActions.ClearReplenishmentOrderDetails","OrderActions.CancelReplenishmentOrder","OrderActions.ClearCancelReplenishmentOrder","OrderSelectors.getReplenishmentOrdersState","OrderSelectors.getReplenishmentOrdersLoading","OrderSelectors.getReplenishmentOrdersError","OrderSelectors.getReplenishmentOrdersSuccess","OrderActions.LoadUserReplenishmentOrders","OrderActions.ClearUserReplenishmentOrders","i3.ScheduledReplenishmentOrderConnector","OrderActions.LOAD_CONSIGNMENT_TRACKING","OrderActions.LoadConsignmentTrackingSuccess","OrderActions.LoadConsignmentTrackingFail","i2.OrderHistoryConnector","OrderActions.LOAD_ORDER_DETAILS","OrderActions.LoadOrderDetailsSuccess","OrderActions.LoadOrderDetailsFail","OrderActions.CANCEL_ORDER","OrderActions.CancelOrderSuccess","OrderActions.CancelOrderFail","i3","i4","OrderActions.CREATE_ORDER_RETURN_REQUEST","OrderActions.CreateOrderReturnRequestSuccess","OrderActions.CreateOrderReturnRequestFail","OrderActions.LOAD_ORDER_RETURN_REQUEST","OrderActions.LoadOrderReturnRequestSuccess","OrderActions.LoadOrderReturnRequestFail","OrderActions.CANCEL_ORDER_RETURN_REQUEST","OrderActions.CancelOrderReturnRequestSuccess","OrderActions.CancelOrderReturnRequestFail","OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST","OrderActions.LoadOrderReturnRequestListSuccess","OrderActions.LoadOrderReturnRequestListFail","OrderActions.LOAD_USER_ORDERS","OrderActions.LoadUserOrdersSuccess","OrderActions.LoadUserOrdersFail","i2.ReplenishmentOrderHistoryConnector","OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS","OrderActions.LoadReplenishmentOrderDetailsSuccess","OrderActions.LoadReplenishmentOrderDetailsFail","OrderActions.CANCEL_REPLENISHMENT_ORDER","OrderActions.CancelReplenishmentOrderSuccess","OrderActions.CancelReplenishmentOrderFail","OrderActions.LOAD_USER_REPLENISHMENT_ORDERS","OrderActions.LoadUserReplenishmentOrdersSuccess","OrderActions.LoadUserReplenishmentOrdersFail","initialState","reducer","OrderActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS","OrderActions.CLEAR_CONSIGNMENT_TRACKING","OrderActions.LOAD_ORDER_DETAILS_SUCCESS","OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS","OrderActions.LOAD_USER_ORDERS_SUCCESS","OrderActions.LOAD_USER_ORDERS_FAIL","OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS","OrderActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS","OrderActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromUserReplenishmentOrdersReducer.reducer","fromOrderReturnRequestReducer.reducer","fromConsignmentTrackingReducer.reducer","fromReplenishmentOrderDetailsReducer.reducer","i2"],"mappings":"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"}