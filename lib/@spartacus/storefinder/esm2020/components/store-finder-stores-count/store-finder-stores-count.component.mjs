/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefinder/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@spartacus/core";
export class StoreFinderStoresCountComponent {
    constructor(storeFinderService) {
        this.storeFinderService = storeFinderService;
    }
    ngOnInit() {
        this.storeFinderService.viewAllStores();
        this.locations$ = this.storeFinderService.getViewAllStoresEntities();
        this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();
    }
}
StoreFinderStoresCountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: StoreFinderStoresCountComponent, deps: [{ token: i1.StoreFinderService }], target: i0.ɵɵFactoryTarget.Component });
StoreFinderStoresCountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: StoreFinderStoresCountComponent, selector: "cx-store-finder-stores-count", ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    !(isLoading$ | async) && (locations$ | async) as locations;\n    else loading\n  \"\n>\n  <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n  <div class=\"cx-count container\">\n    <div class=\"row\" *ngIf=\"locations?.length\">\n      <div class=\"cx-visually-hidden\">\n        {{\n          'storeFinder.ariaLabelCountriesCount'\n            | cxTranslate: { count: locations?.length }\n        }}\n      </div>\n      <div\n        *ngFor=\"let country of locations\"\n        class=\"cx-set col-sm-6 col-md-4 col-lg-4 col-xl-3\"\n      >\n        <a\n          [routerLink]=\"['../country', country.isoCode]\"\n          class=\"btn-link\"\n          role=\"button\"\n          [attr.aria-label]=\"country.name + '(' + country.count + ')'\"\n        >\n          <h2 class=\"cx-title\" aria-hidden=\"true\">\n            <span\n              [ngClass]=\"\n                country?.storeCountDataList\n                  ? 'country-header'\n                  : 'country-header-link'\n              \"\n              class=\"cx-name\"\n              >{{ country.name }}</span\n            >\n            <span\n              [ngClass]=\"\n                country?.storeCountDataList\n                  ? 'country-header'\n                  : 'country-header-link'\n              \"\n              *ngIf=\"!country?.storeCountDataList\"\n              class=\"cx-country-count\"\n              >({{ country.count }})</span\n            >\n          </h2>\n        </a>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"!locations?.length\">\n      <span class=\"cx-no-stores\" role=\"alert\">\n        {{ 'storeFinder.noStoresMessage' | cxTranslate }}\n      </span>\n    </div>\n  </div>\n</ng-container>\n<ng-template #loading>\n  <div class=\"cx-count-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i4.SpinnerComponent, selector: "cx-spinner" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: StoreFinderStoresCountComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-store-finder-stores-count', template: "<ng-container\n  *ngIf=\"\n    !(isLoading$ | async) && (locations$ | async) as locations;\n    else loading\n  \"\n>\n  <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n  <div class=\"cx-count container\">\n    <div class=\"row\" *ngIf=\"locations?.length\">\n      <div class=\"cx-visually-hidden\">\n        {{\n          'storeFinder.ariaLabelCountriesCount'\n            | cxTranslate: { count: locations?.length }\n        }}\n      </div>\n      <div\n        *ngFor=\"let country of locations\"\n        class=\"cx-set col-sm-6 col-md-4 col-lg-4 col-xl-3\"\n      >\n        <a\n          [routerLink]=\"['../country', country.isoCode]\"\n          class=\"btn-link\"\n          role=\"button\"\n          [attr.aria-label]=\"country.name + '(' + country.count + ')'\"\n        >\n          <h2 class=\"cx-title\" aria-hidden=\"true\">\n            <span\n              [ngClass]=\"\n                country?.storeCountDataList\n                  ? 'country-header'\n                  : 'country-header-link'\n              \"\n              class=\"cx-name\"\n              >{{ country.name }}</span\n            >\n            <span\n              [ngClass]=\"\n                country?.storeCountDataList\n                  ? 'country-header'\n                  : 'country-header-link'\n              \"\n              *ngIf=\"!country?.storeCountDataList\"\n              class=\"cx-country-count\"\n              >({{ country.count }})</span\n            >\n          </h2>\n        </a>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"!locations?.length\">\n      <span class=\"cx-no-stores\" role=\"alert\">\n        {{ 'storeFinder.noStoresMessage' | cxTranslate }}\n      </span>\n    </div>\n  </div>\n</ng-container>\n<ng-template #loading>\n  <div class=\"cx-count-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StoreFinderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtZmluZGVyLXN0b3Jlcy1jb3VudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvc3RvcmVmaW5kZXIvY29tcG9uZW50cy9zdG9yZS1maW5kZXItc3RvcmVzLWNvdW50L3N0b3JlLWZpbmRlci1zdG9yZXMtY291bnQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3N0b3JlZmluZGVyL2NvbXBvbmVudHMvc3RvcmUtZmluZGVyLXN0b3Jlcy1jb3VudC9zdG9yZS1maW5kZXItc3RvcmVzLWNvdW50LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDOzs7Ozs7O0FBUWxELE1BQU0sT0FBTywrQkFBK0I7SUFJMUMsWUFBb0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBRyxDQUFDO0lBRTlELFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNyRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ3RFLENBQUM7OzRIQVZVLCtCQUErQjtnSEFBL0IsK0JBQStCLG9FQ2Q1QyxnMkRBMkRBOzJGRDdDYSwrQkFBK0I7a0JBSjNDLFNBQVM7K0JBQ0UsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0b3JlRmluZGVyU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmaW5kZXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXN0b3JlLWZpbmRlci1zdG9yZXMtY291bnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RvcmUtZmluZGVyLXN0b3Jlcy1jb3VudC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFN0b3JlRmluZGVyU3RvcmVzQ291bnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBsb2NhdGlvbnMkOiBPYnNlcnZhYmxlPGFueT47XG4gIGlzTG9hZGluZyQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yZUZpbmRlclNlcnZpY2U6IFN0b3JlRmluZGVyU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN0b3JlRmluZGVyU2VydmljZS52aWV3QWxsU3RvcmVzKCk7XG4gICAgdGhpcy5sb2NhdGlvbnMkID0gdGhpcy5zdG9yZUZpbmRlclNlcnZpY2UuZ2V0Vmlld0FsbFN0b3Jlc0VudGl0aWVzKCk7XG4gICAgdGhpcy5pc0xvYWRpbmckID0gdGhpcy5zdG9yZUZpbmRlclNlcnZpY2UuZ2V0Vmlld0FsbFN0b3Jlc0xvYWRpbmcoKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lclxuICAqbmdJZj1cIlxuICAgICEoaXNMb2FkaW5nJCB8IGFzeW5jKSAmJiAobG9jYXRpb25zJCB8IGFzeW5jKSBhcyBsb2NhdGlvbnM7XG4gICAgZWxzZSBsb2FkaW5nXG4gIFwiXG4+XG4gIDxkaXYgcm9sZT1cInN0YXR1c1wiIFthdHRyLmFyaWEtbGFiZWxdPVwiJ2NvbW1vbi5sb2FkZWQnIHwgY3hUcmFuc2xhdGVcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImN4LWNvdW50IGNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cImxvY2F0aW9ucz8ubGVuZ3RoXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtdmlzdWFsbHktaGlkZGVuXCI+XG4gICAgICAgIHt7XG4gICAgICAgICAgJ3N0b3JlRmluZGVyLmFyaWFMYWJlbENvdW50cmllc0NvdW50J1xuICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZTogeyBjb3VudDogbG9jYXRpb25zPy5sZW5ndGggfVxuICAgICAgICB9fVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgICpuZ0Zvcj1cImxldCBjb3VudHJ5IG9mIGxvY2F0aW9uc1wiXG4gICAgICAgIGNsYXNzPVwiY3gtc2V0IGNvbC1zbS02IGNvbC1tZC00IGNvbC1sZy00IGNvbC14bC0zXCJcbiAgICAgID5cbiAgICAgICAgPGFcbiAgICAgICAgICBbcm91dGVyTGlua109XCJbJy4uL2NvdW50cnknLCBjb3VudHJ5Lmlzb0NvZGVdXCJcbiAgICAgICAgICBjbGFzcz1cImJ0bi1saW5rXCJcbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImNvdW50cnkubmFtZSArICcoJyArIGNvdW50cnkuY291bnQgKyAnKSdcIlxuICAgICAgICA+XG4gICAgICAgICAgPGgyIGNsYXNzPVwiY3gtdGl0bGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIFtuZ0NsYXNzXT1cIlxuICAgICAgICAgICAgICAgIGNvdW50cnk/LnN0b3JlQ291bnREYXRhTGlzdFxuICAgICAgICAgICAgICAgICAgPyAnY291bnRyeS1oZWFkZXInXG4gICAgICAgICAgICAgICAgICA6ICdjb3VudHJ5LWhlYWRlci1saW5rJ1xuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICBjbGFzcz1cImN4LW5hbWVcIlxuICAgICAgICAgICAgICA+e3sgY291bnRyeS5uYW1lIH19PC9zcGFuXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBbbmdDbGFzc109XCJcbiAgICAgICAgICAgICAgICBjb3VudHJ5Py5zdG9yZUNvdW50RGF0YUxpc3RcbiAgICAgICAgICAgICAgICAgID8gJ2NvdW50cnktaGVhZGVyJ1xuICAgICAgICAgICAgICAgICAgOiAnY291bnRyeS1oZWFkZXItbGluaydcbiAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgKm5nSWY9XCIhY291bnRyeT8uc3RvcmVDb3VudERhdGFMaXN0XCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJjeC1jb3VudHJ5LWNvdW50XCJcbiAgICAgICAgICAgICAgPih7eyBjb3VudHJ5LmNvdW50IH19KTwvc3BhblxuICAgICAgICAgICAgPlxuICAgICAgICAgIDwvaDI+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiFsb2NhdGlvbnM/Lmxlbmd0aFwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJjeC1uby1zdG9yZXNcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAge3sgJ3N0b3JlRmluZGVyLm5vU3RvcmVzTWVzc2FnZScgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctY29udGFpbmVyPlxuPG5nLXRlbXBsYXRlICNsb2FkaW5nPlxuICA8ZGl2IGNsYXNzPVwiY3gtY291bnQtc3Bpbm5lclwiPjxjeC1zcGlubmVyPjwvY3gtc3Bpbm5lcj48L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=