/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { UntypedFormControl, UntypedFormGroup, Validators, } from '@angular/forms';
import { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';
import { FileUploadComponent } from '../../form';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../../services/file/files-form-validators";
import * as i3 from "@angular/common";
import * as i4 from "../../../../cms-components/misc/icon/icon.component";
import * as i5 from "@angular/forms";
import * as i6 from "../../form/file-upload/file-upload.component";
import * as i7 from "../../form/form-errors/form-errors.component";
import * as i8 from "../avatar/avatar.component";
export class MessagingComponent {
    get inputCharacterLeft() {
        return ((this.messagingConfigs?.charactersLimit || this.MAX_INPUT_CHARACTERS) -
            (this.form.get('message')?.value?.length || 0));
    }
    get maxSize() {
        return (this.messagingConfigs?.attachmentRestrictions?.maxSize || this.MAX_SIZE);
    }
    get maxEntries() {
        return (this.messagingConfigs?.attachmentRestrictions?.maxEntries ||
            this.MAX_ENTRIES);
    }
    get allowedTypes() {
        return this.messagingConfigs?.attachmentRestrictions?.allowedTypes || [];
    }
    constructor(windowRef, filesFormValidators) {
        this.windowRef = windowRef;
        this.filesFormValidators = filesFormValidators;
        this.scrollToInput = true;
        this.send = new EventEmitter();
        this.downloadAttachment = new EventEmitter();
        this.iconTypes = ICON_TYPE;
        this.MAX_INPUT_CHARACTERS = 2000;
        this.MAX_SIZE = 10;
        this.MAX_ENTRIES = 1;
        this.dateFormat = 'MMMM d, YYYY h:mm aa';
        this.scrollOnceOnLoad = true;
    }
    ngOnInit() {
        this.buildForm();
    }
    ngAfterViewChecked() {
        if (this.scrollToInput) {
            this.observeScroll();
            if (this.scrollOnceOnLoad) {
                this.scrollOnLoad();
            }
        }
    }
    onSend() {
        if (this.form.valid) {
            this.send.emit({
                files: this.form.get('file')?.value,
                message: this.form.get('message')?.value,
            });
        }
    }
    resetForm() {
        this.form.reset();
        this.fileUploadComponent.removeFile();
    }
    triggerDownload(messageCode, attachmentId, fileName) {
        this.downloadAttachment.emit({
            messageCode: messageCode,
            attachmentId: attachmentId,
            fileName: fileName,
        });
    }
    buildForm() {
        const form = new UntypedFormGroup({});
        form.setControl('message', new UntypedFormControl('', [
            Validators.required,
            Validators.maxLength(this.messagingConfigs?.charactersLimit || this.MAX_INPUT_CHARACTERS),
        ]));
        form.setControl('file', new UntypedFormControl('', [
            this.filesFormValidators.maxSize(this.maxSize),
            this.filesFormValidators.maxEntries(this.maxEntries),
            this.filesFormValidators.allowedTypes(this.allowedTypes),
        ]));
        this.form = form;
    }
    focusNextChild(event) {
        event.preventDefault();
        const [results, focusedIndex] = [
            this.getResultElements(),
            this.getFocusedIndex(),
        ];
        if (results.length) {
            if (focusedIndex >= results.length - 1) {
                results[0].focus();
            }
            else {
                results[focusedIndex + 1].focus();
            }
        }
    }
    focusPreviousChild(event) {
        if (!this.windowRef.isBrowser()) {
            return;
        }
        event.preventDefault();
        const [results, focusedIndex] = [
            this.getResultElements(),
            this.getFocusedIndex(),
        ];
        if (results.length) {
            if (focusedIndex < 1) {
                results[results.length - 1].focus();
            }
            else {
                results[focusedIndex - 1].focus();
            }
        }
    }
    observeScroll() {
        const element = this.windowRef.document.querySelector('.cx-messages');
        if (element) {
            const resizeObserver = new ResizeObserver((entries) => {
                this.scrollToBottom(element, entries[0].target.scrollHeight);
                this.updatedScrollHeight = entries[0].target.scrollHeight;
            });
            resizeObserver.observe(element);
        }
    }
    scrollToBottom(element, previousScrollHeight) {
        if (this.heightChanged(previousScrollHeight)) {
            element?.scroll({
                top: element?.scrollHeight,
                behavior: 'auto',
            });
        }
    }
    heightChanged(previousScrollHeight) {
        return this.updatedScrollHeight !== previousScrollHeight;
    }
    scrollOnLoad() {
        const element = this.windowRef.document.getElementById('cx-message-footer');
        const resizeObserver = new ResizeObserver(() => {
            element?.scrollIntoView({ behavior: 'auto', block: 'end' });
            this.scrollOnceOnLoad = false;
        });
        if (element) {
            resizeObserver.observe(element);
        }
    }
    getResultElements() {
        return Array.from(this.windowRef.document.querySelectorAll('[role="listitem"]'));
    }
    getFocusedIndex() {
        return this.getResultElements().indexOf(this.getFocusedElement());
    }
    getFocusedElement() {
        return this.windowRef.document.activeElement;
    }
}
MessagingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: MessagingComponent, deps: [{ token: i1.WindowRef }, { token: i2.FilesFormValidators }], target: i0.ɵɵFactoryTarget.Component });
MessagingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: MessagingComponent, selector: "cx-messaging", inputs: { messageEvents$: "messageEvents$", scrollToInput: "scrollToInput", messagingConfigs: "messagingConfigs" }, outputs: { send: "send", downloadAttachment: "downloadAttachment" }, viewQueries: [{ propertyName: "fileUploadComponent", first: true, predicate: FileUploadComponent, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"messageEvents$ | async as messageEvents\">\n  <div class=\"container\">\n    <div class=\"cx-avatar-line\"></div>\n    <div\n      class=\"cx-messages\"\n      id=\"cx-messages\"\n      (keydown.arrowdown)=\"focusNextChild($any($event))\"\n      (keydown.arrowup)=\"focusPreviousChild($any($event))\"\n      [attr.aria-label]=\"'chatMessaging.messages' | cxTranslate\"\n    >\n      <ng-container *ngFor=\"let message of messageEvents; let i = index\">\n        <div\n          class=\"cx-message-card\"\n          [ngClass]=\"{ 'cx-message-display': message?.rightAlign ?? false }\"\n        >\n          <cx-avatar [message]=\"message!\"> </cx-avatar>\n\n          <div>\n            <label>{{\n              (message?.createdAt | cxDate: messagingConfigs?.dateFormat) ??\n                dateFormat\n            }}</label>\n            <div\n              [ngClass]=\"\n                message?.rightAlign ?? false\n                  ? 'cx-message-right-align-text'\n                  : 'cx-message-left-align-text'\n              \"\n              [tabindex]=\"i ? -1 : 0\"\n              role=\"listitem\"\n              [attr.aria-label]=\"\n                'chatMessaging.informationLabel'\n                  | cxTranslate\n                    : {\n                        author: message?.author!,\n                        text: message?.text!,\n                        date:\n                          (message?.createdAt\n                            | cxDate: messagingConfigs?.dateFormat) ??\n                          dateFormat\n                      }\n              \"\n            >\n              {{ message?.text! }}\n            </div>\n            <a\n              *ngFor=\"let attachment of message?.attachments ?? []\"\n              class=\"cx-attachment\"\n              (click)=\"\n                triggerDownload(\n                  message?.code,\n                  attachment?.id,\n                  attachment?.filename\n                )\n              \"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <cx-icon [type]=\"iconTypes.ATTACHMENT\"></cx-icon>\n              {{ attachment.filename }}\n            </a>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    [formGroup]=\"form\"\n    class=\"cx-message-footer\"\n    *ngIf=\"messagingConfigs?.displayAddMessageSection | async\"\n  >\n    <div class=\"cx-message-box\">\n      <label class=\"cx-footer-label\">\n        <span>\n          {{ 'chatMessaging.addNewMessage' | cxTranslate }}\n        </span>\n        <div class=\"cx-message-input\">\n          <input\n            formControlName=\"message\"\n            type=\"text\"\n            class=\"form-control\"\n            (keydown.enter)=\"onSend()\"\n            [maxLength]=\"\n              messagingConfigs?.charactersLimit || MAX_INPUT_CHARACTERS\n            \"\n            placeholder=\"{{\n              messagingConfigs?.newMessagePlaceHolder ||\n                ('chatMessaging.addMessagePlaceHolder' | cxTranslate)\n            }}\"\n          />\n          <span\n            class=\"cx-visually-hidden\"\n            *ngIf=\"inputCharacterLeft === 0\"\n            role=\"alert\"\n          >\n            {{ 'chatMessaging.characterLimitAlert' | cxTranslate }}\n          </span>\n          <button class=\"btn btn-block btn-primary cx-send\" (click)=\"onSend()\">\n            {{ 'chatMessaging.send' | cxTranslate }}\n          </button>\n        </div>\n      </label>\n      <div class=\"cx-message-footer-info\" id=\"cx-message-footer\">\n        <cx-file-upload\n          [formControl]=\"$any(form.get('file'))\"\n          [accept]=\"allowedTypes\"\n          *ngIf=\"messagingConfigs?.enableFileUploadOption\"\n        >\n          <ng-template>\n            <cx-icon [type]=\"iconTypes.UPLOAD\"></cx-icon>\n            <span class=\"cx-message-footer-text\"\n              >{{ 'chatMessaging.uploadFile' | cxTranslate }}\n            </span>\n          </ng-template>\n        </cx-file-upload>\n\n        <p class=\"cx-message-footer-info-text\">\n          {{\n            'chatMessaging.charactersLeft'\n              | cxTranslate: { count: inputCharacterLeft }\n          }}\n        </p>\n      </div>\n      <cx-form-errors\n        [control]=\"form.get('file')\"\n        prefix=\"formErrors.file\"\n      ></cx-form-errors>\n    </div>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i5.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i6.FileUploadComponent, selector: "cx-file-upload", inputs: ["accept", "multiple"], outputs: ["update"] }, { kind: "component", type: i7.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "component", type: i8.AvatarComponent, selector: "cx-avatar", inputs: ["message"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }, { kind: "pipe", type: i1.CxDatePipe, name: "cxDate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: MessagingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-messaging', template: "<ng-container *ngIf=\"messageEvents$ | async as messageEvents\">\n  <div class=\"container\">\n    <div class=\"cx-avatar-line\"></div>\n    <div\n      class=\"cx-messages\"\n      id=\"cx-messages\"\n      (keydown.arrowdown)=\"focusNextChild($any($event))\"\n      (keydown.arrowup)=\"focusPreviousChild($any($event))\"\n      [attr.aria-label]=\"'chatMessaging.messages' | cxTranslate\"\n    >\n      <ng-container *ngFor=\"let message of messageEvents; let i = index\">\n        <div\n          class=\"cx-message-card\"\n          [ngClass]=\"{ 'cx-message-display': message?.rightAlign ?? false }\"\n        >\n          <cx-avatar [message]=\"message!\"> </cx-avatar>\n\n          <div>\n            <label>{{\n              (message?.createdAt | cxDate: messagingConfigs?.dateFormat) ??\n                dateFormat\n            }}</label>\n            <div\n              [ngClass]=\"\n                message?.rightAlign ?? false\n                  ? 'cx-message-right-align-text'\n                  : 'cx-message-left-align-text'\n              \"\n              [tabindex]=\"i ? -1 : 0\"\n              role=\"listitem\"\n              [attr.aria-label]=\"\n                'chatMessaging.informationLabel'\n                  | cxTranslate\n                    : {\n                        author: message?.author!,\n                        text: message?.text!,\n                        date:\n                          (message?.createdAt\n                            | cxDate: messagingConfigs?.dateFormat) ??\n                          dateFormat\n                      }\n              \"\n            >\n              {{ message?.text! }}\n            </div>\n            <a\n              *ngFor=\"let attachment of message?.attachments ?? []\"\n              class=\"cx-attachment\"\n              (click)=\"\n                triggerDownload(\n                  message?.code,\n                  attachment?.id,\n                  attachment?.filename\n                )\n              \"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <cx-icon [type]=\"iconTypes.ATTACHMENT\"></cx-icon>\n              {{ attachment.filename }}\n            </a>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    [formGroup]=\"form\"\n    class=\"cx-message-footer\"\n    *ngIf=\"messagingConfigs?.displayAddMessageSection | async\"\n  >\n    <div class=\"cx-message-box\">\n      <label class=\"cx-footer-label\">\n        <span>\n          {{ 'chatMessaging.addNewMessage' | cxTranslate }}\n        </span>\n        <div class=\"cx-message-input\">\n          <input\n            formControlName=\"message\"\n            type=\"text\"\n            class=\"form-control\"\n            (keydown.enter)=\"onSend()\"\n            [maxLength]=\"\n              messagingConfigs?.charactersLimit || MAX_INPUT_CHARACTERS\n            \"\n            placeholder=\"{{\n              messagingConfigs?.newMessagePlaceHolder ||\n                ('chatMessaging.addMessagePlaceHolder' | cxTranslate)\n            }}\"\n          />\n          <span\n            class=\"cx-visually-hidden\"\n            *ngIf=\"inputCharacterLeft === 0\"\n            role=\"alert\"\n          >\n            {{ 'chatMessaging.characterLimitAlert' | cxTranslate }}\n          </span>\n          <button class=\"btn btn-block btn-primary cx-send\" (click)=\"onSend()\">\n            {{ 'chatMessaging.send' | cxTranslate }}\n          </button>\n        </div>\n      </label>\n      <div class=\"cx-message-footer-info\" id=\"cx-message-footer\">\n        <cx-file-upload\n          [formControl]=\"$any(form.get('file'))\"\n          [accept]=\"allowedTypes\"\n          *ngIf=\"messagingConfigs?.enableFileUploadOption\"\n        >\n          <ng-template>\n            <cx-icon [type]=\"iconTypes.UPLOAD\"></cx-icon>\n            <span class=\"cx-message-footer-text\"\n              >{{ 'chatMessaging.uploadFile' | cxTranslate }}\n            </span>\n          </ng-template>\n        </cx-file-upload>\n\n        <p class=\"cx-message-footer-info-text\">\n          {{\n            'chatMessaging.charactersLeft'\n              | cxTranslate: { count: inputCharacterLeft }\n          }}\n        </p>\n      </div>\n      <cx-form-errors\n        [control]=\"form.get('file')\"\n        prefix=\"formErrors.file\"\n      ></cx-form-errors>\n    </div>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.WindowRef }, { type: i2.FilesFormValidators }]; }, propDecorators: { fileUploadComponent: [{
                type: ViewChild,
                args: [FileUploadComponent]
            }], messageEvents$: [{
                type: Input
            }], scrollToInput: [{
                type: Input
            }], messagingConfigs: [{
                type: Input
            }], send: [{
                type: Output
            }], downloadAttachment: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,