/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { Validators, } from '@angular/forms';
import { GlobalMessageType, } from '@spartacus/core';
import { BehaviorSubject, combineLatest, Subscription } from 'rxjs';
import { filter, map, switchMap, take, tap } from 'rxjs/operators';
import { sortTitles } from '../../../../shared/utils/forms/title-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@spartacus/core";
import * as i3 from "../../../../layout";
import * as i4 from "../../../../shared/components/ng-select-a11y/ng-select-a11y.directive";
import * as i5 from "@angular/common";
import * as i6 from "@ng-select/ng-select";
import * as i7 from "../../../../shared/components/form/form-errors/form-errors.component";
export class AddressFormComponent {
    constructor(fb, userService, userAddressService, globalMessageService, translation, launchDialogService) {
        this.fb = fb;
        this.userService = userService;
        this.userAddressService = userAddressService;
        this.globalMessageService = globalMessageService;
        this.translation = translation;
        this.launchDialogService = launchDialogService;
        this.selectedCountry$ = new BehaviorSubject('');
        this.setAsDefaultField = true;
        this.showCancelBtn = true;
        this.submitAddress = new EventEmitter();
        this.backToAddress = new EventEmitter();
        this.subscription = new Subscription();
        this.addressForm = this.fb.group({
            country: this.fb.group({
                isocode: [null, Validators.required],
            }),
            titleCode: [''],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            line1: ['', Validators.required],
            line2: [''],
            town: ['', Validators.required],
            region: this.fb.group({
                isocode: [null, Validators.required],
            }),
            postalCode: ['', Validators.required],
            phone: '',
            cellphone: '',
            defaultAddress: [false],
        });
    }
    ngOnInit() {
        // Fetching countries
        this.countries$ = this.userAddressService.getDeliveryCountries().pipe(tap((countries) => {
            if (Object.keys(countries).length === 0) {
                this.userAddressService.loadDeliveryCountries();
            }
        }));
        // Fetching titles
        this.titles$ = this.getTitles();
        // Fetching regions
        this.regions$ = this.selectedCountry$.pipe(switchMap((country) => this.userAddressService.getRegions(country)), tap((regions) => {
            const regionControl = this.addressForm.get('region.isocode');
            if (regions && regions.length > 0) {
                regionControl?.enable();
            }
            else {
                regionControl?.disable();
            }
        }));
        if (this.addressData && Object.keys(this.addressData).length !== 0) {
            this.addressForm.patchValue(this.addressData);
            this.countrySelected(this.addressData.country);
            if (this.addressData.region) {
                this.regionSelected(this.addressData.region);
            }
        }
        this.addresses$ = this.userAddressService.getAddresses();
    }
    getTitles() {
        return combineLatest([
            this.translation.translate('addressForm.defaultTitle'),
            this.userService.getTitles(),
        ]).pipe(map(([noneTitleText, titles]) => {
            const noneTitle = { code: '', name: noneTitleText };
            titles.sort(sortTitles);
            return [noneTitle, ...titles];
        }));
    }
    handleAddressVerificationResults(results) {
        if (results.decision === 'ACCEPT') {
            this.submitAddress.emit(this.addressForm.value);
        }
        else if (results.decision === 'REJECT') {
            // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)
            if (results.errors?.errors.some((error) => error.subject === 'titleCode')) {
                this.globalMessageService.add({ key: 'addressForm.titleRequired' }, GlobalMessageType.MSG_TYPE_ERROR);
            }
            else {
                this.globalMessageService.add({ key: 'addressForm.invalidAddress' }, GlobalMessageType.MSG_TYPE_ERROR);
            }
        }
        else if (results.decision === 'REVIEW') {
            this.openSuggestedAddress(results);
        }
    }
    countrySelected(country) {
        this.addressForm.get('country')?.get('isocode')?.setValue(country?.isocode);
        this.selectedCountry$.next(country?.isocode ?? '');
    }
    regionSelected(region) {
        this.addressForm.get('region')?.get('isocode')?.setValue(region.isocode);
    }
    toggleDefaultAddress() {
        this.addressForm['controls'].defaultAddress.setValue(this.addressForm.value.defaultAddress);
    }
    back() {
        this.backToAddress.emit();
    }
    verifyAddress() {
        if (this.addressForm.valid) {
            if (this.addressForm.get('region')?.value.isocode) {
                this.regions$.pipe(take(1)).subscribe((regions) => {
                    const obj = regions.find((region) => region.isocode ===
                        this.addressForm.controls['region'].value.isocode);
                    Object.assign(this.addressForm.value.region, {
                        isocodeShort: obj?.isocodeShort,
                    });
                });
            }
            if (this.addressForm.dirty) {
                this.subscription.add(this.userAddressService
                    .verifyAddress(this.addressForm.value)
                    .subscribe((value) => {
                    this.handleAddressVerificationResults(value);
                }));
            }
            else {
                // address form value not changed
                // ignore duplicate address
                this.submitAddress.emit(undefined);
            }
        }
        else {
            this.addressForm.markAllAsTouched();
        }
    }
    openSuggestedAddress(results) {
        this.launchDialogService.openDialogAndSubscribe("SUGGESTED_ADDRESSES" /* LAUNCH_CALLER.SUGGESTED_ADDRESSES */, this.element, {
            enteredAddress: this.addressForm.value,
            suggestedAddresses: results.suggestedAddresses,
        });
        this.subscription.add(this.launchDialogService.dialogClose
            .pipe(filter((result) => Boolean(result)))
            .subscribe((result) => {
            if (typeof result === 'object') {
                const address = {
                    ...result,
                    titleCode: this.addressForm.value.titleCode,
                    phone: this.addressForm.value.phone,
                    selected: true,
                };
                this.submitAddress.emit(address);
            }
        }));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
AddressFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: AddressFormComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i2.UserService }, { token: i2.UserAddressService }, { token: i2.GlobalMessageService }, { token: i2.TranslationService }, { token: i3.LaunchDialogService }], target: i0.ɵɵFactoryTarget.Component });
AddressFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: AddressFormComponent, selector: "cx-address-form", inputs: { addressData: "addressData", actionBtnLabel: "actionBtnLabel", cancelBtnLabel: "cancelBtnLabel", setAsDefaultField: "setAsDefaultField", showTitleCode: "showTitleCode", showCancelBtn: "showCancelBtn" }, outputs: { submitAddress: "submitAddress", backToAddress: "backToAddress" }, viewQueries: [{ propertyName: "element", first: true, predicate: ["submit"], descendants: true }], ngImport: i0, template: "<form (ngSubmit)=\"verifyAddress()\" [formGroup]=\"addressForm\">\n  <div class=\"form-group\" formGroupName=\"country\">\n    <ng-container *ngIf=\"countries$ | async as countries\">\n      <div *ngIf=\"countries.length !== 0\">\n        <label>\n          <span class=\"label-content required\">{{\n            'addressForm.country' | cxTranslate\n          }}</span>\n          <ng-select\n            [inputAttrs]=\"{ required: 'true' }\"\n            class=\"country-select\"\n            id=\"country-select\"\n            formControlName=\"isocode\"\n            [searchable]=\"true\"\n            [clearable]=\"false\"\n            [items]=\"countries\"\n            bindLabel=\"name\"\n            bindValue=\"isocode\"\n            placeholder=\"{{ 'addressForm.selectOne' | cxTranslate }}\"\n            (change)=\"countrySelected($event)\"\n            [cxNgSelectA11y]=\"{\n              ariaLabel: 'addressForm.country' | cxTranslate\n            }\"\n          >\n          </ng-select>\n          <cx-form-errors\n            [control]=\"addressForm.get('country.isocode')\"\n          ></cx-form-errors>\n        </label>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"form-group\" *ngIf=\"showTitleCode\">\n    <ng-container *ngIf=\"titles$ | async as titles\">\n      <div *ngIf=\"titles.length !== 0\">\n        <label>\n          <span class=\"label-content required\">{{\n            'addressForm.title' | cxTranslate\n          }}</span>\n          <ng-select\n            id=\"title-select\"\n            formControlName=\"titleCode\"\n            [searchable]=\"true\"\n            [clearable]=\"false\"\n            [items]=\"titles\"\n            bindLabel=\"name\"\n            bindValue=\"code\"\n            [placeholder]=\"'addressForm.title' | cxTranslate\"\n            [cxNgSelectA11y]=\"{\n              ariaLabel: 'addressForm.title' | cxTranslate\n            }\"\n          >\n          </ng-select>\n        </label>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content required\">{{\n        'addressForm.firstName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        placeholder=\"{{ 'addressForm.firstName.placeholder' | cxTranslate }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors [control]=\"addressForm.get('firstName')\"></cx-form-errors>\n    </label>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content required\">{{\n        'addressForm.lastName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'addressForm.lastName.placeholder' | cxTranslate }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"addressForm.get('lastName')\"></cx-form-errors>\n    </label>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content required\">{{\n        'addressForm.address1' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'addressForm.streetAddress' | cxTranslate }}\"\n        formControlName=\"line1\"\n      />\n      <cx-form-errors [control]=\"addressForm.get('line1')\"></cx-form-errors>\n    </label>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content\">{{\n        'addressForm.address2' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'addressForm.aptSuite' | cxTranslate }}\"\n        formControlName=\"line2\"\n      />\n    </label>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-sm-6\">\n      <label>\n        <span class=\"label-content required\">{{\n          'addressForm.city.label' | cxTranslate\n        }}</span>\n        <input\n          required=\"true\"\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"{{ 'addressForm.city.placeholder' | cxTranslate }}\"\n          formControlName=\"town\"\n        />\n        <cx-form-errors [control]=\"addressForm.get('town')\"></cx-form-errors>\n      </label>\n    </div>\n    <div class=\"form-group col-sm-6\">\n      <label>\n        <span class=\"label-content required\">{{\n          'addressForm.zipCode.label' | cxTranslate\n        }}</span>\n        <input\n          required=\"true\"\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"{{ 'addressForm.zipCode.placeholder' | cxTranslate }}\"\n          formControlName=\"postalCode\"\n        />\n        <cx-form-errors\n          [control]=\"addressForm.get('postalCode')\"\n        ></cx-form-errors>\n      </label>\n    </div>\n    <ng-container *ngIf=\"regions$ | async as regions\" formGroupName=\"region\">\n      <ng-container *ngIf=\"regions.length !== 0\">\n        <div class=\"form-group col-md-6\">\n          <label>\n            <span class=\"label-content required\">{{\n              'addressForm.state' | cxTranslate\n            }}</span>\n            <ng-select\n              [inputAttrs]=\"{ required: 'true' }\"\n              class=\"region-select\"\n              formControlName=\"isocode\"\n              [searchable]=\"true\"\n              [clearable]=\"false\"\n              [items]=\"regions\"\n              bindLabel=\"{{ regions[0].name ? 'name' : 'isocode' }}\"\n              bindValue=\"{{ regions[0].name ? 'isocode' : 'region' }}\"\n              placeholder=\"{{ 'addressForm.selectOne' | cxTranslate }}\"\n              id=\"region-select\"\n              [cxNgSelectA11y]=\"{\n                ariaLabel: 'addressForm.state' | cxTranslate\n              }\"\n            >\n            </ng-select>\n            <cx-form-errors\n              [control]=\"addressForm.get('region.isocode')\"\n            ></cx-form-errors>\n          </label>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"form-group col-md-6\">\n      <label>\n        <span class=\"label-content\">{{\n          'addressForm.phoneNumber.label' | cxTranslate\n        }}</span>\n        <input\n          type=\"tel\"\n          class=\"form-control\"\n          placeholder=\"{{\n            'addressForm.phoneNumber.placeholder' | cxTranslate\n          }}\"\n          formControlName=\"phone\"\n        />\n      </label>\n    </div>\n    <div class=\"form-group col-md-6\">\n      <label>\n        <span class=\"label-content\">{{\n          'addressForm.cellphone.label' | cxTranslate\n        }}</span>\n        <input\n          type=\"tel\"\n          class=\"form-control\"\n          placeholder=\"{{ 'addressForm.cellphone.placeholder' | cxTranslate }}\"\n          formControlName=\"cellphone\"\n        />\n      </label>\n    </div>\n  </div>\n\n  <div\n    class=\"form-group\"\n    *ngIf=\"(addresses$ | async)?.length && setAsDefaultField\"\n  >\n    <div class=\"form-check\">\n      <label>\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          formControlName=\"defaultAddress\"\n          (change)=\"toggleDefaultAddress()\"\n        />\n        <span class=\"form-check-label\">{{\n          'addressForm.setAsDefault' | cxTranslate\n        }}</span>\n      </label>\n    </div>\n  </div>\n  <div class=\"cx-address-form-btns\">\n    <div class=\"row\">\n      <div class=\"col-md-13 col-lg-6\" *ngIf=\"showCancelBtn\">\n        <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n          {{ cancelBtnLabel || ('addressForm.chooseAddress' | cxTranslate) }}\n        </button>\n      </div>\n      <div class=\"col-md-13 col-lg-6\">\n        <button #submit class=\"btn btn-block btn-primary\" type=\"submit\">\n          {{ actionBtnLabel || ('common.continue' | cxTranslate) }}\n        </button>\n      </div>\n    </div>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i4.NgSelectA11yDirective, selector: "[cxNgSelectA11y]", inputs: ["cxNgSelectA11y"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i7.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: AddressFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-address-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<form (ngSubmit)=\"verifyAddress()\" [formGroup]=\"addressForm\">\n  <div class=\"form-group\" formGroupName=\"country\">\n    <ng-container *ngIf=\"countries$ | async as countries\">\n      <div *ngIf=\"countries.length !== 0\">\n        <label>\n          <span class=\"label-content required\">{{\n            'addressForm.country' | cxTranslate\n          }}</span>\n          <ng-select\n            [inputAttrs]=\"{ required: 'true' }\"\n            class=\"country-select\"\n            id=\"country-select\"\n            formControlName=\"isocode\"\n            [searchable]=\"true\"\n            [clearable]=\"false\"\n            [items]=\"countries\"\n            bindLabel=\"name\"\n            bindValue=\"isocode\"\n            placeholder=\"{{ 'addressForm.selectOne' | cxTranslate }}\"\n            (change)=\"countrySelected($event)\"\n            [cxNgSelectA11y]=\"{\n              ariaLabel: 'addressForm.country' | cxTranslate\n            }\"\n          >\n          </ng-select>\n          <cx-form-errors\n            [control]=\"addressForm.get('country.isocode')\"\n          ></cx-form-errors>\n        </label>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"form-group\" *ngIf=\"showTitleCode\">\n    <ng-container *ngIf=\"titles$ | async as titles\">\n      <div *ngIf=\"titles.length !== 0\">\n        <label>\n          <span class=\"label-content required\">{{\n            'addressForm.title' | cxTranslate\n          }}</span>\n          <ng-select\n            id=\"title-select\"\n            formControlName=\"titleCode\"\n            [searchable]=\"true\"\n            [clearable]=\"false\"\n            [items]=\"titles\"\n            bindLabel=\"name\"\n            bindValue=\"code\"\n            [placeholder]=\"'addressForm.title' | cxTranslate\"\n            [cxNgSelectA11y]=\"{\n              ariaLabel: 'addressForm.title' | cxTranslate\n            }\"\n          >\n          </ng-select>\n        </label>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content required\">{{\n        'addressForm.firstName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        placeholder=\"{{ 'addressForm.firstName.placeholder' | cxTranslate }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors [control]=\"addressForm.get('firstName')\"></cx-form-errors>\n    </label>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content required\">{{\n        'addressForm.lastName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'addressForm.lastName.placeholder' | cxTranslate }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"addressForm.get('lastName')\"></cx-form-errors>\n    </label>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content required\">{{\n        'addressForm.address1' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'addressForm.streetAddress' | cxTranslate }}\"\n        formControlName=\"line1\"\n      />\n      <cx-form-errors [control]=\"addressForm.get('line1')\"></cx-form-errors>\n    </label>\n  </div>\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content\">{{\n        'addressForm.address2' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'addressForm.aptSuite' | cxTranslate }}\"\n        formControlName=\"line2\"\n      />\n    </label>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-sm-6\">\n      <label>\n        <span class=\"label-content required\">{{\n          'addressForm.city.label' | cxTranslate\n        }}</span>\n        <input\n          required=\"true\"\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"{{ 'addressForm.city.placeholder' | cxTranslate }}\"\n          formControlName=\"town\"\n        />\n        <cx-form-errors [control]=\"addressForm.get('town')\"></cx-form-errors>\n      </label>\n    </div>\n    <div class=\"form-group col-sm-6\">\n      <label>\n        <span class=\"label-content required\">{{\n          'addressForm.zipCode.label' | cxTranslate\n        }}</span>\n        <input\n          required=\"true\"\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"{{ 'addressForm.zipCode.placeholder' | cxTranslate }}\"\n          formControlName=\"postalCode\"\n        />\n        <cx-form-errors\n          [control]=\"addressForm.get('postalCode')\"\n        ></cx-form-errors>\n      </label>\n    </div>\n    <ng-container *ngIf=\"regions$ | async as regions\" formGroupName=\"region\">\n      <ng-container *ngIf=\"regions.length !== 0\">\n        <div class=\"form-group col-md-6\">\n          <label>\n            <span class=\"label-content required\">{{\n              'addressForm.state' | cxTranslate\n            }}</span>\n            <ng-select\n              [inputAttrs]=\"{ required: 'true' }\"\n              class=\"region-select\"\n              formControlName=\"isocode\"\n              [searchable]=\"true\"\n              [clearable]=\"false\"\n              [items]=\"regions\"\n              bindLabel=\"{{ regions[0].name ? 'name' : 'isocode' }}\"\n              bindValue=\"{{ regions[0].name ? 'isocode' : 'region' }}\"\n              placeholder=\"{{ 'addressForm.selectOne' | cxTranslate }}\"\n              id=\"region-select\"\n              [cxNgSelectA11y]=\"{\n                ariaLabel: 'addressForm.state' | cxTranslate\n              }\"\n            >\n            </ng-select>\n            <cx-form-errors\n              [control]=\"addressForm.get('region.isocode')\"\n            ></cx-form-errors>\n          </label>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"form-group col-md-6\">\n      <label>\n        <span class=\"label-content\">{{\n          'addressForm.phoneNumber.label' | cxTranslate\n        }}</span>\n        <input\n          type=\"tel\"\n          class=\"form-control\"\n          placeholder=\"{{\n            'addressForm.phoneNumber.placeholder' | cxTranslate\n          }}\"\n          formControlName=\"phone\"\n        />\n      </label>\n    </div>\n    <div class=\"form-group col-md-6\">\n      <label>\n        <span class=\"label-content\">{{\n          'addressForm.cellphone.label' | cxTranslate\n        }}</span>\n        <input\n          type=\"tel\"\n          class=\"form-control\"\n          placeholder=\"{{ 'addressForm.cellphone.placeholder' | cxTranslate }}\"\n          formControlName=\"cellphone\"\n        />\n      </label>\n    </div>\n  </div>\n\n  <div\n    class=\"form-group\"\n    *ngIf=\"(addresses$ | async)?.length && setAsDefaultField\"\n  >\n    <div class=\"form-check\">\n      <label>\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          formControlName=\"defaultAddress\"\n          (change)=\"toggleDefaultAddress()\"\n        />\n        <span class=\"form-check-label\">{{\n          'addressForm.setAsDefault' | cxTranslate\n        }}</span>\n      </label>\n    </div>\n  </div>\n  <div class=\"cx-address-form-btns\">\n    <div class=\"row\">\n      <div class=\"col-md-13 col-lg-6\" *ngIf=\"showCancelBtn\">\n        <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n          {{ cancelBtnLabel || ('addressForm.chooseAddress' | cxTranslate) }}\n        </button>\n      </div>\n      <div class=\"col-md-13 col-lg-6\">\n        <button #submit class=\"btn btn-block btn-primary\" type=\"submit\">\n          {{ actionBtnLabel || ('common.continue' | cxTranslate) }}\n        </button>\n      </div>\n    </div>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i2.UserService }, { type: i2.UserAddressService }, { type: i2.GlobalMessageService }, { type: i2.TranslationService }, { type: i3.LaunchDialogService }]; }, propDecorators: { addressData: [{
                type: Input
            }], actionBtnLabel: [{
                type: Input
            }], cancelBtnLabel: [{
                type: Input
            }], setAsDefaultField: [{
                type: Input
            }], showTitleCode: [{
                type: Input
            }], showCancelBtn: [{
                type: Input
            }], submitAddress: [{
                type: Output
            }], backToAddress: [{
                type: Output
            }], element: [{
                type: ViewChild,
                args: ['submit']
            }] } });
//# sourceMappingURL=data:application/json;base64,