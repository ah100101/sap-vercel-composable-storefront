/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { PageTitleComponent } from '../page-header/page-title.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../cms-structure/page/model/cms-component-data";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
export class BreadcrumbComponent extends PageTitleComponent {
    constructor(component, pageMetaService, translation) {
        super(component, pageMetaService);
        this.component = component;
        this.pageMetaService = pageMetaService;
        this.translation = translation;
    }
    ngOnInit() {
        super.ngOnInit();
        this.setCrumbs();
    }
    setCrumbs() {
        this.crumbs$ = combineLatest([
            this.pageMetaService.getMeta(),
            this.translation.translate('common.home'),
        ]).pipe(map(([meta, textHome]) => meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]));
    }
}
BreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: i1.CmsComponentData }, { token: i2.PageMetaService }, { token: i2.TranslationService }], target: i0.ɵɵFactoryTarget.Component });
BreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: BreadcrumbComponent, selector: "cx-breadcrumb", usesInheritance: true, ngImport: i0, template: "<nav [attr.aria-label]=\"'common.breadcrumbs' | cxTranslate\" tabindex=\"-1\">\n  <ol [attr.aria-label]=\"'common.breadcrumbs' | cxTranslate\">\n    <li *ngFor=\"let crumb of crumbs$ | async\">\n      <a\n        [attr.aria-label]=\"\n          'navigation.navigateTo' | cxTranslate: { nav: crumb.label }\n        \"\n        [routerLink]=\"crumb.link\"\n        [innerHTML]=\"crumb.label\"\n      ></a>\n    </li>\n  </ol>\n</nav>\n<!-- Hidden page title for Screen Reader initialized after view to avoid old values -->\n<span class=\"cx-visually-hidden\" aria-live=\"polite\" aria-atomic=\"true\">\n  {{ lastestTitle$ | async }}\n</span>\n<h1>{{ title$ | async }}</h1>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: BreadcrumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-breadcrumb', changeDetection: ChangeDetectionStrategy.OnPush, template: "<nav [attr.aria-label]=\"'common.breadcrumbs' | cxTranslate\" tabindex=\"-1\">\n  <ol [attr.aria-label]=\"'common.breadcrumbs' | cxTranslate\">\n    <li *ngFor=\"let crumb of crumbs$ | async\">\n      <a\n        [attr.aria-label]=\"\n          'navigation.navigateTo' | cxTranslate: { nav: crumb.label }\n        \"\n        [routerLink]=\"crumb.link\"\n        [innerHTML]=\"crumb.label\"\n      ></a>\n    </li>\n  </ol>\n</nav>\n<!-- Hidden page title for Screen Reader initialized after view to avoid old values -->\n<span class=\"cx-visually-hidden\" aria-live=\"polite\" aria-atomic=\"true\">\n  {{ lastestTitle$ | async }}\n</span>\n<h1>{{ title$ | async }}</h1>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CmsComponentData }, { type: i2.PageMetaService }, { type: i2.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yZWZyb250bGliL2Ntcy1jb21wb25lbnRzL25hdmlnYXRpb24vYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvY21zLWNvbXBvbmVudHMvbmF2aWdhdGlvbi9icmVhZGNydW1iL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFNM0UsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7OztBQU96RSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsa0JBQWtCO0lBR3pELFlBQ1MsU0FBb0QsRUFDakQsZUFBZ0MsRUFDbEMsV0FBK0I7UUFFdkMsS0FBSyxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUozQixjQUFTLEdBQVQsU0FBUyxDQUEyQztRQUNqRCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDbEMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO0lBR3pDLENBQUM7SUFFRCxRQUFRO1FBQ04sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU8sU0FBUztRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDO1lBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFO1lBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztTQUMxQyxDQUFDLENBQUMsSUFBSSxDQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQ3hFLENBQ0YsQ0FBQztJQUNKLENBQUM7O2dIQXpCVSxtQkFBbUI7b0dBQW5CLG1CQUFtQiw0RUN0QmhDLGtxQkFrQkE7MkZESWEsbUJBQW1CO2tCQUwvQixTQUFTOytCQUNFLGVBQWUsbUJBRVIsdUJBQXVCLENBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ21zQnJlYWRjcnVtYnNDb21wb25lbnQsXG4gIFBhZ2VNZXRhU2VydmljZSxcbiAgVHJhbnNsYXRpb25TZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ21zQ29tcG9uZW50RGF0YSB9IGZyb20gJy4uLy4uLy4uL2Ntcy1zdHJ1Y3R1cmUvcGFnZS9tb2RlbC9jbXMtY29tcG9uZW50LWRhdGEnO1xuaW1wb3J0IHsgUGFnZVRpdGxlQ29tcG9uZW50IH0gZnJvbSAnLi4vcGFnZS1oZWFkZXIvcGFnZS10aXRsZS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1icmVhZGNydW1iJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYkNvbXBvbmVudCBleHRlbmRzIFBhZ2VUaXRsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNydW1icyQ6IE9ic2VydmFibGU8YW55W10+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjb21wb25lbnQ6IENtc0NvbXBvbmVudERhdGE8Q21zQnJlYWRjcnVtYnNDb21wb25lbnQ+LFxuICAgIHByb3RlY3RlZCBwYWdlTWV0YVNlcnZpY2U6IFBhZ2VNZXRhU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoY29tcG9uZW50LCBwYWdlTWV0YVNlcnZpY2UpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB0aGlzLnNldENydW1icygpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDcnVtYnMoKTogdm9pZCB7XG4gICAgdGhpcy5jcnVtYnMkID0gY29tYmluZUxhdGVzdChbXG4gICAgICB0aGlzLnBhZ2VNZXRhU2VydmljZS5nZXRNZXRhKCksXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZSgnY29tbW9uLmhvbWUnKSxcbiAgICBdKS5waXBlKFxuICAgICAgbWFwKChbbWV0YSwgdGV4dEhvbWVdKSA9PlxuICAgICAgICBtZXRhPy5icmVhZGNydW1icyA/IG1ldGEuYnJlYWRjcnVtYnMgOiBbeyBsYWJlbDogdGV4dEhvbWUsIGxpbms6ICcvJyB9XVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cbiIsIjxuYXYgW2F0dHIuYXJpYS1sYWJlbF09XCInY29tbW9uLmJyZWFkY3J1bWJzJyB8IGN4VHJhbnNsYXRlXCIgdGFiaW5kZXg9XCItMVwiPlxuICA8b2wgW2F0dHIuYXJpYS1sYWJlbF09XCInY29tbW9uLmJyZWFkY3J1bWJzJyB8IGN4VHJhbnNsYXRlXCI+XG4gICAgPGxpICpuZ0Zvcj1cImxldCBjcnVtYiBvZiBjcnVtYnMkIHwgYXN5bmNcIj5cbiAgICAgIDxhXG4gICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiXG4gICAgICAgICAgJ25hdmlnYXRpb24ubmF2aWdhdGVUbycgfCBjeFRyYW5zbGF0ZTogeyBuYXY6IGNydW1iLmxhYmVsIH1cbiAgICAgICAgXCJcbiAgICAgICAgW3JvdXRlckxpbmtdPVwiY3J1bWIubGlua1wiXG4gICAgICAgIFtpbm5lckhUTUxdPVwiY3J1bWIubGFiZWxcIlxuICAgICAgPjwvYT5cbiAgICA8L2xpPlxuICA8L29sPlxuPC9uYXY+XG48IS0tIEhpZGRlbiBwYWdlIHRpdGxlIGZvciBTY3JlZW4gUmVhZGVyIGluaXRpYWxpemVkIGFmdGVyIHZpZXcgdG8gYXZvaWQgb2xkIHZhbHVlcyAtLT5cbjxzcGFuIGNsYXNzPVwiY3gtdmlzdWFsbHktaGlkZGVuXCIgYXJpYS1saXZlPVwicG9saXRlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCI+XG4gIHt7IGxhc3Rlc3RUaXRsZSQgfCBhc3luYyB9fVxuPC9zcGFuPlxuPGgxPnt7IHRpdGxlJCB8IGFzeW5jIH19PC9oMT5cbiJdfQ==