/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { GlobalMessageType } from '@spartacus/core';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../shared/components/assistive-technology-message/assistive-technology-message.directive";
import * as i2 from "@angular/common";
import * as i3 from "../icon/icon.component";
import * as i4 from "@spartacus/core";
export class MessageComponent {
    constructor() {
        this.showBody = false;
        this.isVisibleCloseButton = true;
        this.closeMessage = new EventEmitter();
        this.buttonAction = new EventEmitter();
        this.iconTypes = ICON_TYPE;
        // Intentional empty constructor
    }
    get getCssClassesForMessage() {
        return {
            'cx-message-success': this.type === GlobalMessageType.MSG_TYPE_CONFIRMATION,
            'cx-message-info': this.type === GlobalMessageType.MSG_TYPE_INFO,
            'cx-message-warning': this.type === GlobalMessageType.MSG_TYPE_WARNING,
            'cx-message-danger': this.type === GlobalMessageType.MSG_TYPE_ERROR,
        };
    }
    get getIconType() {
        switch (this.type) {
            case GlobalMessageType.MSG_TYPE_WARNING:
                return ICON_TYPE.WARNING;
            case GlobalMessageType.MSG_TYPE_ERROR:
                return ICON_TYPE.ERROR;
            case GlobalMessageType.MSG_TYPE_INFO:
                return ICON_TYPE.INFO;
            default:
                return ICON_TYPE.SUCCESS;
        }
    }
}
MessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: MessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: MessageComponent, selector: "cx-message", inputs: { text: "text", actionButtonText: "actionButtonText", actionButtonMessage: "actionButtonMessage", accordionText: "accordionText", showBody: "showBody", isVisibleCloseButton: "isVisibleCloseButton", type: "type" }, outputs: { closeMessage: "closeMessage", buttonAction: "buttonAction" }, ngImport: i0, template: "<div [ngClass]=\"getCssClassesForMessage\" class=\"cx-message\">\n  <div class=\"cx-message-content\">\n    <div class=\"cx-message-header\">\n      <span class=\"cx-message-icon\">\n        <cx-icon [type]=\"getIconType\"></cx-icon>\n      </span>\n\n      <span class=\"cx-message-text\">\n        {{ text }}\n        <button\n          *ngIf=\"accordionText\"\n          (click)=\"showBody = !showBody\"\n          [attr.aria-expanded]=\"showBody\"\n          [attr.aria-label]=\"accordionText\"\n          aria-hidden=\"true\"\n          class=\"cx-message-accordion-button link cx-action-link\"\n          type=\"button\"\n        >\n          {{ accordionText }}\n          <cx-icon\n            [type]=\"showBody ? 'CARET_UP' : 'CARET_DOWN'\"\n            class=\"cx-message-accordion-icon\"\n          ></cx-icon>\n        </button>\n\n        <button\n          *ngIf=\"actionButtonText\"\n          (click)=\"buttonAction.emit()\"\n          [cxAtMessage]=\"actionButtonMessage\"\n          aria-hidden=\"true\"\n          class=\"btn btn-link cx-action-link\"\n          type=\"button\"\n        >\n          {{ actionButtonText }}\n        </button>\n      </span>\n\n      <button\n        *ngIf=\"isVisibleCloseButton\"\n        (click)=\"closeMessage.emit()\"\n        [attr.aria-label]=\"'common.close' | cxTranslate\"\n        [cxAtMessage]=\"'common.close' | cxTranslate\"\n        aria-hidden=\"true\"\n        class=\"close\"\n        type=\"button\"\n      >\n        <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n      </button>\n    </div>\n\n    <div *ngIf=\"showBody || !accordionText\" class=\"cx-message-body\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.AtMessageDirective, selector: "[cxAtMessage]", inputs: ["cxAtMessage"] }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: MessageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-message', template: "<div [ngClass]=\"getCssClassesForMessage\" class=\"cx-message\">\n  <div class=\"cx-message-content\">\n    <div class=\"cx-message-header\">\n      <span class=\"cx-message-icon\">\n        <cx-icon [type]=\"getIconType\"></cx-icon>\n      </span>\n\n      <span class=\"cx-message-text\">\n        {{ text }}\n        <button\n          *ngIf=\"accordionText\"\n          (click)=\"showBody = !showBody\"\n          [attr.aria-expanded]=\"showBody\"\n          [attr.aria-label]=\"accordionText\"\n          aria-hidden=\"true\"\n          class=\"cx-message-accordion-button link cx-action-link\"\n          type=\"button\"\n        >\n          {{ accordionText }}\n          <cx-icon\n            [type]=\"showBody ? 'CARET_UP' : 'CARET_DOWN'\"\n            class=\"cx-message-accordion-icon\"\n          ></cx-icon>\n        </button>\n\n        <button\n          *ngIf=\"actionButtonText\"\n          (click)=\"buttonAction.emit()\"\n          [cxAtMessage]=\"actionButtonMessage\"\n          aria-hidden=\"true\"\n          class=\"btn btn-link cx-action-link\"\n          type=\"button\"\n        >\n          {{ actionButtonText }}\n        </button>\n      </span>\n\n      <button\n        *ngIf=\"isVisibleCloseButton\"\n        (click)=\"closeMessage.emit()\"\n        [attr.aria-label]=\"'common.close' | cxTranslate\"\n        [cxAtMessage]=\"'common.close' | cxTranslate\"\n        aria-hidden=\"true\"\n        class=\"close\"\n        type=\"button\"\n      >\n        <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n      </button>\n    </div>\n\n    <div *ngIf=\"showBody || !accordionText\" class=\"cx-message-body\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { text: [{
                type: Input
            }], actionButtonText: [{
                type: Input
            }], actionButtonMessage: [{
                type: Input
            }], accordionText: [{
                type: Input
            }], showBody: [{
                type: Input
            }], isVisibleCloseButton: [{
                type: Input
            }], type: [{
                type: Input
            }], closeMessage: [{
                type: Output
            }], buttonAction: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yZWZyb250bGliL2Ntcy1jb21wb25lbnRzL21pc2MvbWVzc2FnZS9tZXNzYWdlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvY21zLWNvbXBvbmVudHMvbWlzYy9tZXNzYWdlL21lc3NhZ2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDOzs7Ozs7QUFLekUsTUFBTSxPQUFPLGdCQUFnQjtJQThCM0I7UUFoQkEsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUdqQix5QkFBb0IsR0FBRyxJQUFJLENBQUM7UUFNNUIsaUJBQVksR0FBdUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUd0RCxpQkFBWSxHQUF1QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXRELGNBQVMsR0FBRyxTQUFTLENBQUM7UUFHcEIsZ0NBQWdDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLHVCQUF1QjtRQUN6QixPQUFPO1lBQ0wsb0JBQW9CLEVBQ2xCLElBQUksQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUMscUJBQXFCO1lBQ3ZELGlCQUFpQixFQUFFLElBQUksQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUMsYUFBYTtZQUNoRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsSUFBSSxLQUFLLGlCQUFpQixDQUFDLGdCQUFnQjtZQUN0RSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsSUFBSSxLQUFLLGlCQUFpQixDQUFDLGNBQWM7U0FDcEUsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDakIsS0FBSyxpQkFBaUIsQ0FBQyxnQkFBZ0I7Z0JBQ3JDLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQztZQUMzQixLQUFLLGlCQUFpQixDQUFDLGNBQWM7Z0JBQ25DLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQztZQUN6QixLQUFLLGlCQUFpQixDQUFDLGFBQWE7Z0JBQ2xDLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztZQUN4QjtnQkFDRSxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDNUI7SUFDSCxDQUFDOzs2R0F2RFUsZ0JBQWdCO2lHQUFoQixnQkFBZ0IseVZDYjdCLDJxREF1REE7MkZEMUNhLGdCQUFnQjtrQkFKNUIsU0FBUzsrQkFDRSxZQUFZOzBFQUt0QixJQUFJO3NCQURILEtBQUs7Z0JBSU4sZ0JBQWdCO3NCQURmLEtBQUs7Z0JBSU4sbUJBQW1CO3NCQURsQixLQUFLO2dCQUlOLGFBQWE7c0JBRFosS0FBSztnQkFJTixRQUFRO3NCQURQLEtBQUs7Z0JBSU4sb0JBQW9CO3NCQURuQixLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSztnQkFJTixZQUFZO3NCQURYLE1BQU07Z0JBSVAsWUFBWTtzQkFEWCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdsb2JhbE1lc3NhZ2VUeXBlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LW1lc3NhZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWVzc2FnZS5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VDb21wb25lbnQge1xuICBASW5wdXQoKVxuICB0ZXh0OiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgYWN0aW9uQnV0dG9uVGV4dDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGFjdGlvbkJ1dHRvbk1lc3NhZ2U6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBhY2NvcmRpb25UZXh0OiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgc2hvd0JvZHkgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBpc1Zpc2libGVDbG9zZUJ1dHRvbiA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgdHlwZTogR2xvYmFsTWVzc2FnZVR5cGU7XG5cbiAgQE91dHB1dCgpXG4gIGNsb3NlTWVzc2FnZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBPdXRwdXQoKVxuICBidXR0b25BY3Rpb246IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBpY29uVHlwZXMgPSBJQ09OX1RZUEU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gSW50ZW50aW9uYWwgZW1wdHkgY29uc3RydWN0b3JcbiAgfVxuXG4gIGdldCBnZXRDc3NDbGFzc2VzRm9yTWVzc2FnZSgpOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdjeC1tZXNzYWdlLXN1Y2Nlc3MnOlxuICAgICAgICB0aGlzLnR5cGUgPT09IEdsb2JhbE1lc3NhZ2VUeXBlLk1TR19UWVBFX0NPTkZJUk1BVElPTixcbiAgICAgICdjeC1tZXNzYWdlLWluZm8nOiB0aGlzLnR5cGUgPT09IEdsb2JhbE1lc3NhZ2VUeXBlLk1TR19UWVBFX0lORk8sXG4gICAgICAnY3gtbWVzc2FnZS13YXJuaW5nJzogdGhpcy50eXBlID09PSBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9XQVJOSU5HLFxuICAgICAgJ2N4LW1lc3NhZ2UtZGFuZ2VyJzogdGhpcy50eXBlID09PSBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9FUlJPUixcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGdldEljb25UeXBlKCk6IElDT05fVFlQRSB7XG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgIGNhc2UgR2xvYmFsTWVzc2FnZVR5cGUuTVNHX1RZUEVfV0FSTklORzpcbiAgICAgICAgcmV0dXJuIElDT05fVFlQRS5XQVJOSU5HO1xuICAgICAgY2FzZSBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9FUlJPUjpcbiAgICAgICAgcmV0dXJuIElDT05fVFlQRS5FUlJPUjtcbiAgICAgIGNhc2UgR2xvYmFsTWVzc2FnZVR5cGUuTVNHX1RZUEVfSU5GTzpcbiAgICAgICAgcmV0dXJuIElDT05fVFlQRS5JTkZPO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIElDT05fVFlQRS5TVUNDRVNTO1xuICAgIH1cbiAgfVxufVxuIiwiPGRpdiBbbmdDbGFzc109XCJnZXRDc3NDbGFzc2VzRm9yTWVzc2FnZVwiIGNsYXNzPVwiY3gtbWVzc2FnZVwiPlxuICA8ZGl2IGNsYXNzPVwiY3gtbWVzc2FnZS1jb250ZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cImN4LW1lc3NhZ2UtaGVhZGVyXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImN4LW1lc3NhZ2UtaWNvblwiPlxuICAgICAgICA8Y3gtaWNvbiBbdHlwZV09XCJnZXRJY29uVHlwZVwiPjwvY3gtaWNvbj5cbiAgICAgIDwvc3Bhbj5cblxuICAgICAgPHNwYW4gY2xhc3M9XCJjeC1tZXNzYWdlLXRleHRcIj5cbiAgICAgICAge3sgdGV4dCB9fVxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgKm5nSWY9XCJhY2NvcmRpb25UZXh0XCJcbiAgICAgICAgICAoY2xpY2spPVwic2hvd0JvZHkgPSAhc2hvd0JvZHlcIlxuICAgICAgICAgIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwic2hvd0JvZHlcIlxuICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiYWNjb3JkaW9uVGV4dFwiXG4gICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICBjbGFzcz1cImN4LW1lc3NhZ2UtYWNjb3JkaW9uLWJ1dHRvbiBsaW5rIGN4LWFjdGlvbi1saW5rXCJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt7IGFjY29yZGlvblRleHQgfX1cbiAgICAgICAgICA8Y3gtaWNvblxuICAgICAgICAgICAgW3R5cGVdPVwic2hvd0JvZHkgPyAnQ0FSRVRfVVAnIDogJ0NBUkVUX0RPV04nXCJcbiAgICAgICAgICAgIGNsYXNzPVwiY3gtbWVzc2FnZS1hY2NvcmRpb24taWNvblwiXG4gICAgICAgICAgPjwvY3gtaWNvbj5cbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICpuZ0lmPVwiYWN0aW9uQnV0dG9uVGV4dFwiXG4gICAgICAgICAgKGNsaWNrKT1cImJ1dHRvbkFjdGlvbi5lbWl0KClcIlxuICAgICAgICAgIFtjeEF0TWVzc2FnZV09XCJhY3Rpb25CdXR0b25NZXNzYWdlXCJcbiAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGN4LWFjdGlvbi1saW5rXCJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt7IGFjdGlvbkJ1dHRvblRleHQgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L3NwYW4+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgKm5nSWY9XCJpc1Zpc2libGVDbG9zZUJ1dHRvblwiXG4gICAgICAgIChjbGljayk9XCJjbG9zZU1lc3NhZ2UuZW1pdCgpXCJcbiAgICAgICAgW2F0dHIuYXJpYS1sYWJlbF09XCInY29tbW9uLmNsb3NlJyB8IGN4VHJhbnNsYXRlXCJcbiAgICAgICAgW2N4QXRNZXNzYWdlXT1cIidjb21tb24uY2xvc2UnIHwgY3hUcmFuc2xhdGVcIlxuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICBjbGFzcz1cImNsb3NlXCJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICA+XG4gICAgICAgIDxjeC1pY29uIFt0eXBlXT1cImljb25UeXBlcy5DTE9TRVwiPjwvY3gtaWNvbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiAqbmdJZj1cInNob3dCb2R5IHx8ICFhY2NvcmRpb25UZXh0XCIgY2xhc3M9XCJjeC1tZXNzYWdlLWJvZHlcIj5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==