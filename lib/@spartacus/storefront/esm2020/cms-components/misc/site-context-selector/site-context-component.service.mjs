/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, Optional } from '@angular/core';
import { CURRENCY_CONTEXT_ID, isNotUndefined, LANGUAGE_CONTEXT_ID, } from '@spartacus/core';
import { of } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import { SiteContextType } from './site-context.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../cms-structure/page/model/cms-component-data";
import * as i2 from "@spartacus/core";
const LABELS = {
    [LANGUAGE_CONTEXT_ID]: 'Language',
    [CURRENCY_CONTEXT_ID]: 'Currency',
};
export class SiteContextComponentService {
    constructor(componentData, contextServiceMap, injector) {
        this.componentData = componentData;
        this.contextServiceMap = contextServiceMap;
        this.injector = injector;
    }
    getItems(context) {
        return this.getService(context).pipe(switchMap((service) => service.getAll()), switchMap((items) => this.getContext(context).pipe(switchMap((ctx) => {
            const itemsCopy = [];
            for (const item of items) {
                itemsCopy.push({
                    ...item,
                    label: this.getOptionLabel(item, ctx),
                });
            }
            return of(itemsCopy);
        }))));
    }
    getActiveItem(context) {
        return this.getService(context).pipe(switchMap((service) => service.getActive()));
    }
    getLabel(context) {
        return this.getContext(context).pipe(map((ctx) => {
            if (ctx) {
                return LABELS[ctx];
            }
        }));
    }
    setActive(value, context) {
        this.getService(context)
            .pipe(take(1))
            .subscribe((service) => {
            service.setActive(value);
        });
    }
    getService(context) {
        return this.getContext(context).pipe(map((ctx) => ctx ? this.getInjectedService(ctx) : undefined), filter(isNotUndefined));
    }
    getContext(context) {
        if (context) {
            if (context === SiteContextType.CURRENCY) {
                return of(CURRENCY_CONTEXT_ID);
            }
            else if (context === SiteContextType.LANGUAGE) {
                return of(LANGUAGE_CONTEXT_ID);
            }
            else {
                return of(context);
            }
        }
        else if (this.componentData) {
            return this.componentData.data$.pipe(map((data) => data.context), map((ctx) => {
                switch (ctx) {
                    case 'LANGUAGE':
                        return LANGUAGE_CONTEXT_ID;
                    case 'CURRENCY':
                        return CURRENCY_CONTEXT_ID;
                    default:
                        return ctx;
                }
            }));
        }
        return of(undefined);
    }
    getInjectedService(context) {
        return this.injector.get(this.contextServiceMap[context], undefined);
    }
    getOptionLabel(item, context) {
        switch (context) {
            case LANGUAGE_CONTEXT_ID:
                return item.nativeName;
            case CURRENCY_CONTEXT_ID:
                return item.symbol + ' ' + item.isocode;
            default:
                return item.isocode;
        }
    }
}
SiteContextComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SiteContextComponentService, deps: [{ token: i1.CmsComponentData, optional: true }, { token: i2.ContextServiceMap }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
SiteContextComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SiteContextComponentService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SiteContextComponentService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CmsComponentData, decorators: [{
                    type: Optional
                }] }, { type: i2.ContextServiceMap }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,