/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, ViewChildren, } from '@angular/core';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
import { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../../cms-structure/page/model/index";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/common";
import * as i4 from "../../../cms-structure/page/component/component-wrapper.directive";
import * as i5 from "../../../cms-structure/outlet/outlet.directive";
export class TabParagraphContainerComponent {
    constructor(componentData, cmsService, winRef) {
        this.componentData = componentData;
        this.cmsService = cmsService;
        this.winRef = winRef;
        this.activeTabNum = 0;
        this.tabTitleParams = [];
        this.components$ = this.componentData.data$.pipe(distinctUntilChanged((x, y) => x?.components === y?.components), tap((data) => {
            this.ariaLabel = `${data?.uid}.tabPanelContainerRegion`;
        }), switchMap((data) => combineLatest((data?.components ?? '').split(' ').map((component) => this.cmsService.getComponentData(component).pipe(distinctUntilChanged(), map((tab) => {
            if (!tab) {
                return undefined;
            }
            if (!tab.flexType) {
                tab = {
                    ...tab,
                    flexType: tab.typeCode,
                };
            }
            return {
                ...tab,
                title: `${data.uid}.tabs.${tab.uid}`,
            };
        }))))));
    }
    select(tabNum, event) {
        this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;
        if (event && event?.target) {
            const target = event.target;
            const parentNode = target.parentNode;
            this.winRef?.nativeWindow?.scrollTo({
                left: 0,
                top: parentNode.offsetTop,
                behavior: 'smooth',
            });
        }
    }
    ngOnInit() {
        this.activeTabNum =
            this.winRef?.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;
    }
    ngAfterViewInit() {
        // If the sub cms components data exist, the components created before ngAfterViewInit are called.
        // In this case, the title parameters are directly pulled from them.
        if (this.children.length > 0) {
            this.getTitleParams(this.children);
        }
    }
    tabCompLoaded(componentRef) {
        this.tabTitleParams.push(componentRef.instance.tabTitleParam$);
    }
    getTitleParams(children) {
        children.forEach((comp) => {
            this.tabTitleParams.push(comp['cmpRef']?.instance.tabTitleParam$ ?? null);
        });
    }
}
TabParagraphContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: TabParagraphContainerComponent, deps: [{ token: i1.CmsComponentData }, { token: i2.CmsService }, { token: i2.WindowRef }], target: i0.ɵɵFactoryTarget.Component });
TabParagraphContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: TabParagraphContainerComponent, selector: "cx-tab-paragraph-container", viewQueries: [{ propertyName: "children", predicate: ComponentWrapperDirective, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"components$ | async as components\">\n  <div\n    role=\"region\"\n    tabindex=\"-1\"\n    [attr.aria-label]=\"ariaLabel | cxTranslate\"\n    class=\"container\"\n  >\n    <ng-container *ngFor=\"let component of components; let i = index\">\n      <ng-container *ngIf=\"component\">\n        <button\n          [class.active]=\"i === activeTabNum\"\n          (click)=\"select(i, $event)\"\n          [attr.aria-expanded]=\"i === activeTabNum\"\n        >\n          {{\n            component.title | cxTranslate: { param: tabTitleParams[i] | async }\n          }}\n\n          <span class=\"accordion-icon\" aria-hidden=\"true\"></span>\n        </button>\n\n        <div\n          [class.active]=\"i === activeTabNum\"\n          class=\"cx-tab-paragraph-content\"\n          tabindex=\"0\"\n          role=\"presentation\"\n        >\n          <ng-template [cxOutlet]=\"component.flexType\" [cxOutletContext]=\"{}\">\n            <ng-container\n              [cxComponentWrapper]=\"component\"\n              (cxComponentRef)=\"tabCompLoaded($event)\"\n            ></ng-container>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.ComponentWrapperDirective, selector: "[cxComponentWrapper]", inputs: ["cxComponentWrapper"], outputs: ["cxComponentRef"] }, { kind: "directive", type: i5.OutletDirective, selector: "[cxOutlet]", inputs: ["cxOutlet", "cxOutletContext", "cxOutletDefer", "cxComponentRef"], outputs: ["loaded", "cxComponentRefChange"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: TabParagraphContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-tab-paragraph-container', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"components$ | async as components\">\n  <div\n    role=\"region\"\n    tabindex=\"-1\"\n    [attr.aria-label]=\"ariaLabel | cxTranslate\"\n    class=\"container\"\n  >\n    <ng-container *ngFor=\"let component of components; let i = index\">\n      <ng-container *ngIf=\"component\">\n        <button\n          [class.active]=\"i === activeTabNum\"\n          (click)=\"select(i, $event)\"\n          [attr.aria-expanded]=\"i === activeTabNum\"\n        >\n          {{\n            component.title | cxTranslate: { param: tabTitleParams[i] | async }\n          }}\n\n          <span class=\"accordion-icon\" aria-hidden=\"true\"></span>\n        </button>\n\n        <div\n          [class.active]=\"i === activeTabNum\"\n          class=\"cx-tab-paragraph-content\"\n          tabindex=\"0\"\n          role=\"presentation\"\n        >\n          <ng-template [cxOutlet]=\"component.flexType\" [cxOutletContext]=\"{}\">\n            <ng-container\n              [cxComponentWrapper]=\"component\"\n              (cxComponentRef)=\"tabCompLoaded($event)\"\n            ></ng-container>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CmsComponentData }, { type: i2.CmsService }, { type: i2.WindowRef }]; }, propDecorators: { children: [{
                type: ViewChildren,
                args: [ComponentWrapperDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,