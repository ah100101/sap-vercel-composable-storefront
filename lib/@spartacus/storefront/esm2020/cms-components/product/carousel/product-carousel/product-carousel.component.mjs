/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../../cms-structure/page/model/cms-component-data";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/common";
import * as i4 from "../../../../shared/components/carousel/carousel.component";
import * as i5 from "../product-carousel-item/product-carousel-item.component";
export class ProductCarouselComponent {
    constructor(componentData, productService) {
        this.componentData = componentData;
        this.productService = productService;
        this.PRODUCT_SCOPE = [
            "list" /* ProductScope.LIST */,
            "price" /* ProductScope.PRICE */,
            "stock" /* ProductScope.STOCK */,
        ];
        this.componentData$ = this.componentData.data$.pipe(filter((data) => Boolean(data)));
        /**
         * returns an Observable string for the title.
         */
        this.title$ = this.componentData$.pipe(map((data) => data.title));
        /**
         * Observable that holds an Array of Observables. This is done, so that
         * the component UI could consider to lazy load the UI components when they're
         * in the viewpoint.
         */
        this.items$ = this.componentData$.pipe(map((data) => data.productCodes?.trim().split(' ') ?? []), map((codes) => codes.map((code) => this.productService.get(code, [...this.PRODUCT_SCOPE]))));
    }
}
ProductCarouselComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ProductCarouselComponent, deps: [{ token: i1.CmsComponentData }, { token: i2.ProductService }], target: i0.ɵɵFactoryTarget.Component });
ProductCarouselComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: ProductCarouselComponent, selector: "cx-product-carousel", ngImport: i0, template: "<cx-carousel\n  *ngIf=\"items$ | async as items\"\n  role=\"region\"\n  [attr.aria-label]=\"\n    'productCarousel.carouselLabel' | cxTranslate: { title: title$ | async }\n  \"\n  [items]=\"items\"\n  [title]=\"title$ | async\"\n  [template]=\"carouselItem\"\n  itemWidth=\"285px\"\n>\n</cx-carousel>\n\n<ng-template #carouselItem let-item=\"item\">\n  <cx-product-carousel-item [item]=\"item\"></cx-product-carousel-item>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.CarouselComponent, selector: "cx-carousel", inputs: ["title", "items", "template", "itemWidth", "hideIndicators", "indicatorIcon", "previousIcon", "nextIcon"] }, { kind: "component", type: i5.ProductCarouselItemComponent, selector: "cx-product-carousel-item", inputs: ["item"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ProductCarouselComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-product-carousel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<cx-carousel\n  *ngIf=\"items$ | async as items\"\n  role=\"region\"\n  [attr.aria-label]=\"\n    'productCarousel.carouselLabel' | cxTranslate: { title: title$ | async }\n  \"\n  [items]=\"items\"\n  [title]=\"title$ | async\"\n  [template]=\"carouselItem\"\n  itemWidth=\"285px\"\n>\n</cx-carousel>\n\n<ng-template #carouselItem let-item=\"item\">\n  <cx-product-carousel-item [item]=\"item\"></cx-product-carousel-item>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CmsComponentData }, { type: i2.ProductService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1jYXJvdXNlbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yZWZyb250bGliL2Ntcy1jb21wb25lbnRzL3Byb2R1Y3QvY2Fyb3VzZWwvcHJvZHVjdC1jYXJvdXNlbC9wcm9kdWN0LWNhcm91c2VsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvY21zLWNvbXBvbmVudHMvcHJvZHVjdC9jYXJvdXNlbC9wcm9kdWN0LWNhcm91c2VsL3Byb2R1Y3QtY2Fyb3VzZWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRbkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQVE3QyxNQUFNLE9BQU8sd0JBQXdCO0lBaUNuQyxZQUNZLGFBQXNDLEVBQ3RDLGNBQThCO1FBRDlCLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtRQUN0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFsQ3ZCLGtCQUFhLEdBQUc7Ozs7U0FJbEMsQ0FBQztRQUVNLG1CQUFjLEdBQXNCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDdkUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDaEMsQ0FBQztRQUVGOztXQUVHO1FBQ0gsV0FBTSxHQUFtQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDL0QsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsV0FBTSxHQUNKLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUN6RCxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNaLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUN2RCxDQUNGLENBQ0YsQ0FBQztJQUtELENBQUM7O3FIQXBDTyx3QkFBd0I7eUdBQXhCLHdCQUF3QiwyREN0QnJDLDBiQWdCQTsyRkRNYSx3QkFBd0I7a0JBTHBDLFNBQVM7K0JBQ0UscUJBQXFCLG1CQUVkLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDbXNQcm9kdWN0Q2Fyb3VzZWxDb21wb25lbnQgYXMgbW9kZWwsXG4gIFByb2R1Y3QsXG4gIFByb2R1Y3RTY29wZSxcbiAgUHJvZHVjdFNlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENtc0NvbXBvbmVudERhdGEgfSBmcm9tICcuLi8uLi8uLi8uLi9jbXMtc3RydWN0dXJlL3BhZ2UvbW9kZWwvY21zLWNvbXBvbmVudC1kYXRhJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtcHJvZHVjdC1jYXJvdXNlbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9kdWN0LWNhcm91c2VsLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RDYXJvdXNlbENvbXBvbmVudCB7XG4gIHByb3RlY3RlZCByZWFkb25seSBQUk9EVUNUX1NDT1BFID0gW1xuICAgIFByb2R1Y3RTY29wZS5MSVNULFxuICAgIFByb2R1Y3RTY29wZS5QUklDRSxcbiAgICBQcm9kdWN0U2NvcGUuU1RPQ0ssXG4gIF07XG5cbiAgcHJpdmF0ZSBjb21wb25lbnREYXRhJDogT2JzZXJ2YWJsZTxtb2RlbD4gPSB0aGlzLmNvbXBvbmVudERhdGEuZGF0YSQucGlwZShcbiAgICBmaWx0ZXIoKGRhdGEpID0+IEJvb2xlYW4oZGF0YSkpXG4gICk7XG5cbiAgLyoqXG4gICAqIHJldHVybnMgYW4gT2JzZXJ2YWJsZSBzdHJpbmcgZm9yIHRoZSB0aXRsZS5cbiAgICovXG4gIHRpdGxlJDogT2JzZXJ2YWJsZTxzdHJpbmcgfCB1bmRlZmluZWQ+ID0gdGhpcy5jb21wb25lbnREYXRhJC5waXBlKFxuICAgIG1hcCgoZGF0YSkgPT4gZGF0YS50aXRsZSlcbiAgKTtcblxuICAvKipcbiAgICogT2JzZXJ2YWJsZSB0aGF0IGhvbGRzIGFuIEFycmF5IG9mIE9ic2VydmFibGVzLiBUaGlzIGlzIGRvbmUsIHNvIHRoYXRcbiAgICogdGhlIGNvbXBvbmVudCBVSSBjb3VsZCBjb25zaWRlciB0byBsYXp5IGxvYWQgdGhlIFVJIGNvbXBvbmVudHMgd2hlbiB0aGV5J3JlXG4gICAqIGluIHRoZSB2aWV3cG9pbnQuXG4gICAqL1xuICBpdGVtcyQ6IE9ic2VydmFibGU8T2JzZXJ2YWJsZTxQcm9kdWN0IHwgdW5kZWZpbmVkPltdPiA9XG4gICAgdGhpcy5jb21wb25lbnREYXRhJC5waXBlKFxuICAgICAgbWFwKChkYXRhKSA9PiBkYXRhLnByb2R1Y3RDb2Rlcz8udHJpbSgpLnNwbGl0KCcgJykgPz8gW10pLFxuICAgICAgbWFwKChjb2RlcykgPT5cbiAgICAgICAgY29kZXMubWFwKChjb2RlKSA9PlxuICAgICAgICAgIHRoaXMucHJvZHVjdFNlcnZpY2UuZ2V0KGNvZGUsIFsuLi50aGlzLlBST0RVQ1RfU0NPUEVdKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RGF0YTogQ21zQ29tcG9uZW50RGF0YTxtb2RlbD4sXG4gICAgcHJvdGVjdGVkIHByb2R1Y3RTZXJ2aWNlOiBQcm9kdWN0U2VydmljZVxuICApIHt9XG59XG4iLCI8Y3gtY2Fyb3VzZWxcbiAgKm5nSWY9XCJpdGVtcyQgfCBhc3luYyBhcyBpdGVtc1wiXG4gIHJvbGU9XCJyZWdpb25cIlxuICBbYXR0ci5hcmlhLWxhYmVsXT1cIlxuICAgICdwcm9kdWN0Q2Fyb3VzZWwuY2Fyb3VzZWxMYWJlbCcgfCBjeFRyYW5zbGF0ZTogeyB0aXRsZTogdGl0bGUkIHwgYXN5bmMgfVxuICBcIlxuICBbaXRlbXNdPVwiaXRlbXNcIlxuICBbdGl0bGVdPVwidGl0bGUkIHwgYXN5bmNcIlxuICBbdGVtcGxhdGVdPVwiY2Fyb3VzZWxJdGVtXCJcbiAgaXRlbVdpZHRoPVwiMjg1cHhcIlxuPlxuPC9jeC1jYXJvdXNlbD5cblxuPG5nLXRlbXBsYXRlICNjYXJvdXNlbEl0ZW0gbGV0LWl0ZW09XCJpdGVtXCI+XG4gIDxjeC1wcm9kdWN0LWNhcm91c2VsLWl0ZW0gW2l0ZW1dPVwiaXRlbVwiPjwvY3gtcHJvZHVjdC1jYXJvdXNlbC1pdGVtPlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==