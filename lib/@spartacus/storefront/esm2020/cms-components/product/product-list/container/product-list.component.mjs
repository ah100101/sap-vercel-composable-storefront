/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component } from '@angular/core';
import { GlobalMessageType, } from '@spartacus/core';
import { BehaviorSubject, combineLatest, Subscription } from 'rxjs';
import { filter, skip, take } from 'rxjs/operators';
import { ViewModes } from '../product-view/product-view.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../../cms-structure/page/index";
import * as i2 from "./product-list-component.service";
import * as i3 from "@spartacus/core";
import * as i4 from "../../../../shared/config/view-config";
import * as i5 from "@angular/common";
import * as i6 from "../../../../shared/components/list-navigation/sorting/sorting.component";
import * as i7 from "../../../../shared/components/list-navigation/pagination/pagination.component";
import * as i8 from "../product-list-item/product-list-item.component";
import * as i9 from "../product-grid-item/product-grid-item.component";
import * as i10 from "../product-view/product-view.component";
import * as i11 from "./product-scroll/product-scroll.component";
export class ProductListComponent {
    constructor(pageLayoutService, productListComponentService, globalMessageService, scrollConfig) {
        this.pageLayoutService = pageLayoutService;
        this.productListComponentService = productListComponentService;
        this.globalMessageService = globalMessageService;
        this.scrollConfig = scrollConfig;
        this.subscription = new Subscription();
        this.model$ = this.productListComponentService.model$;
        this.viewMode$ = new BehaviorSubject(ViewModes.Grid);
        this.ViewModes = ViewModes;
    }
    ngOnInit() {
        this.isInfiniteScroll = this.scrollConfig.view?.infiniteScroll?.active;
        this.subscription.add(this.pageLayoutService.templateName$
            .pipe(take(1))
            .subscribe((template) => {
            this.viewMode$.next(template === 'ProductGridPageTemplate'
                ? ViewModes.Grid
                : ViewModes.List);
        }));
        this.subscription.add(combineLatest([this.model$, this.viewMode$])
            .pipe(skip(1), filter(([model, mode]) => !!model && !!mode))
            .subscribe(() => this.globalMessageService.add({ key: 'sorting.pageViewUpdated' }, GlobalMessageType.MSG_TYPE_ASSISTIVE, 500)));
    }
    sortList(sortCode) {
        this.productListComponentService.sort(sortCode);
    }
    setViewMode(mode) {
        this.viewMode$.next(mode);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ProductListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ProductListComponent, deps: [{ token: i1.PageLayoutService }, { token: i2.ProductListComponentService }, { token: i3.GlobalMessageService }, { token: i4.ViewConfig }], target: i0.ɵɵFactoryTarget.Component });
ProductListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: ProductListComponent, selector: "cx-product-list", ngImport: i0, template: "<div class=\"cx-page\" *ngIf=\"model$ | async as model\">\n  <section\n    tabindex=\"-1\"\n    class=\"cx-page-section\"\n    [attr.aria-label]=\"'productList.productListResults' | cxTranslate\"\n  >\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-12 col-lg-12\" *ngIf=\"viewMode$ | async as viewMode\">\n          <div class=\"cx-sorting top\">\n            <div class=\"row\">\n              <label\n                class=\"form-group cx-sort-dropdown col-12 col-lg-4 mr-auto\"\n              >\n                <span>{{ 'productList.sortBy' | cxTranslate }}</span>\n                <cx-sorting\n                  [sortOptions]=\"model.sorts\"\n                  (sortListEvent)=\"sortList($event)\"\n                  [selectedOption]=\"model.pagination?.sort\"\n                  [ariaLabel]=\"'productList.sortResults' | cxTranslate\"\n                  ariaControls=\"product-results-list\"\n                  placeholder=\"{{ 'productList.sortBy' | cxTranslate }}\"\n                ></cx-sorting>\n              </label>\n              <div *ngIf=\"!isInfiniteScroll\" class=\"col-auto\">\n                <div\n                  class=\"cx-pagination\"\n                  [attr.aria-label]=\"\n                    'productList.productSearchPagination' | cxTranslate\n                  \"\n                >\n                  <cx-pagination\n                    [pagination]=\"model.pagination\"\n                    queryParam=\"currentPage\"\n                    [defaultPage]=\"0\"\n                  ></cx-pagination>\n                </div>\n              </div>\n              <div class=\"col-auto ml-auto ml-lg-0\">\n                <cx-product-view\n                  (modeChange)=\"setViewMode($event)\"\n                  [mode]=\"viewMode\"\n                ></cx-product-view>\n              </div>\n            </div>\n          </div>\n          <div id=\"product-results-list\" class=\"cx-product-container\">\n            <!-- Product list when using pagination -->\n            <ng-container *ngIf=\"!isInfiniteScroll; else infiniteScroll\">\n              <ng-container *ngIf=\"viewMode === ViewModes.Grid\">\n                <div class=\"row\">\n                  <cx-product-grid-item\n                    *ngFor=\"let product of model?.products\"\n                    [product]=\"product\"\n                    class=\"col-12 col-sm-6 col-md-4\"\n                  ></cx-product-grid-item>\n                </div>\n              </ng-container>\n\n              <ng-container *ngIf=\"viewMode === ViewModes.List\">\n                <cx-product-list-item\n                  *ngFor=\"let product of model?.products\"\n                  [product]=\"product\"\n                  class=\"cx-product-search-list\"\n                ></cx-product-list-item>\n              </ng-container>\n            </ng-container>\n\n            <!-- Product list when using infinite scroll -->\n            <ng-template #infiniteScroll>\n              <cx-product-scroll\n                [scrollConfig]=\"scrollConfig\"\n                [model]=\"model\"\n                [inputViewMode]=\"viewMode\"\n              ></cx-product-scroll>\n            </ng-template>\n          </div>\n          <div class=\"cx-sorting bottom\">\n            <div class=\"row\">\n              <label\n                class=\"form-group cx-sort-dropdown col-12 col-lg-4 mr-auto\"\n              >\n                <span>{{ 'productList.sortBy' | cxTranslate }}</span>\n                <cx-sorting\n                  [sortOptions]=\"model.sorts\"\n                  (sortListEvent)=\"sortList($event)\"\n                  [selectedOption]=\"model.pagination?.sort\"\n                  [ariaLabel]=\"'productList.sortResults' | cxTranslate\"\n                  ariaControls=\"product-results-list\"\n                  placeholder=\"{{ 'productList.sortBy' | cxTranslate }}\"\n                ></cx-sorting>\n              </label>\n              <div\n                *ngIf=\"!isInfiniteScroll\"\n                class=\"col-auto\"\n                [attr.aria-label]=\"\n                  'productList.productSearchPagination' | cxTranslate\n                \"\n              >\n                <div class=\"cx-pagination\">\n                  <cx-pagination\n                    [pagination]=\"model.pagination\"\n                    queryParam=\"currentPage\"\n                    [defaultPage]=\"0\"\n                  ></cx-pagination>\n                </div>\n              </div>\n              <div class=\"col-auto ml-auto ml-lg-0\">\n                <cx-product-view\n                  (modeChange)=\"setViewMode($event)\"\n                  [mode]=\"viewMode\"\n                ></cx-product-view>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n", dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "ariaControls", "ariaLabel", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { kind: "component", type: i7.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }, { kind: "component", type: i8.ProductListItemComponent, selector: "cx-product-list-item", inputs: ["product"] }, { kind: "component", type: i9.ProductGridItemComponent, selector: "cx-product-grid-item", inputs: ["product"] }, { kind: "component", type: i10.ProductViewComponent, selector: "cx-product-view", inputs: ["mode"], outputs: ["modeChange"] }, { kind: "component", type: i11.ProductScrollComponent, selector: "cx-product-scroll", inputs: ["scrollConfig", "model", "inputViewMode"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ProductListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-product-list', template: "<div class=\"cx-page\" *ngIf=\"model$ | async as model\">\n  <section\n    tabindex=\"-1\"\n    class=\"cx-page-section\"\n    [attr.aria-label]=\"'productList.productListResults' | cxTranslate\"\n  >\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-12 col-lg-12\" *ngIf=\"viewMode$ | async as viewMode\">\n          <div class=\"cx-sorting top\">\n            <div class=\"row\">\n              <label\n                class=\"form-group cx-sort-dropdown col-12 col-lg-4 mr-auto\"\n              >\n                <span>{{ 'productList.sortBy' | cxTranslate }}</span>\n                <cx-sorting\n                  [sortOptions]=\"model.sorts\"\n                  (sortListEvent)=\"sortList($event)\"\n                  [selectedOption]=\"model.pagination?.sort\"\n                  [ariaLabel]=\"'productList.sortResults' | cxTranslate\"\n                  ariaControls=\"product-results-list\"\n                  placeholder=\"{{ 'productList.sortBy' | cxTranslate }}\"\n                ></cx-sorting>\n              </label>\n              <div *ngIf=\"!isInfiniteScroll\" class=\"col-auto\">\n                <div\n                  class=\"cx-pagination\"\n                  [attr.aria-label]=\"\n                    'productList.productSearchPagination' | cxTranslate\n                  \"\n                >\n                  <cx-pagination\n                    [pagination]=\"model.pagination\"\n                    queryParam=\"currentPage\"\n                    [defaultPage]=\"0\"\n                  ></cx-pagination>\n                </div>\n              </div>\n              <div class=\"col-auto ml-auto ml-lg-0\">\n                <cx-product-view\n                  (modeChange)=\"setViewMode($event)\"\n                  [mode]=\"viewMode\"\n                ></cx-product-view>\n              </div>\n            </div>\n          </div>\n          <div id=\"product-results-list\" class=\"cx-product-container\">\n            <!-- Product list when using pagination -->\n            <ng-container *ngIf=\"!isInfiniteScroll; else infiniteScroll\">\n              <ng-container *ngIf=\"viewMode === ViewModes.Grid\">\n                <div class=\"row\">\n                  <cx-product-grid-item\n                    *ngFor=\"let product of model?.products\"\n                    [product]=\"product\"\n                    class=\"col-12 col-sm-6 col-md-4\"\n                  ></cx-product-grid-item>\n                </div>\n              </ng-container>\n\n              <ng-container *ngIf=\"viewMode === ViewModes.List\">\n                <cx-product-list-item\n                  *ngFor=\"let product of model?.products\"\n                  [product]=\"product\"\n                  class=\"cx-product-search-list\"\n                ></cx-product-list-item>\n              </ng-container>\n            </ng-container>\n\n            <!-- Product list when using infinite scroll -->\n            <ng-template #infiniteScroll>\n              <cx-product-scroll\n                [scrollConfig]=\"scrollConfig\"\n                [model]=\"model\"\n                [inputViewMode]=\"viewMode\"\n              ></cx-product-scroll>\n            </ng-template>\n          </div>\n          <div class=\"cx-sorting bottom\">\n            <div class=\"row\">\n              <label\n                class=\"form-group cx-sort-dropdown col-12 col-lg-4 mr-auto\"\n              >\n                <span>{{ 'productList.sortBy' | cxTranslate }}</span>\n                <cx-sorting\n                  [sortOptions]=\"model.sorts\"\n                  (sortListEvent)=\"sortList($event)\"\n                  [selectedOption]=\"model.pagination?.sort\"\n                  [ariaLabel]=\"'productList.sortResults' | cxTranslate\"\n                  ariaControls=\"product-results-list\"\n                  placeholder=\"{{ 'productList.sortBy' | cxTranslate }}\"\n                ></cx-sorting>\n              </label>\n              <div\n                *ngIf=\"!isInfiniteScroll\"\n                class=\"col-auto\"\n                [attr.aria-label]=\"\n                  'productList.productSearchPagination' | cxTranslate\n                \"\n              >\n                <div class=\"cx-pagination\">\n                  <cx-pagination\n                    [pagination]=\"model.pagination\"\n                    queryParam=\"currentPage\"\n                    [defaultPage]=\"0\"\n                  ></cx-pagination>\n                </div>\n              </div>\n              <div class=\"col-auto ml-auto ml-lg-0\">\n                <cx-product-view\n                  (modeChange)=\"setViewMode($event)\"\n                  [mode]=\"viewMode\"\n                ></cx-product-view>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.PageLayoutService }, { type: i2.ProductListComponentService }, { type: i3.GlobalMessageService }, { type: i4.ViewConfig }]; } });
//# sourceMappingURL=data:application/json;base64,