/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, Input } from '@angular/core';
import { Subscription } from 'rxjs';
import { ViewModes } from '../../product-view/product-view.component';
import * as i0 from "@angular/core";
import * as i1 from "../product-list-component.service";
import * as i2 from "@angular/common";
import * as i3 from "ngx-infinite-scroll";
import * as i4 from "../../../../../shared/components/spinner/spinner.component";
import * as i5 from "../../product-list-item/product-list-item.component";
import * as i6 from "../../product-grid-item/product-grid-item.component";
import * as i7 from "@spartacus/core";
export class ProductScrollComponent {
    set setConfig(inputConfig) {
        this.setComponentConfigurations(inputConfig);
    }
    set setModel(inputModel) {
        this.infiniteScrollOperations(inputModel);
    }
    set setViewMode(inputViewMode) {
        this.inputViewMode = inputViewMode;
        //If viewMode is already set (meaning it is not the first load)
        //Reset the product list
        if (this.viewMode) {
            this.resetListOnViewModeChange();
        }
        else {
            //If viewMode is not set (meaning it is the first load)
            //Set the viewMode
            this.viewMode = inputViewMode;
        }
    }
    constructor(productListComponentService, ref) {
        this.productListComponentService = productListComponentService;
        this.ref = ref;
        this.subscription = new Subscription();
        this.ViewModes = ViewModes;
        this.appendProducts = false;
        this.resetList = false;
        this.isMaxProducts = false;
        this.isLastPage = false;
        this.isEmpty = false;
    }
    scrollPage(pageNumber) {
        this.appendProducts = true;
        this.ref.markForCheck();
        this.productListComponentService.getPageItems(pageNumber);
    }
    loadNextPage(pageNumber) {
        this.isMaxProducts = false;
        this.scrollPage(pageNumber);
    }
    scrollToTop() {
        window.scroll(0, 0);
    }
    setComponentConfigurations(scrollConfig) {
        const isButton = scrollConfig.view?.infiniteScroll?.showMoreButton;
        const configProductLimit = scrollConfig.view?.infiniteScroll?.productLimit;
        //Display "show more" button every time when button configuration is true
        //Otherwise, only display "show more" when the configuration product limit is reached
        this.productLimit = isButton ? 1 : configProductLimit;
    }
    infiniteScrollOperations(inputModel) {
        if (this.appendProducts) {
            this.model = {
                ...inputModel,
                products: this.model.products?.concat(inputModel.products ?? []),
            };
        }
        else {
            this.model = inputModel;
            this.maxProducts = this.productLimit;
        }
        this.setConditions();
        this.ref.markForCheck();
    }
    resetListOnViewModeChange() {
        this.scrollToTop();
        this.resetList = true;
        this.productListComponentService.getPageItems(0);
    }
    //Set booleans after model has been retrieved
    setConditions() {
        this.isEmpty = !this.model.products || this.model.products.length === 0;
        this.isLastPage =
            this.model.pagination?.currentPage ===
                (this.model.pagination?.totalPages ?? 0) - 1;
        if (this.model.products) {
            this.isMaxProducts =
                this.productLimit !== undefined &&
                    this.productLimit !== 0 &&
                    this.model.products.length >= (this.maxProducts ?? 0);
            //Add the productLimit to the current number of products to determine the next max number of products
            if (this.isMaxProducts) {
                this.maxProducts =
                    this.model.products.length + (this.productLimit ?? 0);
            }
        }
        //Only change viewMode once the new model is set
        //This prevents flickering issues
        if (this.viewMode !== this.inputViewMode) {
            this.viewMode = this.inputViewMode;
        }
        this.resetList = false;
        this.appendProducts = false;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ProductScrollComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ProductScrollComponent, deps: [{ token: i1.ProductListComponentService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ProductScrollComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: ProductScrollComponent, selector: "cx-product-scroll", inputs: { setConfig: ["scrollConfig", "setConfig"], setModel: ["model", "setModel"], setViewMode: ["inputViewMode", "setViewMode"] }, ngImport: i0, template: "<ng-container *ngIf=\"viewMode === ViewModes.Grid\">\n  <div\n    infiniteScroll\n    [infiniteScrollDistance]=\"5\"\n    [infiniteScrollThrottle]=\"50\"\n    [infiniteScrollDisabled]=\"isMaxProducts || isLastPage || isEmpty\"\n    (scrolled)=\"scrollPage((model?.pagination?.currentPage ?? 0) + 1)\"\n  >\n    <div class=\"row\">\n      <cx-product-grid-item\n        *ngFor=\"let product of model?.products\"\n        [product]=\"product\"\n        class=\"col-12 col-sm-6 col-md-4\"\n      ></cx-product-grid-item>\n    </div>\n    <div\n      [className]=\"\n        !isLastPage && (model?.pagination?.currentPage ?? 0) > 0\n          ? 'cx-double-btn-container grid-btn-padding'\n          : 'cx-single-btn-container grid-btn-padding'\n      \"\n    >\n      <div\n        *ngIf=\"\n          (isMaxProducts || isLastPage) &&\n          (model?.pagination?.currentPage ?? 0) > 0\n        \"\n        (click)=\"scrollToTop()\"\n        class=\"btn btn-block btn-secondary\"\n      >\n        {{ 'productList.backToTopBtn' | cxTranslate }}\n      </div>\n      <div\n        *ngIf=\"isMaxProducts && !isLastPage\"\n        (click)=\"loadNextPage((model?.pagination?.currentPage ?? 0) + 1)\"\n        class=\"btn btn-block btn-secondary align-btn\"\n      >\n        {{ 'productList.showMoreBtn' | cxTranslate }}\n      </div>\n    </div>\n    <div *ngIf=\"appendProducts\" class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"viewMode === ViewModes.List\">\n  <div\n    infiniteScroll\n    [infiniteScrollDistance]=\"3\"\n    [infiniteScrollThrottle]=\"50\"\n    [infiniteScrollDisabled]=\"isMaxProducts || isLastPage || isEmpty\"\n    (scrolled)=\"scrollPage((model?.pagination?.currentPage ?? 0) + 1)\"\n  >\n    <cx-product-list-item\n      *ngFor=\"let product of model?.products\"\n      [product]=\"product\"\n      class=\"cx-product-search-list\"\n    ></cx-product-list-item>\n    <div\n      [className]=\"\n        !isLastPage && (model?.pagination?.currentPage ?? 0) > 0\n          ? 'cx-double-btn-container'\n          : 'cx-single-btn-container'\n      \"\n    >\n      <div\n        *ngIf=\"\n          (isMaxProducts || isLastPage) &&\n          (model?.pagination?.currentPage ?? 0) > 0\n        \"\n        (click)=\"scrollToTop()\"\n        class=\"btn btn-block btn-secondary\"\n      >\n        {{ 'productList.backToTopBtn' | cxTranslate }}\n      </div>\n      <div\n        *ngIf=\"isMaxProducts && !isLastPage\"\n        (click)=\"loadNextPage((model?.pagination?.currentPage ?? 0) + 1)\"\n        class=\"btn btn-block btn-secondary align-btn\"\n      >\n        {{ 'productList.showMoreBtn' | cxTranslate }}\n      </div>\n    </div>\n    <div *ngIf=\"appendProducts\" class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.InfiniteScrollDirective, selector: "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", inputs: ["infiniteScrollDistance", "infiniteScrollUpDistance", "infiniteScrollThrottle", "infiniteScrollDisabled", "infiniteScrollContainer", "scrollWindow", "immediateCheck", "horizontal", "alwaysCallback", "fromRoot"], outputs: ["scrolled", "scrolledUp"] }, { kind: "component", type: i4.SpinnerComponent, selector: "cx-spinner" }, { kind: "component", type: i5.ProductListItemComponent, selector: "cx-product-list-item", inputs: ["product"] }, { kind: "component", type: i6.ProductGridItemComponent, selector: "cx-product-grid-item", inputs: ["product"] }, { kind: "pipe", type: i7.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ProductScrollComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-product-scroll', template: "<ng-container *ngIf=\"viewMode === ViewModes.Grid\">\n  <div\n    infiniteScroll\n    [infiniteScrollDistance]=\"5\"\n    [infiniteScrollThrottle]=\"50\"\n    [infiniteScrollDisabled]=\"isMaxProducts || isLastPage || isEmpty\"\n    (scrolled)=\"scrollPage((model?.pagination?.currentPage ?? 0) + 1)\"\n  >\n    <div class=\"row\">\n      <cx-product-grid-item\n        *ngFor=\"let product of model?.products\"\n        [product]=\"product\"\n        class=\"col-12 col-sm-6 col-md-4\"\n      ></cx-product-grid-item>\n    </div>\n    <div\n      [className]=\"\n        !isLastPage && (model?.pagination?.currentPage ?? 0) > 0\n          ? 'cx-double-btn-container grid-btn-padding'\n          : 'cx-single-btn-container grid-btn-padding'\n      \"\n    >\n      <div\n        *ngIf=\"\n          (isMaxProducts || isLastPage) &&\n          (model?.pagination?.currentPage ?? 0) > 0\n        \"\n        (click)=\"scrollToTop()\"\n        class=\"btn btn-block btn-secondary\"\n      >\n        {{ 'productList.backToTopBtn' | cxTranslate }}\n      </div>\n      <div\n        *ngIf=\"isMaxProducts && !isLastPage\"\n        (click)=\"loadNextPage((model?.pagination?.currentPage ?? 0) + 1)\"\n        class=\"btn btn-block btn-secondary align-btn\"\n      >\n        {{ 'productList.showMoreBtn' | cxTranslate }}\n      </div>\n    </div>\n    <div *ngIf=\"appendProducts\" class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"viewMode === ViewModes.List\">\n  <div\n    infiniteScroll\n    [infiniteScrollDistance]=\"3\"\n    [infiniteScrollThrottle]=\"50\"\n    [infiniteScrollDisabled]=\"isMaxProducts || isLastPage || isEmpty\"\n    (scrolled)=\"scrollPage((model?.pagination?.currentPage ?? 0) + 1)\"\n  >\n    <cx-product-list-item\n      *ngFor=\"let product of model?.products\"\n      [product]=\"product\"\n      class=\"cx-product-search-list\"\n    ></cx-product-list-item>\n    <div\n      [className]=\"\n        !isLastPage && (model?.pagination?.currentPage ?? 0) > 0\n          ? 'cx-double-btn-container'\n          : 'cx-single-btn-container'\n      \"\n    >\n      <div\n        *ngIf=\"\n          (isMaxProducts || isLastPage) &&\n          (model?.pagination?.currentPage ?? 0) > 0\n        \"\n        (click)=\"scrollToTop()\"\n        class=\"btn btn-block btn-secondary\"\n      >\n        {{ 'productList.backToTopBtn' | cxTranslate }}\n      </div>\n      <div\n        *ngIf=\"isMaxProducts && !isLastPage\"\n        (click)=\"loadNextPage((model?.pagination?.currentPage ?? 0) + 1)\"\n        class=\"btn btn-block btn-secondary align-btn\"\n      >\n        {{ 'productList.showMoreBtn' | cxTranslate }}\n      </div>\n    </div>\n    <div *ngIf=\"appendProducts\" class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ProductListComponentService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { setConfig: [{
                type: Input,
                args: ['scrollConfig']
            }], setModel: [{
                type: Input,
                args: ['model']
            }], setViewMode: [{
                type: Input,
                args: ['inputViewMode']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zY3JvbGwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9jb250YWluZXIvcHJvZHVjdC1zY3JvbGwvcHJvZHVjdC1zY3JvbGwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9jb250YWluZXIvcHJvZHVjdC1zY3JvbGwvcHJvZHVjdC1zY3JvbGwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBcUIsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7Ozs7Ozs7O0FBT3RFLE1BQU0sT0FBTyxzQkFBc0I7SUFHakMsSUFDSSxTQUFTLENBQUMsV0FBdUI7UUFDbkMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFHRCxJQUNJLFFBQVEsQ0FBQyxVQUE2QjtRQUN4QyxJQUFJLENBQUMsd0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUdELElBQ0ksV0FBVyxDQUFDLGFBQXdCO1FBQ3RDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLCtEQUErRDtRQUMvRCx3QkFBd0I7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1NBQ2xDO2FBQU07WUFDTCx1REFBdUQ7WUFDdkQsa0JBQWtCO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQWFELFlBQ1UsMkJBQXdELEVBQ3hELEdBQXNCO1FBRHRCLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBNkI7UUFDeEQsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUF6Q3hCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQWdDMUMsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUN2QixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDbkIsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUtiLENBQUM7SUFFSixVQUFVLENBQUMsVUFBa0I7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsMkJBQTJCLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxZQUFZLENBQUMsVUFBa0I7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsV0FBVztRQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTywwQkFBMEIsQ0FBQyxZQUF3QjtRQUN6RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUM7UUFDbkUsTUFBTSxrQkFBa0IsR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUM7UUFFM0UseUVBQXlFO1FBQ3pFLHFGQUFxRjtRQUNyRixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztJQUN4RCxDQUFDO0lBRU8sd0JBQXdCLENBQUMsVUFBNkI7UUFDNUQsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUc7Z0JBQ1gsR0FBRyxVQUFVO2dCQUNiLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7YUFDakUsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztZQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDdEM7UUFDRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU8seUJBQXlCO1FBQy9CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsMkJBQTJCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCw2Q0FBNkM7SUFDckMsYUFBYTtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsVUFBVTtZQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFdBQVc7Z0JBQ2xDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsVUFBVSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxhQUFhO2dCQUNoQixJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVM7b0JBQy9CLElBQUksQ0FBQyxZQUFZLEtBQUssQ0FBQztvQkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUV4RCxxR0FBcUc7WUFDckcsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN0QixJQUFJLENBQUMsV0FBVztvQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3pEO1NBQ0Y7UUFFRCxnREFBZ0Q7UUFDaEQsaUNBQWlDO1FBQ2pDLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUNwQztRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzttSEExSFUsc0JBQXNCO3VHQUF0QixzQkFBc0IsK0xDakJuQywreUZBeUZBOzJGRHhFYSxzQkFBc0I7a0JBSmxDLFNBQVM7K0JBQ0UsbUJBQW1CO2tKQU96QixTQUFTO3NCQURaLEtBQUs7dUJBQUMsY0FBYztnQkFPakIsUUFBUTtzQkFEWCxLQUFLO3VCQUFDLE9BQU87Z0JBT1YsV0FBVztzQkFEZCxLQUFLO3VCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9kdWN0U2VhcmNoUGFnZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFZpZXdDb25maWcgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uZmlnL3ZpZXctY29uZmlnJztcbmltcG9ydCB7IFZpZXdNb2RlcyB9IGZyb20gJy4uLy4uL3Byb2R1Y3Qtdmlldy9wcm9kdWN0LXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IFByb2R1Y3RMaXN0Q29tcG9uZW50U2VydmljZSB9IGZyb20gJy4uL3Byb2R1Y3QtbGlzdC1jb21wb25lbnQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXByb2R1Y3Qtc2Nyb2xsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2R1Y3Qtc2Nyb2xsLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdFNjcm9sbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIEBJbnB1dCgnc2Nyb2xsQ29uZmlnJylcbiAgc2V0IHNldENvbmZpZyhpbnB1dENvbmZpZzogVmlld0NvbmZpZykge1xuICAgIHRoaXMuc2V0Q29tcG9uZW50Q29uZmlndXJhdGlvbnMoaW5wdXRDb25maWcpO1xuICB9XG5cbiAgbW9kZWw6IFByb2R1Y3RTZWFyY2hQYWdlO1xuICBASW5wdXQoJ21vZGVsJylcbiAgc2V0IHNldE1vZGVsKGlucHV0TW9kZWw6IFByb2R1Y3RTZWFyY2hQYWdlKSB7XG4gICAgdGhpcy5pbmZpbml0ZVNjcm9sbE9wZXJhdGlvbnMoaW5wdXRNb2RlbCk7XG4gIH1cblxuICBpbnB1dFZpZXdNb2RlOiBWaWV3TW9kZXM7XG4gIEBJbnB1dCgnaW5wdXRWaWV3TW9kZScpXG4gIHNldCBzZXRWaWV3TW9kZShpbnB1dFZpZXdNb2RlOiBWaWV3TW9kZXMpIHtcbiAgICB0aGlzLmlucHV0Vmlld01vZGUgPSBpbnB1dFZpZXdNb2RlO1xuICAgIC8vSWYgdmlld01vZGUgaXMgYWxyZWFkeSBzZXQgKG1lYW5pbmcgaXQgaXMgbm90IHRoZSBmaXJzdCBsb2FkKVxuICAgIC8vUmVzZXQgdGhlIHByb2R1Y3QgbGlzdFxuICAgIGlmICh0aGlzLnZpZXdNb2RlKSB7XG4gICAgICB0aGlzLnJlc2V0TGlzdE9uVmlld01vZGVDaGFuZ2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9JZiB2aWV3TW9kZSBpcyBub3Qgc2V0IChtZWFuaW5nIGl0IGlzIHRoZSBmaXJzdCBsb2FkKVxuICAgICAgLy9TZXQgdGhlIHZpZXdNb2RlXG4gICAgICB0aGlzLnZpZXdNb2RlID0gaW5wdXRWaWV3TW9kZTtcbiAgICB9XG4gIH1cblxuICB2aWV3TW9kZTogVmlld01vZGVzO1xuICBwcm9kdWN0TGltaXQ6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgbWF4UHJvZHVjdHM6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICBWaWV3TW9kZXMgPSBWaWV3TW9kZXM7XG4gIGFwcGVuZFByb2R1Y3RzID0gZmFsc2U7XG4gIHJlc2V0TGlzdCA9IGZhbHNlO1xuICBpc01heFByb2R1Y3RzID0gZmFsc2U7XG4gIGlzTGFzdFBhZ2UgPSBmYWxzZTtcbiAgaXNFbXB0eSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcHJvZHVjdExpc3RDb21wb25lbnRTZXJ2aWNlOiBQcm9kdWN0TGlzdENvbXBvbmVudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICBzY3JvbGxQYWdlKHBhZ2VOdW1iZXI6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuYXBwZW5kUHJvZHVjdHMgPSB0cnVlO1xuICAgIHRoaXMucmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIHRoaXMucHJvZHVjdExpc3RDb21wb25lbnRTZXJ2aWNlLmdldFBhZ2VJdGVtcyhwYWdlTnVtYmVyKTtcbiAgfVxuXG4gIGxvYWROZXh0UGFnZShwYWdlTnVtYmVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmlzTWF4UHJvZHVjdHMgPSBmYWxzZTtcbiAgICB0aGlzLnNjcm9sbFBhZ2UocGFnZU51bWJlcik7XG4gIH1cblxuICBzY3JvbGxUb1RvcCgpOiB2b2lkIHtcbiAgICB3aW5kb3cuc2Nyb2xsKDAsIDApO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDb21wb25lbnRDb25maWd1cmF0aW9ucyhzY3JvbGxDb25maWc6IFZpZXdDb25maWcpOiB2b2lkIHtcbiAgICBjb25zdCBpc0J1dHRvbiA9IHNjcm9sbENvbmZpZy52aWV3Py5pbmZpbml0ZVNjcm9sbD8uc2hvd01vcmVCdXR0b247XG4gICAgY29uc3QgY29uZmlnUHJvZHVjdExpbWl0ID0gc2Nyb2xsQ29uZmlnLnZpZXc/LmluZmluaXRlU2Nyb2xsPy5wcm9kdWN0TGltaXQ7XG5cbiAgICAvL0Rpc3BsYXkgXCJzaG93IG1vcmVcIiBidXR0b24gZXZlcnkgdGltZSB3aGVuIGJ1dHRvbiBjb25maWd1cmF0aW9uIGlzIHRydWVcbiAgICAvL090aGVyd2lzZSwgb25seSBkaXNwbGF5IFwic2hvdyBtb3JlXCIgd2hlbiB0aGUgY29uZmlndXJhdGlvbiBwcm9kdWN0IGxpbWl0IGlzIHJlYWNoZWRcbiAgICB0aGlzLnByb2R1Y3RMaW1pdCA9IGlzQnV0dG9uID8gMSA6IGNvbmZpZ1Byb2R1Y3RMaW1pdDtcbiAgfVxuXG4gIHByaXZhdGUgaW5maW5pdGVTY3JvbGxPcGVyYXRpb25zKGlucHV0TW9kZWw6IFByb2R1Y3RTZWFyY2hQYWdlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYXBwZW5kUHJvZHVjdHMpIHtcbiAgICAgIHRoaXMubW9kZWwgPSB7XG4gICAgICAgIC4uLmlucHV0TW9kZWwsXG4gICAgICAgIHByb2R1Y3RzOiB0aGlzLm1vZGVsLnByb2R1Y3RzPy5jb25jYXQoaW5wdXRNb2RlbC5wcm9kdWN0cyA/PyBbXSksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vZGVsID0gaW5wdXRNb2RlbDtcbiAgICAgIHRoaXMubWF4UHJvZHVjdHMgPSB0aGlzLnByb2R1Y3RMaW1pdDtcbiAgICB9XG4gICAgdGhpcy5zZXRDb25kaXRpb25zKCk7XG4gICAgdGhpcy5yZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0TGlzdE9uVmlld01vZGVDaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxUb1RvcCgpO1xuICAgIHRoaXMucmVzZXRMaXN0ID0gdHJ1ZTtcbiAgICB0aGlzLnByb2R1Y3RMaXN0Q29tcG9uZW50U2VydmljZS5nZXRQYWdlSXRlbXMoMCk7XG4gIH1cblxuICAvL1NldCBib29sZWFucyBhZnRlciBtb2RlbCBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgcHJpdmF0ZSBzZXRDb25kaXRpb25zKCk6IHZvaWQge1xuICAgIHRoaXMuaXNFbXB0eSA9ICF0aGlzLm1vZGVsLnByb2R1Y3RzIHx8IHRoaXMubW9kZWwucHJvZHVjdHMubGVuZ3RoID09PSAwO1xuXG4gICAgdGhpcy5pc0xhc3RQYWdlID1cbiAgICAgIHRoaXMubW9kZWwucGFnaW5hdGlvbj8uY3VycmVudFBhZ2UgPT09XG4gICAgICAodGhpcy5tb2RlbC5wYWdpbmF0aW9uPy50b3RhbFBhZ2VzID8/IDApIC0gMTtcblxuICAgIGlmICh0aGlzLm1vZGVsLnByb2R1Y3RzKSB7XG4gICAgICB0aGlzLmlzTWF4UHJvZHVjdHMgPVxuICAgICAgICB0aGlzLnByb2R1Y3RMaW1pdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHRoaXMucHJvZHVjdExpbWl0ICE9PSAwICYmXG4gICAgICAgIHRoaXMubW9kZWwucHJvZHVjdHMubGVuZ3RoID49ICh0aGlzLm1heFByb2R1Y3RzID8/IDApO1xuXG4gICAgICAvL0FkZCB0aGUgcHJvZHVjdExpbWl0IHRvIHRoZSBjdXJyZW50IG51bWJlciBvZiBwcm9kdWN0cyB0byBkZXRlcm1pbmUgdGhlIG5leHQgbWF4IG51bWJlciBvZiBwcm9kdWN0c1xuICAgICAgaWYgKHRoaXMuaXNNYXhQcm9kdWN0cykge1xuICAgICAgICB0aGlzLm1heFByb2R1Y3RzID1cbiAgICAgICAgICB0aGlzLm1vZGVsLnByb2R1Y3RzLmxlbmd0aCArICh0aGlzLnByb2R1Y3RMaW1pdCA/PyAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL09ubHkgY2hhbmdlIHZpZXdNb2RlIG9uY2UgdGhlIG5ldyBtb2RlbCBpcyBzZXRcbiAgICAvL1RoaXMgcHJldmVudHMgZmxpY2tlcmluZyBpc3N1ZXNcbiAgICBpZiAodGhpcy52aWV3TW9kZSAhPT0gdGhpcy5pbnB1dFZpZXdNb2RlKSB7XG4gICAgICB0aGlzLnZpZXdNb2RlID0gdGhpcy5pbnB1dFZpZXdNb2RlO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXRMaXN0ID0gZmFsc2U7XG4gICAgdGhpcy5hcHBlbmRQcm9kdWN0cyA9IGZhbHNlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInZpZXdNb2RlID09PSBWaWV3TW9kZXMuR3JpZFwiPlxuICA8ZGl2XG4gICAgaW5maW5pdGVTY3JvbGxcbiAgICBbaW5maW5pdGVTY3JvbGxEaXN0YW5jZV09XCI1XCJcbiAgICBbaW5maW5pdGVTY3JvbGxUaHJvdHRsZV09XCI1MFwiXG4gICAgW2luZmluaXRlU2Nyb2xsRGlzYWJsZWRdPVwiaXNNYXhQcm9kdWN0cyB8fCBpc0xhc3RQYWdlIHx8IGlzRW1wdHlcIlxuICAgIChzY3JvbGxlZCk9XCJzY3JvbGxQYWdlKChtb2RlbD8ucGFnaW5hdGlvbj8uY3VycmVudFBhZ2UgPz8gMCkgKyAxKVwiXG4gID5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICA8Y3gtcHJvZHVjdC1ncmlkLWl0ZW1cbiAgICAgICAgKm5nRm9yPVwibGV0IHByb2R1Y3Qgb2YgbW9kZWw/LnByb2R1Y3RzXCJcbiAgICAgICAgW3Byb2R1Y3RdPVwicHJvZHVjdFwiXG4gICAgICAgIGNsYXNzPVwiY29sLTEyIGNvbC1zbS02IGNvbC1tZC00XCJcbiAgICAgID48L2N4LXByb2R1Y3QtZ3JpZC1pdGVtPlxuICAgIDwvZGl2PlxuICAgIDxkaXZcbiAgICAgIFtjbGFzc05hbWVdPVwiXG4gICAgICAgICFpc0xhc3RQYWdlICYmIChtb2RlbD8ucGFnaW5hdGlvbj8uY3VycmVudFBhZ2UgPz8gMCkgPiAwXG4gICAgICAgICAgPyAnY3gtZG91YmxlLWJ0bi1jb250YWluZXIgZ3JpZC1idG4tcGFkZGluZydcbiAgICAgICAgICA6ICdjeC1zaW5nbGUtYnRuLWNvbnRhaW5lciBncmlkLWJ0bi1wYWRkaW5nJ1xuICAgICAgXCJcbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgKGlzTWF4UHJvZHVjdHMgfHwgaXNMYXN0UGFnZSkgJiZcbiAgICAgICAgICAobW9kZWw/LnBhZ2luYXRpb24/LmN1cnJlbnRQYWdlID8/IDApID4gMFxuICAgICAgICBcIlxuICAgICAgICAoY2xpY2spPVwic2Nyb2xsVG9Ub3AoKVwiXG4gICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1ibG9jayBidG4tc2Vjb25kYXJ5XCJcbiAgICAgID5cbiAgICAgICAge3sgJ3Byb2R1Y3RMaXN0LmJhY2tUb1RvcEJ0bicgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgICpuZ0lmPVwiaXNNYXhQcm9kdWN0cyAmJiAhaXNMYXN0UGFnZVwiXG4gICAgICAgIChjbGljayk9XCJsb2FkTmV4dFBhZ2UoKG1vZGVsPy5wYWdpbmF0aW9uPy5jdXJyZW50UGFnZSA/PyAwKSArIDEpXCJcbiAgICAgICAgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1zZWNvbmRhcnkgYWxpZ24tYnRuXCJcbiAgICAgID5cbiAgICAgICAge3sgJ3Byb2R1Y3RMaXN0LnNob3dNb3JlQnRuJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2ICpuZ0lmPVwiYXBwZW5kUHJvZHVjdHNcIiBjbGFzcz1cImN4LXNwaW5uZXJcIj5cbiAgICAgIDxjeC1zcGlubmVyPjwvY3gtc3Bpbm5lcj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLWNvbnRhaW5lciAqbmdJZj1cInZpZXdNb2RlID09PSBWaWV3TW9kZXMuTGlzdFwiPlxuICA8ZGl2XG4gICAgaW5maW5pdGVTY3JvbGxcbiAgICBbaW5maW5pdGVTY3JvbGxEaXN0YW5jZV09XCIzXCJcbiAgICBbaW5maW5pdGVTY3JvbGxUaHJvdHRsZV09XCI1MFwiXG4gICAgW2luZmluaXRlU2Nyb2xsRGlzYWJsZWRdPVwiaXNNYXhQcm9kdWN0cyB8fCBpc0xhc3RQYWdlIHx8IGlzRW1wdHlcIlxuICAgIChzY3JvbGxlZCk9XCJzY3JvbGxQYWdlKChtb2RlbD8ucGFnaW5hdGlvbj8uY3VycmVudFBhZ2UgPz8gMCkgKyAxKVwiXG4gID5cbiAgICA8Y3gtcHJvZHVjdC1saXN0LWl0ZW1cbiAgICAgICpuZ0Zvcj1cImxldCBwcm9kdWN0IG9mIG1vZGVsPy5wcm9kdWN0c1wiXG4gICAgICBbcHJvZHVjdF09XCJwcm9kdWN0XCJcbiAgICAgIGNsYXNzPVwiY3gtcHJvZHVjdC1zZWFyY2gtbGlzdFwiXG4gICAgPjwvY3gtcHJvZHVjdC1saXN0LWl0ZW0+XG4gICAgPGRpdlxuICAgICAgW2NsYXNzTmFtZV09XCJcbiAgICAgICAgIWlzTGFzdFBhZ2UgJiYgKG1vZGVsPy5wYWdpbmF0aW9uPy5jdXJyZW50UGFnZSA/PyAwKSA+IDBcbiAgICAgICAgICA/ICdjeC1kb3VibGUtYnRuLWNvbnRhaW5lcidcbiAgICAgICAgICA6ICdjeC1zaW5nbGUtYnRuLWNvbnRhaW5lcidcbiAgICAgIFwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgIChpc01heFByb2R1Y3RzIHx8IGlzTGFzdFBhZ2UpICYmXG4gICAgICAgICAgKG1vZGVsPy5wYWdpbmF0aW9uPy5jdXJyZW50UGFnZSA/PyAwKSA+IDBcbiAgICAgICAgXCJcbiAgICAgICAgKGNsaWNrKT1cInNjcm9sbFRvVG9wKClcIlxuICAgICAgICBjbGFzcz1cImJ0biBidG4tYmxvY2sgYnRuLXNlY29uZGFyeVwiXG4gICAgICA+XG4gICAgICAgIHt7ICdwcm9kdWN0TGlzdC5iYWNrVG9Ub3BCdG4nIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdlxuICAgICAgICAqbmdJZj1cImlzTWF4UHJvZHVjdHMgJiYgIWlzTGFzdFBhZ2VcIlxuICAgICAgICAoY2xpY2spPVwibG9hZE5leHRQYWdlKChtb2RlbD8ucGFnaW5hdGlvbj8uY3VycmVudFBhZ2UgPz8gMCkgKyAxKVwiXG4gICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1ibG9jayBidG4tc2Vjb25kYXJ5IGFsaWduLWJ0blwiXG4gICAgICA+XG4gICAgICAgIHt7ICdwcm9kdWN0TGlzdC5zaG93TW9yZUJ0bicgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiAqbmdJZj1cImFwcGVuZFByb2R1Y3RzXCIgY2xhc3M9XCJjeC1zcGlubmVyXCI+XG4gICAgICA8Y3gtc3Bpbm5lcj48L2N4LXNwaW5uZXI+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=