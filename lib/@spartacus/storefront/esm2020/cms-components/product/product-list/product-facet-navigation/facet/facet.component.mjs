/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, ViewChildren, } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/facet.service";
import * as i2 from "../../../../../shared/components/assistive-technology-message/assistive-technology-message.directive";
import * as i3 from "@angular/common";
import * as i4 from "../../../../misc/icon/icon.component";
import * as i5 from "../../../../../layout/a11y/keyboard-focus/focus.directive";
import * as i6 from "@angular/router";
import * as i7 from "@spartacus/core";
export class FacetComponent {
    set facet(value) {
        this._facet = value;
        this.isMultiSelect = !!value.multiSelect;
        this.state$ = this.facetService.getState(value);
    }
    get facet() {
        return this._facet;
    }
    constructor(facetService, elementRef, cd) {
        this.facetService = facetService;
        this.elementRef = elementRef;
        this.cd = cd;
        /** configurable icon that is used to collapse the facet group  */
        this.expandIcon = ICON_TYPE.EXPAND;
        this.collapseIcon = ICON_TYPE.COLLAPSE;
    }
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    toggleGroup(event) {
        const host = this.elementRef.nativeElement;
        const isLocked = this.keyboardFocus?.isLocked;
        this.facetService.toggle(this.facet, this.isExpanded);
        if (!isLocked || this.isExpanded) {
            host.focus();
            // we stop propagating the event as otherwise the focus on the host will trigger
            // an unlock event from the LockFocus directive.
            event.stopPropagation();
        }
    }
    get isExpanded() {
        return this.values?.first?.nativeElement.offsetParent !== null;
    }
    openLink(event) {
        event.target.click();
        event.preventDefault();
    }
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    increaseVisibleValues() {
        this.facetService.increaseVisibleValues(this.facet);
    }
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    decreaseVisibleValues() {
        this.facetService.decreaseVisibleValues(this.facet);
    }
    getLinkParams(value) {
        return this.facetService.getLinkParams(value.query?.query?.value ?? '');
    }
}
FacetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: FacetComponent, deps: [{ token: i1.FacetService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FacetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: FacetComponent, selector: "cx-facet", inputs: { expandIcon: "expandIcon", collapseIcon: "collapseIcon", facet: "facet" }, host: { properties: { "class.multi-select": "this.isMultiSelect" } }, viewQueries: [{ propertyName: "keyboardFocus", first: true, predicate: FocusDirective, descendants: true }, { propertyName: "values", predicate: ["facetValue"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"state$ | async as state\">\n  <button\n    class=\"heading\"\n    (click)=\"toggleGroup($event)\"\n    [attr.aria-expanded]=\"isExpanded\"\n    [attr.aria-label]=\"\n      'productFacetNavigation.filterBy.name' | cxTranslate: { name: facet.name }\n    \"\n  >\n    {{ facet.name }}\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\n  </button>\n\n  <div>\n    <a\n      *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\n      #facetValue\n      routerLink=\"./\"\n      [queryParams]=\"getLinkParams(value)\"\n      class=\"value\"\n      [class.selected]=\"value.selected\"\n      [cxFocus]=\"{ key: value.name }\"\n      (keydown.space)=\"openLink($any($event))\"\n      [attr.role]=\"facet.multiSelect ? 'checkbox' : null\"\n      [attr.aria-checked]=\"facet.multiSelect ? value.selected : null\"\n      attr.aria-label=\"{{\n        'productFacetNavigation.ariaLabelItemsAvailable'\n          | cxTranslate: { name: value.name, count: value.count }\n      }}\"\n    >\n      <span aria-hidden=\"true\"\n        >{{ value.name\n        }}<span aria-hidden=\"true\" class=\"count\">{{ value.count }}</span></span\n      >\n    </a>\n\n    <div class=\"more\">\n      <a\n        *ngFor=\"\n          let value of facet.values\n            | slice: state.topVisible ?? 0:state.maxVisible\n        \"\n        #facetValue\n        routerLink=\"./\"\n        [queryParams]=\"getLinkParams(value)\"\n        class=\"value\"\n        [class.selected]=\"value.selected\"\n        [cxFocus]=\"{ key: value.name }\"\n        (keydown.space)=\"openLink($any($event))\"\n      >\n        <span\n          >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\n        >\n      </a>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          state.topVisible &&\n          state.maxVisible > state.topVisible\n        \"\n        (click)=\"decreaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.decreaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"true\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowLess' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showLess' | cxTranslate }}\n      </button>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          facet.values &&\n          state.maxVisible > 0 &&\n          state.maxVisible < facet.values.length\n        \"\n        (click)=\"increaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.increaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"false\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowMore' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showMore' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2.AtMessageDirective, selector: "[cxAtMessage]", inputs: ["cxAtMessage"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i6.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.SlicePipe, name: "slice" }, { kind: "pipe", type: i7.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: FacetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-facet', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"state$ | async as state\">\n  <button\n    class=\"heading\"\n    (click)=\"toggleGroup($event)\"\n    [attr.aria-expanded]=\"isExpanded\"\n    [attr.aria-label]=\"\n      'productFacetNavigation.filterBy.name' | cxTranslate: { name: facet.name }\n    \"\n  >\n    {{ facet.name }}\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\n  </button>\n\n  <div>\n    <a\n      *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\n      #facetValue\n      routerLink=\"./\"\n      [queryParams]=\"getLinkParams(value)\"\n      class=\"value\"\n      [class.selected]=\"value.selected\"\n      [cxFocus]=\"{ key: value.name }\"\n      (keydown.space)=\"openLink($any($event))\"\n      [attr.role]=\"facet.multiSelect ? 'checkbox' : null\"\n      [attr.aria-checked]=\"facet.multiSelect ? value.selected : null\"\n      attr.aria-label=\"{{\n        'productFacetNavigation.ariaLabelItemsAvailable'\n          | cxTranslate: { name: value.name, count: value.count }\n      }}\"\n    >\n      <span aria-hidden=\"true\"\n        >{{ value.name\n        }}<span aria-hidden=\"true\" class=\"count\">{{ value.count }}</span></span\n      >\n    </a>\n\n    <div class=\"more\">\n      <a\n        *ngFor=\"\n          let value of facet.values\n            | slice: state.topVisible ?? 0:state.maxVisible\n        \"\n        #facetValue\n        routerLink=\"./\"\n        [queryParams]=\"getLinkParams(value)\"\n        class=\"value\"\n        [class.selected]=\"value.selected\"\n        [cxFocus]=\"{ key: value.name }\"\n        (keydown.space)=\"openLink($any($event))\"\n      >\n        <span\n          >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\n        >\n      </a>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          state.topVisible &&\n          state.maxVisible > state.topVisible\n        \"\n        (click)=\"decreaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.decreaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"true\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowLess' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showLess' | cxTranslate }}\n      </button>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          facet.values &&\n          state.maxVisible > 0 &&\n          state.maxVisible < facet.values.length\n        \"\n        (click)=\"increaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.increaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"false\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowMore' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showMore' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FacetService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { expandIcon: [{
                type: Input
            }], collapseIcon: [{
                type: Input
            }], isMultiSelect: [{
                type: HostBinding,
                args: ['class.multi-select']
            }], values: [{
                type: ViewChildren,
                args: ['facetValue']
            }], keyboardFocus: [{
                type: ViewChild,
                args: [FocusDirective]
            }], facet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vZmFjZXQvZmFjZXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vZmFjZXQvZmFjZXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFDTCx1QkFBdUIsRUFFdkIsU0FBUyxFQUVULFdBQVcsRUFDWCxLQUFLLEVBRUwsU0FBUyxFQUNULFlBQVksR0FDYixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDL0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJEQUEyRCxDQUFDOzs7Ozs7Ozs7QUFTM0YsTUFBTSxPQUFPLGNBQWM7SUFlekIsSUFDSSxLQUFLLENBQUMsS0FBWTtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFDWSxZQUEwQixFQUMxQixVQUFtQyxFQUNuQyxFQUFxQjtRQUZyQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUNuQyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQXhCakMsa0VBQWtFO1FBQ3pELGVBQVUsR0FBYyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3pDLGlCQUFZLEdBQWMsU0FBUyxDQUFDLFFBQVEsQ0FBQztJQXVCbkQsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxXQUFXLENBQUMsS0FBYztRQUN4QixNQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDeEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUM7UUFFOUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLGdGQUFnRjtZQUNoRixnREFBZ0Q7WUFDaEQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUM7SUFDakUsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFvQjtRQUMxQixLQUFLLENBQUMsTUFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILHFCQUFxQjtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxhQUFhLENBQUMsS0FBaUI7UUFDN0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7MkdBOUVVLGNBQWM7K0ZBQWQsY0FBYyx5UEFhZCxjQUFjLDBIQzFDM0IsMGpHQW1HQTsyRkR0RWEsY0FBYztrQkFMMUIsU0FBUzsrQkFDRSxVQUFVLG1CQUVILHVCQUF1QixDQUFDLE1BQU07NEpBUXRDLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFFNkIsYUFBYTtzQkFBL0MsV0FBVzt1QkFBQyxvQkFBb0I7Z0JBRUwsTUFBTTtzQkFBakMsWUFBWTt1QkFBQyxZQUFZO2dCQUVDLGFBQWE7c0JBQXZDLFNBQVM7dUJBQUMsY0FBYztnQkFHckIsS0FBSztzQkFEUixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgUXVlcnlMaXN0LFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGYWNldCwgRmFjZXRWYWx1ZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XG5pbXBvcnQgeyBGb2N1c0RpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2xheW91dC9hMTF5L2tleWJvYXJkLWZvY3VzL2ZvY3VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGYWNldENvbGxhcHNlU3RhdGUgfSBmcm9tICcuLi9mYWNldC5tb2RlbCc7XG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtZmFjZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZmFjZXQuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgRmFjZXRDb21wb25lbnQge1xuICBwcm90ZWN0ZWQgX2ZhY2V0OiBGYWNldDtcblxuICBzdGF0ZSQ6IE9ic2VydmFibGU8RmFjZXRDb2xsYXBzZVN0YXRlPjtcblxuICAvKiogY29uZmlndXJhYmxlIGljb24gdGhhdCBpcyB1c2VkIHRvIGNvbGxhcHNlIHRoZSBmYWNldCBncm91cCAgKi9cbiAgQElucHV0KCkgZXhwYW5kSWNvbjogSUNPTl9UWVBFID0gSUNPTl9UWVBFLkVYUEFORDtcbiAgQElucHV0KCkgY29sbGFwc2VJY29uOiBJQ09OX1RZUEUgPSBJQ09OX1RZUEUuQ09MTEFQU0U7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5tdWx0aS1zZWxlY3QnKSBpc011bHRpU2VsZWN0OiBib29sZWFuO1xuXG4gIEBWaWV3Q2hpbGRyZW4oJ2ZhY2V0VmFsdWUnKSB2YWx1ZXM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj47XG5cbiAgQFZpZXdDaGlsZChGb2N1c0RpcmVjdGl2ZSkga2V5Ym9hcmRGb2N1czogRm9jdXNEaXJlY3RpdmU7XG5cbiAgQElucHV0KClcbiAgc2V0IGZhY2V0KHZhbHVlOiBGYWNldCkge1xuICAgIHRoaXMuX2ZhY2V0ID0gdmFsdWU7XG4gICAgdGhpcy5pc011bHRpU2VsZWN0ID0gISF2YWx1ZS5tdWx0aVNlbGVjdDtcbiAgICB0aGlzLnN0YXRlJCA9IHRoaXMuZmFjZXRTZXJ2aWNlLmdldFN0YXRlKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBmYWNldCgpOiBGYWNldCB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhY2V0O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGZhY2V0U2VydmljZTogRmFjZXRTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICAvKipcbiAgICogSGFuZGxlcyBjbGlja2luZyB0aGUgaGVhZGluZyBvZiB0aGUgZmFjZXQgZ3JvdXAsIHdoaWNoIG1lYW5zIHRvZ2dsaW5nXG4gICAqIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBncm91cCAoY29sbGFwc2UgLyBleHBhbmQpIGFuZCBvcHRpb25hbGx5IGZvY3VzaW5nXG4gICAqIHRoZSBncm91cC5cbiAgICovXG4gIHRvZ2dsZUdyb3VwKGV2ZW50OiBVSUV2ZW50KSB7XG4gICAgY29uc3QgaG9zdDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBpc0xvY2tlZCA9IHRoaXMua2V5Ym9hcmRGb2N1cz8uaXNMb2NrZWQ7XG5cbiAgICB0aGlzLmZhY2V0U2VydmljZS50b2dnbGUodGhpcy5mYWNldCwgdGhpcy5pc0V4cGFuZGVkKTtcblxuICAgIGlmICghaXNMb2NrZWQgfHwgdGhpcy5pc0V4cGFuZGVkKSB7XG4gICAgICBob3N0LmZvY3VzKCk7XG4gICAgICAvLyB3ZSBzdG9wIHByb3BhZ2F0aW5nIHRoZSBldmVudCBhcyBvdGhlcndpc2UgdGhlIGZvY3VzIG9uIHRoZSBob3N0IHdpbGwgdHJpZ2dlclxuICAgICAgLy8gYW4gdW5sb2NrIGV2ZW50IGZyb20gdGhlIExvY2tGb2N1cyBkaXJlY3RpdmUuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXM/LmZpcnN0Py5uYXRpdmVFbGVtZW50Lm9mZnNldFBhcmVudCAhPT0gbnVsbDtcbiAgfVxuXG4gIG9wZW5MaW5rKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xpY2soKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHZpc2libGUgdmFsdWVzIGZvciB0aGUgZmFjZXQuIFRoaXMgaXMgZGVsZWdhdGVkXG4gICAqIHRvIGBmYWNldFNlcnZpY2UuaW5jcmVhc2VWaXNpYmxlVmFsdWVzYC5cbiAgICovXG4gIGluY3JlYXNlVmlzaWJsZVZhbHVlcygpOiB2b2lkIHtcbiAgICB0aGlzLmZhY2V0U2VydmljZS5pbmNyZWFzZVZpc2libGVWYWx1ZXModGhpcy5mYWNldCk7XG4gIH1cblxuICAvKipcbiAgICogRGVjcmVhc2VzIHRoZSBudW1iZXIgb2YgdmlzaWJsZSB2YWx1ZXMgZm9yIHRoZSBmYWNldC4gVGhpcyBpcyBkZWxlZ2F0ZWRcbiAgICogdG8gYGZhY2V0U2VydmljZS5kZWNyZWFzZVZpc2libGVWYWx1ZXNgLlxuICAgKi9cbiAgZGVjcmVhc2VWaXNpYmxlVmFsdWVzKCk6IHZvaWQge1xuICAgIHRoaXMuZmFjZXRTZXJ2aWNlLmRlY3JlYXNlVmlzaWJsZVZhbHVlcyh0aGlzLmZhY2V0KTtcbiAgfVxuXG4gIGdldExpbmtQYXJhbXModmFsdWU6IEZhY2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5mYWNldFNlcnZpY2UuZ2V0TGlua1BhcmFtcyh2YWx1ZS5xdWVyeT8ucXVlcnk/LnZhbHVlID8/ICcnKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInN0YXRlJCB8IGFzeW5jIGFzIHN0YXRlXCI+XG4gIDxidXR0b25cbiAgICBjbGFzcz1cImhlYWRpbmdcIlxuICAgIChjbGljayk9XCJ0b2dnbGVHcm91cCgkZXZlbnQpXCJcbiAgICBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImlzRXhwYW5kZWRcIlxuICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiXG4gICAgICAncHJvZHVjdEZhY2V0TmF2aWdhdGlvbi5maWx0ZXJCeS5uYW1lJyB8IGN4VHJhbnNsYXRlOiB7IG5hbWU6IGZhY2V0Lm5hbWUgfVxuICAgIFwiXG4gID5cbiAgICB7eyBmYWNldC5uYW1lIH19XG4gICAgPGN4LWljb24gY2xhc3M9XCJjb2xsYXBzZS1pY29uXCIgW3R5cGVdPVwiY29sbGFwc2VJY29uXCI+PC9jeC1pY29uPlxuICAgIDxjeC1pY29uIGNsYXNzPVwiZXhwYW5kLWljb25cIiBbdHlwZV09XCJleHBhbmRJY29uXCI+PC9jeC1pY29uPlxuICA8L2J1dHRvbj5cblxuICA8ZGl2PlxuICAgIDxhXG4gICAgICAqbmdGb3I9XCJsZXQgdmFsdWUgb2YgZmFjZXQudmFsdWVzIHwgc2xpY2U6IDA6c3RhdGUudG9wVmlzaWJsZVwiXG4gICAgICAjZmFjZXRWYWx1ZVxuICAgICAgcm91dGVyTGluaz1cIi4vXCJcbiAgICAgIFtxdWVyeVBhcmFtc109XCJnZXRMaW5rUGFyYW1zKHZhbHVlKVwiXG4gICAgICBjbGFzcz1cInZhbHVlXCJcbiAgICAgIFtjbGFzcy5zZWxlY3RlZF09XCJ2YWx1ZS5zZWxlY3RlZFwiXG4gICAgICBbY3hGb2N1c109XCJ7IGtleTogdmFsdWUubmFtZSB9XCJcbiAgICAgIChrZXlkb3duLnNwYWNlKT1cIm9wZW5MaW5rKCRhbnkoJGV2ZW50KSlcIlxuICAgICAgW2F0dHIucm9sZV09XCJmYWNldC5tdWx0aVNlbGVjdCA/ICdjaGVja2JveCcgOiBudWxsXCJcbiAgICAgIFthdHRyLmFyaWEtY2hlY2tlZF09XCJmYWNldC5tdWx0aVNlbGVjdCA/IHZhbHVlLnNlbGVjdGVkIDogbnVsbFwiXG4gICAgICBhdHRyLmFyaWEtbGFiZWw9XCJ7e1xuICAgICAgICAncHJvZHVjdEZhY2V0TmF2aWdhdGlvbi5hcmlhTGFiZWxJdGVtc0F2YWlsYWJsZSdcbiAgICAgICAgICB8IGN4VHJhbnNsYXRlOiB7IG5hbWU6IHZhbHVlLm5hbWUsIGNvdW50OiB2YWx1ZS5jb3VudCB9XG4gICAgICB9fVwiXG4gICAgPlxuICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgPnt7IHZhbHVlLm5hbWVcbiAgICAgICAgfX08c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBjbGFzcz1cImNvdW50XCI+e3sgdmFsdWUuY291bnQgfX08L3NwYW4+PC9zcGFuXG4gICAgICA+XG4gICAgPC9hPlxuXG4gICAgPGRpdiBjbGFzcz1cIm1vcmVcIj5cbiAgICAgIDxhXG4gICAgICAgICpuZ0Zvcj1cIlxuICAgICAgICAgIGxldCB2YWx1ZSBvZiBmYWNldC52YWx1ZXNcbiAgICAgICAgICAgIHwgc2xpY2U6IHN0YXRlLnRvcFZpc2libGUgPz8gMDpzdGF0ZS5tYXhWaXNpYmxlXG4gICAgICAgIFwiXG4gICAgICAgICNmYWNldFZhbHVlXG4gICAgICAgIHJvdXRlckxpbms9XCIuL1wiXG4gICAgICAgIFtxdWVyeVBhcmFtc109XCJnZXRMaW5rUGFyYW1zKHZhbHVlKVwiXG4gICAgICAgIGNsYXNzPVwidmFsdWVcIlxuICAgICAgICBbY2xhc3Muc2VsZWN0ZWRdPVwidmFsdWUuc2VsZWN0ZWRcIlxuICAgICAgICBbY3hGb2N1c109XCJ7IGtleTogdmFsdWUubmFtZSB9XCJcbiAgICAgICAgKGtleWRvd24uc3BhY2UpPVwib3BlbkxpbmsoJGFueSgkZXZlbnQpKVwiXG4gICAgICA+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgPnt7IHZhbHVlLm5hbWUgfX08c3BhbiBjbGFzcz1cImNvdW50XCI+e3sgdmFsdWUuY291bnQgfX08L3NwYW4+PC9zcGFuXG4gICAgICAgID5cbiAgICAgIDwvYT5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgIHN0YXRlLm1heFZpc2libGUgJiZcbiAgICAgICAgICBzdGF0ZS50b3BWaXNpYmxlICYmXG4gICAgICAgICAgc3RhdGUubWF4VmlzaWJsZSA+IHN0YXRlLnRvcFZpc2libGVcbiAgICAgICAgXCJcbiAgICAgICAgKGNsaWNrKT1cImRlY3JlYXNlVmlzaWJsZVZhbHVlcygpXCJcbiAgICAgICAgW2N4QXRNZXNzYWdlXT1cIlxuICAgICAgICAgICdwcm9kdWN0RmFjZXROYXZpZ2F0aW9uLmRlY3JlYXNlT3B0aW9uc1Zpc2liaWxpdHknIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgXCJcbiAgICAgICAgYXJpYS1leHBhbmRlZD1cInRydWVcIlxuICAgICAgICBhdHRyLmFyaWEtbGFiZWw9XCJ7e1xuICAgICAgICAgICdwcm9kdWN0RmFjZXROYXZpZ2F0aW9uLmFyaWFMYWJlbFNob3dMZXNzJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgIH19XCJcbiAgICAgICAgY2xhc3M9XCJjeC1hY3Rpb24tbGlua1wiXG4gICAgICAgIFtjeEZvY3VzXT1cInsga2V5OiAnbW9yZW9ybGVzcycgfVwiXG4gICAgICA+XG4gICAgICAgIHt7ICdwcm9kdWN0TGlzdC5zaG93TGVzcycgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9idXR0b24+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgKm5nSWY9XCJcbiAgICAgICAgICBzdGF0ZS5tYXhWaXNpYmxlICYmXG4gICAgICAgICAgZmFjZXQudmFsdWVzICYmXG4gICAgICAgICAgc3RhdGUubWF4VmlzaWJsZSA+IDAgJiZcbiAgICAgICAgICBzdGF0ZS5tYXhWaXNpYmxlIDwgZmFjZXQudmFsdWVzLmxlbmd0aFxuICAgICAgICBcIlxuICAgICAgICAoY2xpY2spPVwiaW5jcmVhc2VWaXNpYmxlVmFsdWVzKClcIlxuICAgICAgICBbY3hBdE1lc3NhZ2VdPVwiXG4gICAgICAgICAgJ3Byb2R1Y3RGYWNldE5hdmlnYXRpb24uaW5jcmVhc2VPcHRpb25zVmlzaWJpbGl0eScgfCBjeFRyYW5zbGF0ZVxuICAgICAgICBcIlxuICAgICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuICAgICAgICBhdHRyLmFyaWEtbGFiZWw9XCJ7e1xuICAgICAgICAgICdwcm9kdWN0RmFjZXROYXZpZ2F0aW9uLmFyaWFMYWJlbFNob3dNb3JlJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgIH19XCJcbiAgICAgICAgY2xhc3M9XCJjeC1hY3Rpb24tbGlua1wiXG4gICAgICAgIFtjeEZvY3VzXT1cInsga2V5OiAnbW9yZW9ybGVzcycgfVwiXG4gICAgICA+XG4gICAgICAgIHt7ICdwcm9kdWN0TGlzdC5zaG93TW9yZScgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=