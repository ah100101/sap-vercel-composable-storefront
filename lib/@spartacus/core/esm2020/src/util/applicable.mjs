/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Helper logic to resolve best matching Applicable
 *
 * Finding best match is a two step process:
 * 1. Find all matching applicables
 *    - all applicables for which hasMatch(...matchParams) will return true
 *    - all applicables without hasMatch method (implicit always match)
 * 2. Find the applicable with highest priority
 *    - applicable with highest getPriority(...priorityParams) will win
 *    - applicable without getPriority method is treated as Priority.NORMAL or 0
 *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins
 *
 * @param applicables - array or applicable-like instances
 * @param matchParams - array of parameters passed for hasMatch calls
 * @param priorityParams - array of parameters passed for getPriority calls
 */
export function resolveApplicable(applicables, matchParams = [], priorityParams = []) {
    const matchedApplicables = (applicables ?? []).filter((applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams));
    if (matchedApplicables.length < 2) {
        return matchedApplicables[0];
    }
    let lastPriority = -Infinity;
    return matchedApplicables.reduce((acc, curr) => {
        const currPriority = curr.getPriority
            ? curr.getPriority(...priorityParams)
            : 0 /* Priority.NORMAL */;
        if (lastPriority > currPriority) {
            return acc;
        }
        lastPriority = currPriority;
        return curr;
    }, undefined);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3V0aWwvYXBwbGljYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBMENIOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsV0FBZ0IsRUFDaEIsY0FBcUIsRUFBRSxFQUN2QixpQkFBd0IsRUFBRTtJQUUxQixNQUFNLGtCQUFrQixHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FDbkQsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQzVFLENBQUM7SUFFRixJQUFJLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakMsT0FBTyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUVELElBQUksWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQzdCLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBa0IsRUFBRSxJQUFPLEVBQUUsRUFBRTtRQUMvRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVztZQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLGNBQWMsQ0FBQztZQUNyQyxDQUFDLHdCQUFnQixDQUFDO1FBQ3BCLElBQUksWUFBWSxHQUFHLFlBQVksRUFBRTtZQUMvQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuZXhwb3J0IGNvbnN0IGVudW0gUHJpb3JpdHkge1xuICAvKipcbiAgICogVXNlZCBhcyBmYWxsYmFjaywgd2hlbiB0aGVyZSBpcyBubyBvdGhlciBtYXRjaGVzXG4gICAqL1xuICBGQUxMQkFDSyA9IC01MCxcbiAgLyoqXG4gICAqIFVzZWQgbWFpbmx5IGluIGxpYnJhcmllcywgZWFzeSBvdmVycmlkYWJsZVxuICAgKi9cbiAgTE9XID0gLTEwLFxuICAvKipcbiAgICogRGVmYXVsdCBwcmlvcml0eVxuICAgKi9cbiAgTk9STUFMID0gMCxcbiAgLyoqXG4gICAqIEhpZ2ggcHJpb3JpdHkgZm9yIG1hdGNoZXMgdGhhdCBzaG91bGQgdGFrZSBwcmVjZWRlbmNlXG4gICAqL1xuICBISUdIID0gMTAsXG59XG5cbi8qKlxuICogQmFzZSBpbnRlcmZhY2UgZm9yIGltcGxlbWVudGluZyBhcHBsaWNhYmxlcyBpbiBhIGNvbnNpc3RlbnQgd2F5XG4gKlxuICogQXBwbGljYWJsZXMgYXJlIG1haW5seSB1c2VkIHRvIGZpbmQgYmVzdCBtYXRjaGluZyBvbmUgZnJvbSBtdWx0aSBwcm92aWRlZFxuICogY2xhc3NlcywgbGlrZSBoYW5kbGVycywgcmVzb2x2ZXJzLCBldGMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYWJsZSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYXBwbGljYWJsZSBjYW4gYmUgdXNlZCB0byBoYW5kbGUgc3BlY2lmaWVkIGNvbmRpdGlvblxuICAgKi9cbiAgaGFzTWF0Y2g/KC4uLnBhcmFtczogYW55W10pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHByaW9yaXR5IG9yIHNjb3JlIGZvciBzcGVjaWZpZWQgYXBwbGljYWJsZS5cbiAgICpcbiAgICogSWYgbXVsdGlwbGUgYXBwbGljYWJsZXMgY2FuIGJlIGFwcGxpZWQgdG8gc3BlY2lmaWVkIGNvbmRpdGlvbiwgdGhlIG9uZVxuICAgKiB3aXRoIGhpZ2hlc3QgcHJpb3JpdHkgb3Igc2NvcmUgd2lucy5cbiAgICovXG4gIGdldFByaW9yaXR5PyguLi5wYXJhbXM6IGFueVtdKTogUHJpb3JpdHkgfCBudW1iZXI7XG59XG5cbi8qKlxuICogSGVscGVyIGxvZ2ljIHRvIHJlc29sdmUgYmVzdCBtYXRjaGluZyBBcHBsaWNhYmxlXG4gKlxuICogRmluZGluZyBiZXN0IG1hdGNoIGlzIGEgdHdvIHN0ZXAgcHJvY2VzczpcbiAqIDEuIEZpbmQgYWxsIG1hdGNoaW5nIGFwcGxpY2FibGVzXG4gKiAgICAtIGFsbCBhcHBsaWNhYmxlcyBmb3Igd2hpY2ggaGFzTWF0Y2goLi4ubWF0Y2hQYXJhbXMpIHdpbGwgcmV0dXJuIHRydWVcbiAqICAgIC0gYWxsIGFwcGxpY2FibGVzIHdpdGhvdXQgaGFzTWF0Y2ggbWV0aG9kIChpbXBsaWNpdCBhbHdheXMgbWF0Y2gpXG4gKiAyLiBGaW5kIHRoZSBhcHBsaWNhYmxlIHdpdGggaGlnaGVzdCBwcmlvcml0eVxuICogICAgLSBhcHBsaWNhYmxlIHdpdGggaGlnaGVzdCBnZXRQcmlvcml0eSguLi5wcmlvcml0eVBhcmFtcykgd2lsbCB3aW5cbiAqICAgIC0gYXBwbGljYWJsZSB3aXRob3V0IGdldFByaW9yaXR5IG1ldGhvZCBpcyB0cmVhdGVkIGFzIFByaW9yaXR5Lk5PUk1BTCBvciAwXG4gKiAgICAtIGFwcGxpY2FibGVzIHdpdGggdGhlIHNhbWUgcHJpb3JpdHkgYXJlIHNvcnRlZCBieSBvcmRlciBvZiBwcm92aWRlcnMsIHRoZSBhcHBsaWNhYmxlIHRoYXQgd2FzIHByb3ZpZGVkIGxhdGVyIHdpbnNcbiAqXG4gKiBAcGFyYW0gYXBwbGljYWJsZXMgLSBhcnJheSBvciBhcHBsaWNhYmxlLWxpa2UgaW5zdGFuY2VzXG4gKiBAcGFyYW0gbWF0Y2hQYXJhbXMgLSBhcnJheSBvZiBwYXJhbWV0ZXJzIHBhc3NlZCBmb3IgaGFzTWF0Y2ggY2FsbHNcbiAqIEBwYXJhbSBwcmlvcml0eVBhcmFtcyAtIGFycmF5IG9mIHBhcmFtZXRlcnMgcGFzc2VkIGZvciBnZXRQcmlvcml0eSBjYWxsc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUFwcGxpY2FibGU8VCBleHRlbmRzIEFwcGxpY2FibGU+KFxuICBhcHBsaWNhYmxlczogVFtdLFxuICBtYXRjaFBhcmFtczogYW55W10gPSBbXSxcbiAgcHJpb3JpdHlQYXJhbXM6IGFueVtdID0gW11cbik6IFQgfCB1bmRlZmluZWQge1xuICBjb25zdCBtYXRjaGVkQXBwbGljYWJsZXMgPSAoYXBwbGljYWJsZXMgPz8gW10pLmZpbHRlcihcbiAgICAoYXBwbGljYWJsZSkgPT4gIWFwcGxpY2FibGUuaGFzTWF0Y2ggfHwgYXBwbGljYWJsZS5oYXNNYXRjaCguLi5tYXRjaFBhcmFtcylcbiAgKTtcblxuICBpZiAobWF0Y2hlZEFwcGxpY2FibGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gbWF0Y2hlZEFwcGxpY2FibGVzWzBdO1xuICB9XG5cbiAgbGV0IGxhc3RQcmlvcml0eSA9IC1JbmZpbml0eTtcbiAgcmV0dXJuIG1hdGNoZWRBcHBsaWNhYmxlcy5yZWR1Y2UoKGFjYzogVCB8IHVuZGVmaW5lZCwgY3VycjogVCkgPT4ge1xuICAgIGNvbnN0IGN1cnJQcmlvcml0eSA9IGN1cnIuZ2V0UHJpb3JpdHlcbiAgICAgID8gY3Vyci5nZXRQcmlvcml0eSguLi5wcmlvcml0eVBhcmFtcylcbiAgICAgIDogUHJpb3JpdHkuTk9STUFMO1xuICAgIGlmIChsYXN0UHJpb3JpdHkgPiBjdXJyUHJpb3JpdHkpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGxhc3RQcmlvcml0eSA9IGN1cnJQcmlvcml0eTtcbiAgICByZXR1cm4gY3VycjtcbiAgfSwgdW5kZWZpbmVkKTtcbn1cbiJdfQ==