/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { of, range, throwError, timer, zip, } from 'rxjs';
import { map, mergeMap, retryWhen } from 'rxjs/operators';
/**
 *
 * An operator which performs exponential back-off on the source stream.
 *
 * Source: https://angular.io/guide/practical-observable-usage#exponential-backoff
 *
 * @param errFn for which to perform exponential back-off
 * @param options such as defining `maxTries`, or `delay`
 * @returns either the original error (if the given `errFn` return `false`), or the
 */
export function backOff(options) {
    const shouldRetry = options?.shouldRetry ?? (() => true);
    const maxTries = options?.maxTries ?? 3;
    const delay = options?.delay ?? 300;
    // creates a range of maximum retries - starting from 1, up until the given `maxTries`
    const retry$ = range(1, maxTries + 1);
    return (source$) => source$.pipe(
    // retries the source stream in case of an error.
    retryWhen((attempts$) => 
    // emits only when both emit at the same time. In practice, this means: emit when error happens again and retried
    zip(attempts$, retry$).pipe(mergeMap(([attemptError, currentRetry]) => {
        // if we've re-tried more than the maxTries, OR
        // if the source error is not the one we want to exponentially retry
        if (currentRetry > maxTries || !shouldRetry(attemptError)) {
            return throwError(attemptError);
        }
        return of(currentRetry);
    }), 
    // exponential
    map((currentRetry) => currentRetry * currentRetry), 
    // back-off
    mergeMap((exponent) => timer(exponent * delay)))));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFjay1vZmYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy91dGlsL3J4anMvYmFjay1vZmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFFTCxFQUFFLEVBRUYsS0FBSyxFQUNMLFVBQVUsRUFDVixLQUFLLEVBQ0wsR0FBRyxHQUNKLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFzQjFEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQUksT0FBd0I7SUFDakQsTUFBTSxXQUFXLEdBQUcsT0FBTyxFQUFFLFdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELE1BQU0sUUFBUSxHQUFHLE9BQU8sRUFBRSxRQUFRLElBQUksQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sS0FBSyxHQUFHLE9BQU8sRUFBRSxLQUFLLElBQUksR0FBRyxDQUFDO0lBRXBDLHNGQUFzRjtJQUN0RixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0QyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDakIsT0FBTyxDQUFDLElBQUk7SUFDVixpREFBaUQ7SUFDakQsU0FBUyxDQUFJLENBQUMsU0FBNkMsRUFBRSxFQUFFO0lBQzdELGlIQUFpSDtJQUNqSCxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDekIsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLEVBQUUsRUFBRTtRQUN4QywrQ0FBK0M7UUFDL0Msb0VBQW9FO1FBQ3BFLElBQUksWUFBWSxHQUFHLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN6RCxPQUFPLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQztJQUNGLGNBQWM7SUFDZCxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDbEQsV0FBVztJQUNYLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUNoRCxDQUNGLENBQ0YsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1xuICBPYnNlcnZhYmxlLFxuICBvZixcbiAgT3BlcmF0b3JGdW5jdGlvbixcbiAgcmFuZ2UsXG4gIHRocm93RXJyb3IsXG4gIHRpbWVyLFxuICB6aXAsXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCwgcmV0cnlXaGVuIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHR0cEVycm9yTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbC9taXNjLm1vZGVsJztcblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgYmFjay1vZmYgb3BlcmF0b3IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFja09mZk9wdGlvbnMge1xuICAvKipcbiAgICogRnVuY3Rpb24gd2hpY2ggZXZhbHVhdGVzIGlmIHRoZSBnaXZlbiBlcnJvciBzaG91bGQgYmUgaGFuZGxlZCBleHBvbmVudGlhbGx5LlxuICAgKlxuICAgKiBJZiBpdCByZXR1cm5zIGZhbHNlLCB0aGUgZXJyb3IgaXMgcmUtdGhyb3duLlxuICAgKiBPdGhlcndpc2UsIHRoZSBvcGVyYXRpb24gaXMgcmV0cmllZC5cbiAgICovXG4gIHNob3VsZFJldHJ5PzogKGVycjogSHR0cEVycm9yTW9kZWwgfCBFcnJvcikgPT4gYm9vbGVhbjtcblxuICAvKiogaG93IG1hbnkgdGltZXMgdG8gcGVyZm9ybSB0aGUgYmFjay1vZmYuIERlZmF1bHQgdmFsdWUgaXMgMyB0aW1lcy4gKi9cbiAgbWF4VHJpZXM/OiBudW1iZXI7XG5cbiAgLyoqIGRlbGF5IGluIG1zLiBEZWZhdWx0IHZhbHVlIGlzIDMwMG1zLiBBc3N1bWluZyB0aGUgbWF4VHJpZXMgaXMgc2V0IHRvIDMsIGl0IG1lYW5zIHRoZSBtYXhpbXVtIHRpbWUgc3BlbnQgcmV0cnlpbmcgd2lsbCBiZTogMSoxKjMwMCArIDIqMiozMDAgKyAzKjMqMzAwID0gNDIwMG1zICg0LjJzKSAqL1xuICBkZWxheT86IG51bWJlcjtcbn1cblxuLyoqXG4gKlxuICogQW4gb3BlcmF0b3Igd2hpY2ggcGVyZm9ybXMgZXhwb25lbnRpYWwgYmFjay1vZmYgb24gdGhlIHNvdXJjZSBzdHJlYW0uXG4gKlxuICogU291cmNlOiBodHRwczovL2FuZ3VsYXIuaW8vZ3VpZGUvcHJhY3RpY2FsLW9ic2VydmFibGUtdXNhZ2UjZXhwb25lbnRpYWwtYmFja29mZlxuICpcbiAqIEBwYXJhbSBlcnJGbiBmb3Igd2hpY2ggdG8gcGVyZm9ybSBleHBvbmVudGlhbCBiYWNrLW9mZlxuICogQHBhcmFtIG9wdGlvbnMgc3VjaCBhcyBkZWZpbmluZyBgbWF4VHJpZXNgLCBvciBgZGVsYXlgXG4gKiBAcmV0dXJucyBlaXRoZXIgdGhlIG9yaWdpbmFsIGVycm9yIChpZiB0aGUgZ2l2ZW4gYGVyckZuYCByZXR1cm4gYGZhbHNlYCksIG9yIHRoZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFja09mZjxUPihvcHRpb25zPzogQmFja09mZk9wdGlvbnMpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFQ+IHtcbiAgY29uc3Qgc2hvdWxkUmV0cnkgPSBvcHRpb25zPy5zaG91bGRSZXRyeSA/PyAoKCkgPT4gdHJ1ZSk7XG4gIGNvbnN0IG1heFRyaWVzID0gb3B0aW9ucz8ubWF4VHJpZXMgPz8gMztcbiAgY29uc3QgZGVsYXkgPSBvcHRpb25zPy5kZWxheSA/PyAzMDA7XG5cbiAgLy8gY3JlYXRlcyBhIHJhbmdlIG9mIG1heGltdW0gcmV0cmllcyAtIHN0YXJ0aW5nIGZyb20gMSwgdXAgdW50aWwgdGhlIGdpdmVuIGBtYXhUcmllc2BcbiAgY29uc3QgcmV0cnkkID0gcmFuZ2UoMSwgbWF4VHJpZXMgKyAxKTtcbiAgcmV0dXJuIChzb3VyY2UkKSA9PlxuICAgIHNvdXJjZSQucGlwZShcbiAgICAgIC8vIHJldHJpZXMgdGhlIHNvdXJjZSBzdHJlYW0gaW4gY2FzZSBvZiBhbiBlcnJvci5cbiAgICAgIHJldHJ5V2hlbjxUPigoYXR0ZW1wdHMkOiBPYnNlcnZhYmxlPEh0dHBFcnJvck1vZGVsIHwgRXJyb3I+KSA9PlxuICAgICAgICAvLyBlbWl0cyBvbmx5IHdoZW4gYm90aCBlbWl0IGF0IHRoZSBzYW1lIHRpbWUuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zOiBlbWl0IHdoZW4gZXJyb3IgaGFwcGVucyBhZ2FpbiBhbmQgcmV0cmllZFxuICAgICAgICB6aXAoYXR0ZW1wdHMkLCByZXRyeSQpLnBpcGUoXG4gICAgICAgICAgbWVyZ2VNYXAoKFthdHRlbXB0RXJyb3IsIGN1cnJlbnRSZXRyeV0pID0+IHtcbiAgICAgICAgICAgIC8vIGlmIHdlJ3ZlIHJlLXRyaWVkIG1vcmUgdGhhbiB0aGUgbWF4VHJpZXMsIE9SXG4gICAgICAgICAgICAvLyBpZiB0aGUgc291cmNlIGVycm9yIGlzIG5vdCB0aGUgb25lIHdlIHdhbnQgdG8gZXhwb25lbnRpYWxseSByZXRyeVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSZXRyeSA+IG1heFRyaWVzIHx8ICFzaG91bGRSZXRyeShhdHRlbXB0RXJyb3IpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGF0dGVtcHRFcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvZihjdXJyZW50UmV0cnkpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIC8vIGV4cG9uZW50aWFsXG4gICAgICAgICAgbWFwKChjdXJyZW50UmV0cnkpID0+IGN1cnJlbnRSZXRyeSAqIGN1cnJlbnRSZXRyeSksXG4gICAgICAgICAgLy8gYmFjay1vZmZcbiAgICAgICAgICBtZXJnZU1hcCgoZXhwb25lbnQpID0+IHRpbWVyKGV4cG9uZW50ICogZGVsYXkpKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbn1cbiJdfQ==