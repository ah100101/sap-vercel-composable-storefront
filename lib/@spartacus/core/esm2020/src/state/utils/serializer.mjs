/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { entityLoaderStateSelector } from './entity-loader/entity-loader.selectors';
const ALL = 'all';
export function serializeSearchConfig(config, id) {
    return `${id ?? ''}?pageSize=${config.pageSize ?? ''}&currentPage=${config.currentPage ?? ''}&sort=${config.sort ?? ''}`;
}
export function denormalizeSearch(state, params) {
    return denormalizeCustomB2BSearch(state.list, state.entities, params);
}
export function denormalizeCustomB2BSearch(list, entities, params, id) {
    const serializedList = entityLoaderStateSelector(list, params ? serializeSearchConfig(params, id) : id ?? ALL);
    if (!serializedList.value || !serializedList.value.ids) {
        return serializedList;
    }
    const res = Object.assign({}, serializedList, {
        value: {
            values: serializedList.value.ids.map((code) => entityLoaderStateSelector(entities, code).value),
        },
    });
    if (params && res.value) {
        res.value.pagination = serializedList.value.pagination;
        res.value.sorts = serializedList.value.sorts;
    }
    return res;
}
export function normalizeListPage(list, id) {
    const values = list.values || [];
    const page = {
        ids: values.map((data) => data[id]),
    };
    if (list.pagination) {
        page.pagination = list.pagination;
    }
    if (list.sorts) {
        page.sorts = list.sorts;
    }
    return { values, page };
}
export function serializeParams(params, searchConfig) {
    return [params, serializeSearchConfig(searchConfig)].toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3N0YXRlL3V0aWxzL3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQU1ILE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBR3BGLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUVsQixNQUFNLFVBQVUscUJBQXFCLENBQ25DLE1BQW9CLEVBQ3BCLEVBQVc7SUFFWCxPQUFPLEdBQUcsRUFBRSxJQUFJLEVBQUUsYUFBYSxNQUFNLENBQUMsUUFBUSxJQUFJLEVBQUUsZ0JBQ2xELE1BQU0sQ0FBQyxXQUFXLElBQUksRUFDeEIsU0FBUyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLEtBQXlCLEVBQ3pCLE1BQXFCO0lBRXJCLE9BQU8sMEJBQTBCLENBQUksS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQ3hDLElBQWtDLEVBQ2xDLFFBQThCLEVBQzlCLE1BQXFCLEVBQ3JCLEVBQVc7SUFFWCxNQUFNLGNBQWMsR0FBUSx5QkFBeUIsQ0FDbkQsSUFBSSxFQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUN2RCxDQUFDO0lBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUN0RCxPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUNELE1BQU0sR0FBRyxHQUFrQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUU7UUFDM0UsS0FBSyxFQUFFO1lBQ0wsTUFBTSxFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDbEMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQ2xFO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFDSCxJQUFJLE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1FBQ3ZCLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ3ZELEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0tBQzlDO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixJQUFzQixFQUN0QixFQUFVO0lBRVYsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDakMsTUFBTSxJQUFJLEdBQWM7UUFDdEIsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFPLElBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUMzQyxDQUFDO0lBQ0YsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztLQUNuQztJQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUN6QjtJQUNELE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQzdCLE1BQXlCLEVBQ3pCLFlBQTBCO0lBRTFCLE9BQU8sQ0FBQyxNQUFNLEVBQUUscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNsRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgRW50aXRpZXNNb2RlbCwgTGlzdE1vZGVsIH0gZnJvbSAnLi4vLi4vbW9kZWwvaW5kZXgnO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlnIH0gZnJvbSAnLi4vLi4vcHJvZHVjdC9tb2RlbC9zZWFyY2gtY29uZmlnJztcbmltcG9ydCB7IEVudGl0eUxpc3RTdGF0ZSB9IGZyb20gJy4vZW50aXR5LWxpc3Qtc3RhdGUnO1xuaW1wb3J0IHsgRW50aXR5TG9hZGVyU3RhdGUgfSBmcm9tICcuL2VudGl0eS1sb2FkZXIvZW50aXR5LWxvYWRlci1zdGF0ZSc7XG5pbXBvcnQgeyBlbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yIH0gZnJvbSAnLi9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuc2VsZWN0b3JzJztcbmltcG9ydCB7IExvYWRlclN0YXRlIH0gZnJvbSAnLi9sb2FkZXIvbG9hZGVyLXN0YXRlJztcblxuY29uc3QgQUxMID0gJ2FsbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVTZWFyY2hDb25maWcoXG4gIGNvbmZpZzogU2VhcmNoQ29uZmlnLFxuICBpZD86IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2lkID8/ICcnfT9wYWdlU2l6ZT0ke2NvbmZpZy5wYWdlU2l6ZSA/PyAnJ30mY3VycmVudFBhZ2U9JHtcbiAgICBjb25maWcuY3VycmVudFBhZ2UgPz8gJydcbiAgfSZzb3J0PSR7Y29uZmlnLnNvcnQgPz8gJyd9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbm9ybWFsaXplU2VhcmNoPFQ+KFxuICBzdGF0ZTogRW50aXR5TGlzdFN0YXRlPFQ+LFxuICBwYXJhbXM/OiBTZWFyY2hDb25maWdcbik6IExvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8VD4+IHtcbiAgcmV0dXJuIGRlbm9ybWFsaXplQ3VzdG9tQjJCU2VhcmNoPFQ+KHN0YXRlLmxpc3QsIHN0YXRlLmVudGl0aWVzLCBwYXJhbXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVub3JtYWxpemVDdXN0b21CMkJTZWFyY2g8VD4oXG4gIGxpc3Q6IEVudGl0eUxvYWRlclN0YXRlPExpc3RNb2RlbD4sXG4gIGVudGl0aWVzOiBFbnRpdHlMb2FkZXJTdGF0ZTxUPixcbiAgcGFyYW1zPzogU2VhcmNoQ29uZmlnLFxuICBpZD86IHN0cmluZ1xuKTogTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxUPj4ge1xuICBjb25zdCBzZXJpYWxpemVkTGlzdDogYW55ID0gZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihcbiAgICBsaXN0LFxuICAgIHBhcmFtcyA/IHNlcmlhbGl6ZVNlYXJjaENvbmZpZyhwYXJhbXMsIGlkKSA6IGlkID8/IEFMTFxuICApO1xuICBpZiAoIXNlcmlhbGl6ZWRMaXN0LnZhbHVlIHx8ICFzZXJpYWxpemVkTGlzdC52YWx1ZS5pZHMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplZExpc3Q7XG4gIH1cbiAgY29uc3QgcmVzOiBMb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPFQ+PiA9IE9iamVjdC5hc3NpZ24oe30sIHNlcmlhbGl6ZWRMaXN0LCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbHVlczogc2VyaWFsaXplZExpc3QudmFsdWUuaWRzLm1hcChcbiAgICAgICAgKGNvZGU6IHN0cmluZykgPT4gZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihlbnRpdGllcywgY29kZSkudmFsdWVcbiAgICAgICksXG4gICAgfSxcbiAgfSk7XG4gIGlmIChwYXJhbXMgJiYgcmVzLnZhbHVlKSB7XG4gICAgcmVzLnZhbHVlLnBhZ2luYXRpb24gPSBzZXJpYWxpemVkTGlzdC52YWx1ZS5wYWdpbmF0aW9uO1xuICAgIHJlcy52YWx1ZS5zb3J0cyA9IHNlcmlhbGl6ZWRMaXN0LnZhbHVlLnNvcnRzO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVMaXN0UGFnZTxUPihcbiAgbGlzdDogRW50aXRpZXNNb2RlbDxUPixcbiAgaWQ6IHN0cmluZ1xuKTogeyB2YWx1ZXM6IFRbXTsgcGFnZTogTGlzdE1vZGVsIH0ge1xuICBjb25zdCB2YWx1ZXMgPSBsaXN0LnZhbHVlcyB8fCBbXTtcbiAgY29uc3QgcGFnZTogTGlzdE1vZGVsID0ge1xuICAgIGlkczogdmFsdWVzLm1hcCgoZGF0YSkgPT4gKDxhbnk+ZGF0YSlbaWRdKSxcbiAgfTtcbiAgaWYgKGxpc3QucGFnaW5hdGlvbikge1xuICAgIHBhZ2UucGFnaW5hdGlvbiA9IGxpc3QucGFnaW5hdGlvbjtcbiAgfVxuICBpZiAobGlzdC5zb3J0cykge1xuICAgIHBhZ2Uuc29ydHMgPSBsaXN0LnNvcnRzO1xuICB9XG4gIHJldHVybiB7IHZhbHVlcywgcGFnZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplUGFyYW1zKFxuICBwYXJhbXM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICBzZWFyY2hDb25maWc6IFNlYXJjaENvbmZpZ1xuKTogc3RyaW5nIHtcbiAgcmV0dXJuIFtwYXJhbXMsIHNlcmlhbGl6ZVNlYXJjaENvbmZpZyhzZWFyY2hDb25maWcpXS50b1N0cmluZygpO1xufVxuIl19