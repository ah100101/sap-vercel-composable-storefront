/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { deepMerge } from '../../config/utils/deep-merge';
const OBJECT_SEPARATOR = '.';
export function getStateSliceValue(keys, state) {
    const stateSliceValue = keys
        .split(OBJECT_SEPARATOR)
        .reduce((previous, current) => (previous ? previous[current] : undefined), state);
    return stateSliceValue;
}
export function createShellObject(key, excludeKeys, value) {
    if (!key || !value || Object.keys(value).length === 0) {
        return {};
    }
    const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {
        return { [previous]: acc };
    }, value);
    return handleExclusions(key, excludeKeys, shell);
}
export function getStateSlice(keys, excludeKeys, state) {
    if (keys && keys.length === 0) {
        return {};
    }
    let stateSlices = {};
    for (const currentKey of keys) {
        const stateValue = getStateSliceValue(currentKey, state);
        const shell = createShellObject(currentKey, excludeKeys, stateValue);
        stateSlices = deepMerge(stateSlices, shell);
    }
    return stateSlices;
}
export function handleExclusions(key, excludeKeys, value) {
    const exclusionKeys = getExclusionKeys(key, excludeKeys);
    if (exclusionKeys.length === 0) {
        return value;
    }
    const finalValue = deepMerge({}, value);
    for (const currentExclusionKey of exclusionKeys) {
        const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);
        let nestedTemp = finalValue;
        for (let i = 0; i < exclusionChunksSplit.length; i++) {
            const currentChunk = exclusionChunksSplit[i];
            // last iteration
            if (i === exclusionChunksSplit.length - 1) {
                if (nestedTemp && nestedTemp[currentChunk]) {
                    delete nestedTemp[currentChunk];
                }
            }
            else {
                nestedTemp = nestedTemp[currentChunk];
            }
        }
    }
    return finalValue;
}
export function getExclusionKeys(key, excludeKeys) {
    if (!key || !excludeKeys) {
        return [];
    }
    const exclusionKeys = [];
    for (const exclusionKey of excludeKeys) {
        if (exclusionKey.includes(key)) {
            exclusionKeys.push(exclusionKey);
        }
    }
    return exclusionKeys;
}
export function filterKeysByType(keys, type) {
    if (!keys) {
        return [];
    }
    return Object.keys(keys).filter((key) => keys[key] === type);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXN0YXRlLXNsaWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvc3RhdGUvdXRpbHMvZ2V0LXN0YXRlLXNsaWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHMUQsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFFN0IsTUFBTSxVQUFVLGtCQUFrQixDQUFPLElBQVksRUFBRSxLQUFRO0lBQzdELE1BQU0sZUFBZSxHQUFHLElBQUk7U0FDekIsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1NBQ3ZCLE1BQU0sQ0FDTCxDQUFDLFFBQWEsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUN0RSxLQUFLLENBQ04sQ0FBQztJQUVKLE9BQU8sZUFBb0IsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixHQUFXLEVBQ1gsV0FBcUIsRUFDckIsS0FBUTtJQUVSLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JELE9BQU8sRUFBTyxDQUFDO0tBQ2hCO0lBRUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRTtRQUN0RSxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLEVBQStCLENBQUM7SUFDMUQsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ1YsT0FBTyxnQkFBZ0IsQ0FBQyxH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IFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnLi4vLi4vY29uZmlnL3V0aWxzL2RlZXAtbWVyZ2UnO1xuaW1wb3J0IHsgU3RhdGVUcmFuc2ZlclR5cGUsIFN0b3JhZ2VTeW5jVHlwZSB9IGZyb20gJy4uL2NvbmZpZy9zdGF0ZS1jb25maWcnO1xuXG5jb25zdCBPQkpFQ1RfU0VQQVJBVE9SID0gJy4nO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGVTbGljZVZhbHVlPFQsIEU+KGtleXM6IHN0cmluZywgc3RhdGU6IFQpOiBFIHtcbiAgY29uc3Qgc3RhdGVTbGljZVZhbHVlID0ga2V5c1xuICAgIC5zcGxpdChPQkpFQ1RfU0VQQVJBVE9SKVxuICAgIC5yZWR1Y2UoXG4gICAgICAocHJldmlvdXM6IGFueSwgY3VycmVudCkgPT4gKHByZXZpb3VzID8gcHJldmlvdXNbY3VycmVudF0gOiB1bmRlZmluZWQpLFxuICAgICAgc3RhdGVcbiAgICApO1xuXG4gIHJldHVybiBzdGF0ZVNsaWNlVmFsdWUgYXMgRTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNoZWxsT2JqZWN0PFQsIEU+KFxuICBrZXk6IHN0cmluZyxcbiAgZXhjbHVkZUtleXM6IHN0cmluZ1tdLFxuICB2YWx1ZTogVFxuKTogRSB7XG4gIGlmICgha2V5IHx8ICF2YWx1ZSB8fCBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHt9IGFzIEU7XG4gIH1cblxuICBjb25zdCBzaGVsbCA9IGtleS5zcGxpdChPQkpFQ1RfU0VQQVJBVE9SKS5yZWR1Y2VSaWdodCgoYWNjLCBwcmV2aW91cykgPT4ge1xuICAgIHJldHVybiB7IFtwcmV2aW91c106IGFjYyB9IGFzIHVua25vd24gYXMgTm9uTnVsbGFibGU8VD47XG4gIH0sIHZhbHVlKTtcbiAgcmV0dXJuIGhhbmRsZUV4Y2x1c2lvbnMoa2V5LCBleGNsdWRlS2V5cywgc2hlbGwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGVTbGljZTxULCBFPihcbiAga2V5czogc3RyaW5nW10sXG4gIGV4Y2x1ZGVLZXlzOiBzdHJpbmdbXSxcbiAgc3RhdGU6IFRcbik6IEUge1xuICBpZiAoa2V5cyAmJiBrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB7fSBhcyBFO1xuICB9XG5cbiAgbGV0IHN0YXRlU2xpY2VzID0ge307XG4gIGZvciAoY29uc3QgY3VycmVudEtleSBvZiBrZXlzKSB7XG4gICAgY29uc3Qgc3RhdGVWYWx1ZSA9IGdldFN0YXRlU2xpY2VWYWx1ZShjdXJyZW50S2V5LCBzdGF0ZSk7XG4gICAgY29uc3Qgc2hlbGwgPSBjcmVhdGVTaGVsbE9iamVjdChjdXJyZW50S2V5LCBleGNsdWRlS2V5cywgc3RhdGVWYWx1ZSk7XG4gICAgc3RhdGVTbGljZXMgPSBkZWVwTWVyZ2Uoc3RhdGVTbGljZXMsIHNoZWxsKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZVNsaWNlcyBhcyBFO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXhjbHVzaW9ucyhcbiAga2V5OiBzdHJpbmcsXG4gIGV4Y2x1ZGVLZXlzOiBzdHJpbmdbXSxcbiAgdmFsdWU6IGFueVxuKTogYW55IHtcbiAgY29uc3QgZXhjbHVzaW9uS2V5cyA9IGdldEV4Y2x1c2lvbktleXMoa2V5LCBleGNsdWRlS2V5cyk7XG4gIGlmIChleGNsdXNpb25LZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGZpbmFsVmFsdWUgPSBkZWVwTWVyZ2Uoe30sIHZhbHVlKTtcbiAgZm9yIChjb25zdCBjdXJyZW50RXhjbHVzaW9uS2V5IG9mIGV4Y2x1c2lvbktleXMpIHtcbiAgICBjb25zdCBleGNsdXNpb25DaHVua3NTcGxpdCA9IGN1cnJlbnRFeGNsdXNpb25LZXkuc3BsaXQoT0JKRUNUX1NFUEFSQVRPUik7XG5cbiAgICBsZXQgbmVzdGVkVGVtcCA9IGZpbmFsVmFsdWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleGNsdXNpb25DaHVua3NTcGxpdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudENodW5rID0gZXhjbHVzaW9uQ2h1bmtzU3BsaXRbaV07XG5cbiAgICAgIC8vIGxhc3QgaXRlcmF0aW9uXG4gICAgICBpZiAoaSA9PT0gZXhjbHVzaW9uQ2h1bmtzU3BsaXQubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAobmVzdGVkVGVtcCAmJiBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua10pIHtcbiAgICAgICAgICBkZWxldGUgbmVzdGVkVGVtcFtjdXJyZW50Q2h1bmtdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXN0ZWRUZW1wID0gbmVzdGVkVGVtcFtjdXJyZW50Q2h1bmtdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaW5hbFZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhjbHVzaW9uS2V5cyhrZXk6IHN0cmluZywgZXhjbHVkZUtleXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICBpZiAoIWtleSB8fCAhZXhjbHVkZUtleXMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBleGNsdXNpb25LZXlzOiBzdHJpbmdbXSA9IFtdO1xuICBmb3IgKGNvbnN0IGV4Y2x1c2lvbktleSBvZiBleGNsdWRlS2V5cykge1xuICAgIGlmIChleGNsdXNpb25LZXkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgZXhjbHVzaW9uS2V5cy5wdXNoKGV4Y2x1c2lvbktleSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4Y2x1c2lvbktleXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJLZXlzQnlUeXBlKFxuICBrZXlzOiB7IFtrZXk6IHN0cmluZ106IFN0b3JhZ2VTeW5jVHlwZSB8IFN0YXRlVHJhbnNmZXJUeXBlIH0sXG4gIHR5cGU6IFN0b3JhZ2VTeW5jVHlwZSB8IFN0YXRlVHJhbnNmZXJUeXBlXG4pOiBzdHJpbmdbXSB7XG4gIGlmICgha2V5cykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMoa2V5cykuZmlsdGVyKChrZXkpID0+IGtleXNba2V5XSA9PT0gdHlwZSk7XG59XG4iXX0=