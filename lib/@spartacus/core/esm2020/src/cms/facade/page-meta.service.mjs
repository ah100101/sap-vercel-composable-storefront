/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, isDevMode, PLATFORM_ID } from '@angular/core';
import { defer, of } from 'rxjs';
import { filter, map, shareReplay, switchMap } from 'rxjs/operators';
import { resolveApplicable } from '../../util/applicable';
import { uniteLatest } from '../../util/rxjs/unite-latest';
import { PageMetaResolver } from '../page/page-meta.resolver';
import * as i0 from "@angular/core";
import * as i1 from "./cms.service";
import * as i2 from "../../lazy-loading/unified-injector";
import * as i3 from "../page/config/page-meta.config";
/**
 * Service that collects the page meta data by using injected page resolvers.
 */
export class PageMetaService {
    constructor(cms, unifiedInjector, pageMetaConfig, platformId) {
        this.cms = cms;
        this.unifiedInjector = unifiedInjector;
        this.pageMetaConfig = pageMetaConfig;
        this.platformId = platformId;
        this.resolvers$ = this.unifiedInjector
            .getMulti(PageMetaResolver)
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.meta$ = defer(() => this.cms.getCurrentPage()).pipe(filter((page) => Boolean(page)), switchMap((page) => this.getMetaResolver(page)), switchMap((metaResolver) => metaResolver ? this.resolve(metaResolver) : of(null)), shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * Returns the observed page meta data for the current page.
     *
     * The data is resolved by various PageResolvers, which are configurable.
     */
    getMeta() {
        return this.meta$;
    }
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    resolve(metaResolver) {
        const resolverMethods = this.getResolverMethods();
        const resolvedData = Object.keys(resolverMethods)
            // TODO: Revisit if typing is possible here with Template Literal Types when we update to TS >=4.1
            .filter((key) => metaResolver[resolverMethods[key]])
            .map((key) => {
            return metaResolver[resolverMethods[key]]()
                .pipe(map((data) => ({ [key]: data })));
        });
        if (resolvedData.length === 0) {
            // uniteLatest will fail otherwise
            return of({});
        }
        else {
            return uniteLatest(resolvedData).pipe(map((data) => Object.assign({}, ...data)));
        }
    }
    /**
     * Returns an object with resolvers. The object properties represent the `PageMeta` property, i.e.:
     *
     * ```
     * {
     *   title: 'resolveTitle',
     *   robots: 'resolveRobots'
     * }
     * ```
     *
     * This list of resolvers is filtered for CSR vs SSR processing since not all resolvers are
     * relevant during browsing.
     */
    getResolverMethods() {
        const resolverMethods = {};
        // filter the resolvers to avoid unnecessary processing in CSR
        this.pageMetaConfig?.pageMeta?.resolvers
            ?.filter((resolver) => {
            return (
            // always resolve in SSR
            !isPlatformBrowser(this.platformId ?? '') ||
                // resolve in CSR when it's not disabled
                !resolver.disabledInCsr ||
                // resolve in CSR when resolver is enabled in devMode
                (isDevMode() && this.pageMetaConfig?.pageMeta?.enableInDevMode));
        })
            .forEach((resolver) => (resolverMethods[resolver.property] = resolver.method));
        return resolverMethods;
    }
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    getMetaResolver(page) {
        return this.resolvers$.pipe(map((resolvers) => resolveApplicable(resolvers, [page], [page])));
    }
}
PageMetaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: PageMetaService, deps: [{ token: i1.CmsService }, { token: i2.UnifiedInjector }, { token: i3.PageMetaConfig }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
PageMetaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: PageMetaService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: PageMetaService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CmsService }, { type: i2.UnifiedInjector }, { type: i3.PageMetaConfig }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,