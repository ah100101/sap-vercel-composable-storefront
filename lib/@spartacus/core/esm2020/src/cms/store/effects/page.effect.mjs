/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, filter, groupBy, map, mergeMap, switchMap, take, } from 'rxjs/operators';
import { AuthActions } from '../../../auth/user-auth/store/actions/index';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/page/cms-page.connector";
import * as i3 from "../../../routing/index";
export class PageEffects {
    constructor(actions$, cmsPageConnector, routingService) {
        this.actions$ = actions$;
        this.cmsPageConnector = cmsPageConnector;
        this.routingService = routingService;
        this.refreshPage$ = createEffect(() => this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, AuthActions.LOGOUT, AuthActions.LOGIN), switchMap(() => this.routingService.getRouterState().pipe(filter((routerState) => routerState &&
            routerState.state &&
            routerState.state.cmsRequired &&
            !routerState.nextState), take(1), map((routerState) => routerState.state.context), mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))))));
        this.loadPageData$ = createEffect(() => this.actions$.pipe(ofType(CmsActions.LOAD_CMS_PAGE_DATA), map((action) => action.payload), groupBy((pageContext) => serializePageContext(pageContext)), mergeMap((group) => group.pipe(switchMap((pageContext) => this.cmsPageConnector.get(pageContext).pipe(mergeMap((cmsStructure) => {
            const actions = [
                new CmsActions.CmsGetComponentFromPage((cmsStructure.components ?? []).map((component) => ({
                    component,
                    pageContext,
                }))),
                new CmsActions.LoadCmsPageDataSuccess(pageContext, cmsStructure.page ?? {}),
            ];
            const pageLabel = cmsStructure.page?.label;
            // For content pages the page label returned from backend can be different than page ID initially assumed from route.
            // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.
            if (pageLabel && pageLabel !== pageContext.id) {
                actions.unshift(new CmsActions.CmsSetPageSuccessIndex({ id: pageLabel, type: pageContext.type }, cmsStructure.page ?? {}));
            }
            return actions;
        }), catchError((error) => of(new CmsActions.LoadCmsPageDataFail(pageContext, normalizeHttpError(error))))))))));
    }
}
PageEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: PageEffects, deps: [{ token: i1.Actions }, { token: i2.CmsPageConnector }, { token: i3.RoutingService }], target: i0.ɵɵFactoryTarget.Injectable });
PageEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: PageEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: PageEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.CmsPageConnector }, { type: i3.RoutingService }]; } });
//# sourceMappingURL=data:application/json;base64,