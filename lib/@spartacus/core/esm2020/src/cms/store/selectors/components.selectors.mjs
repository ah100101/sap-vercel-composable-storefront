/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
export const getComponentsState = createSelector(getCmsState, (state) => state.components);
export const componentsContextSelectorFactory = (uid) => {
    return createSelector(getComponentsState, (componentsState) => StateUtils.entitySelector(componentsState, uid));
};
export const componentsLoaderStateSelectorFactory = (uid, context) => {
    return createSelector(componentsContextSelectorFactory(uid), (componentsContext) => (componentsContext &&
        componentsContext.pageContext &&
        componentsContext.pageContext[context]) ||
        StateUtils.initialLoaderState);
};
/**
 * This selector will return:
 *   - true: component for this context exists
 *   - false: component for this context doesn't exist
 *   - undefined: if the exists status for component is unknown
 *
 * @param uid
 * @param context
 */
export const componentsContextExistsSelectorFactory = (uid, context) => {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), (loaderState) => StateUtils.loaderValueSelector(loaderState));
};
export const componentsDataSelectorFactory = (uid) => {
    return createSelector(componentsContextSelectorFactory(uid), (state) => state ? state.component : undefined);
};
/**
 * This selector will return:
 *   - CmsComponent instance: if we have component data for specified context
 *   - null: if there is no component data for specified context
 *   - undefined: if status of component data for specified context is unknown
 *
 * @param uid
 * @param context
 */
export const componentsSelectorFactory = (uid, context) => {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), (componentState, exists) => {
        switch (exists) {
            case true:
                return componentState;
            case false:
                return null;
            case undefined:
                return undefined;
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvc3RvcmUvc2VsZWN0b3JzL2NvbXBvbmVudHMuc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUczQixjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFN0QsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsQ0FDOUMsR0FBVyxFQUNvRCxFQUFFO0lBQ2pFLE9BQU8sY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FDNUQsVUFBVSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQ2hELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBRyxDQUNsRCxHQUFXLEVBQ1gsT0FBZSxFQUNrRCxFQUFFO0lBQ25FLE9BQU8sY0FBYyxDQUNuQixnQ0FBZ0MsQ0FBQyxHQUFHLENBQUMsRUFDckMsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQ3BCLENBQUMsaUJBQWlCO1FBQ2hCLGlCQUFpQixDQUFDLFdBQVc7UUFDN0IsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FDaEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUcsQ0FDcEQsR0FBVyxFQUNYLE9BQWUsRUFDMEIsRUFBRTtJQUMzQyxPQUFPLGNBQWMsQ0FDbkIsb0NBQW9DLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNsRCxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUM3RCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQUcsQ0FDM0MsR0FBVyxFQUMrQyxFQUFFO0lBQzVELE9BQU8sY0FBYyxDQUFDLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDckUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3BDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQ3ZDLEdBQVcsRUFDWCxPQUFlLEVBQ2tELEVBQUU7SUFDbkUsT0FBTyxjQUFjLENBQ25CLDZCQUE2QixDQUFDLEdBQUcsQ0FBQyxFQUNsQyxzQ0FBc0MsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ3BELENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3pCLFFBQVEsTUFBTSxFQUFFO1lBQ2QsS0FBSyxJQUFJO2dCQUNQLE9BQU8sY0FBYyxDQUFDO1lBQ3hCLEtBQUssS0FBSztnQkFDUixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssU0FBUztnQkFDWixPQUFPLFNBQVMsQ0FBQztTQUNwQjtJQUNILENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IENvbXBvbmVudHNDb250ZXh0LCBDb21wb25lbnRzU3RhdGUsIFN0YXRlV2l0aENtcyB9IGZyb20gJy4uL2Ntcy1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRDbXNTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3RvcnMnO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29tcG9uZW50c1N0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDbXMsXG4gIENvbXBvbmVudHNTdGF0ZVxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENtc1N0YXRlLCAoc3RhdGUpID0+IHN0YXRlLmNvbXBvbmVudHMpO1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ29tcG9uZW50c0NvbnRleHQgfCB1bmRlZmluZWQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENvbXBvbmVudHNTdGF0ZSwgKGNvbXBvbmVudHNTdGF0ZSkgPT5cbiAgICBTdGF0ZVV0aWxzLmVudGl0eVNlbGVjdG9yKGNvbXBvbmVudHNTdGF0ZSwgdWlkKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNMb2FkZXJTdGF0ZVNlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmcsXG4gIGNvbnRleHQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8Ym9vbGVhbj4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksXG4gICAgKGNvbXBvbmVudHNDb250ZXh0KSA9PlxuICAgICAgKGNvbXBvbmVudHNDb250ZXh0ICYmXG4gICAgICAgIGNvbXBvbmVudHNDb250ZXh0LnBhZ2VDb250ZXh0ICYmXG4gICAgICAgIGNvbXBvbmVudHNDb250ZXh0LnBhZ2VDb250ZXh0W2NvbnRleHRdKSB8fFxuICAgICAgU3RhdGVVdGlscy5pbml0aWFsTG9hZGVyU3RhdGVcbiAgKTtcbn07XG5cbi8qKlxuICogVGhpcyBzZWxlY3RvciB3aWxsIHJldHVybjpcbiAqICAgLSB0cnVlOiBjb21wb25lbnQgZm9yIHRoaXMgY29udGV4dCBleGlzdHNcbiAqICAgLSBmYWxzZTogY29tcG9uZW50IGZvciB0aGlzIGNvbnRleHQgZG9lc24ndCBleGlzdFxuICogICAtIHVuZGVmaW5lZDogaWYgdGhlIGV4aXN0cyBzdGF0dXMgZm9yIGNvbXBvbmVudCBpcyB1bmtub3duXG4gKlxuICogQHBhcmFtIHVpZFxuICogQHBhcmFtIGNvbnRleHRcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0RXhpc3RzU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZyxcbiAgY29udGV4dDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgYm9vbGVhbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5KHVpZCwgY29udGV4dCksXG4gICAgKGxvYWRlclN0YXRlKSA9PiBTdGF0ZVV0aWxzLmxvYWRlclZhbHVlU2VsZWN0b3IobG9hZGVyU3RhdGUpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0RhdGFTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ21zQ29tcG9uZW50IHwgdW5kZWZpbmVkPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3Rvcihjb21wb25lbnRzQ29udGV4dFNlbGVjdG9yRmFjdG9yeSh1aWQpLCAoc3RhdGUpID0+XG4gICAgc3RhdGUgPyBzdGF0ZS5jb21wb25lbnQgOiB1bmRlZmluZWRcbiAgKTtcbn07XG5cbi8qKlxuICogVGhpcyBzZWxlY3RvciB3aWxsIHJldHVybjpcbiAqICAgLSBDbXNDb21wb25lbnQgaW5zdGFuY2U6IGlmIHdlIGhhdmUgY29tcG9uZW50IGRhdGEgZm9yIHNwZWNpZmllZCBjb250ZXh0XG4gKiAgIC0gbnVsbDogaWYgdGhlcmUgaXMgbm8gY29tcG9uZW50IGRhdGEgZm9yIHNwZWNpZmllZCBjb250ZXh0XG4gKiAgIC0gdW5kZWZpbmVkOiBpZiBzdGF0dXMgb2YgY29tcG9uZW50IGRhdGEgZm9yIHNwZWNpZmllZCBjb250ZXh0IGlzIHVua25vd25cbiAqXG4gKiBAcGFyYW0gdWlkXG4gKiBAcGFyYW0gY29udGV4dFxuICovXG5leHBvcnQgY29uc3QgY29tcG9uZW50c1NlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmcsXG4gIGNvbnRleHQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENtc0NvbXBvbmVudCB8IG51bGwgfCB1bmRlZmluZWQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGNvbXBvbmVudHNEYXRhU2VsZWN0b3JGYWN0b3J5KHVpZCksXG4gICAgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkodWlkLCBjb250ZXh0KSxcbiAgICAoY29tcG9uZW50U3RhdGUsIGV4aXN0cykgPT4ge1xuICAgICAgc3dpdGNoIChleGlzdHMpIHtcbiAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgIHJldHVybiBjb21wb25lbnRTdGF0ZTtcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuIl19