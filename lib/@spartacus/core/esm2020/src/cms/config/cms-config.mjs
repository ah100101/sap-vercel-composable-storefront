/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { Config } from '../../config/config-tokens';
import { OccConfig } from '../../occ/config/occ-config';
import * as i0 from "@angular/core";
export const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
export const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
export const SMART_EDIT_DUMMY_COMPONENT_TYPE = 'SmartEditDummyCMSComponent';
/** Strategy to control the loading strategy of DOM elements. */
export var DeferLoadingStrategy;
(function (DeferLoadingStrategy) {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
    /** Renders the DOM instantly without being concerned with the view port */
    DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
})(DeferLoadingStrategy || (DeferLoadingStrategy = {}));
export class CmsConfig extends OccConfig {
}
CmsConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CmsConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
CmsConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CmsConfig, providedIn: 'root', useExisting: Config });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CmsConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useExisting: Config,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2Ntcy9jb25maWcvY21zLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFFM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7QUErQnhELE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLHFCQUFxQixDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGtCQUFrQixDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLDRCQUE0QixDQUFDO0FBb0Q1RSxnRUFBZ0U7QUFDaEUsTUFBTSxDQUFOLElBQVksb0JBS1g7QUFMRCxXQUFZLG9CQUFvQjtJQUM5QixrRkFBa0Y7SUFDbEYsa0RBQTBCLENBQUE7SUFDMUIsMkVBQTJFO0lBQzNFLG1EQUEyQixDQUFBO0FBQzdCLENBQUMsRUFMVyxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBSy9CO0FBMkJELE1BQU0sT0FBZ0IsU0FBVSxTQUFRLFNBQVM7O3NHQUEzQixTQUFTOzBHQUFULFNBQVMsY0FIakIsTUFBTSxlQUNMLE1BQU07MkZBRUMsU0FBUztrQkFKOUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtvQkFDbEIsV0FBVyxFQUFFLE1BQU07aUJBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgU3RhdGljUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWctdG9rZW5zJztcbmltcG9ydCB7IENtc0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XG5pbXBvcnQgeyBPY2NDb25maWcgfSBmcm9tICcuLi8uLi9vY2MvY29uZmlnL29jYy1jb25maWcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YW5kYXJkQ21zQ29tcG9uZW50Q29uZmlnIHtcbiAgQ01TU2l0ZUNvbnRleHRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDTVNMaW5rQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgU2ltcGxlUmVzcG9uc2l2ZUJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFNpbXBsZUJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENNU1BhcmFncmFwaENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEJyZWFkY3J1bWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBOYXZpZ2F0aW9uQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgRm9vdGVyTmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENhdGVnb3J5TmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RBZGRUb0NhcnRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBNaW5pQ2FydENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RDYXJvdXNlbENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFNlYXJjaEJveENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RSZWZlcmVuY2VzQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQ01TVGFiUGFyYWdyYXBoQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgTG9naW5Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzcEluY2x1ZGVDbXNDb21wb25lbnRDb25maWcge1xuICBBY2NvdW50QWRkcmVzc0Jvb2tDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBGb3Jnb3RQYXNzd29yZENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFJlc2V0UGFzc3dvcmRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0RGV0YWlsc1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RTcGVjc1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RSZXZpZXdzVGFiQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbn1cblxuZXhwb3J0IGNvbnN0IEpTUF9JTkNMVURFX0NNU19DT01QT05FTlRfVFlQRSA9ICdKc3BJbmNsdWRlQ29tcG9uZW50JztcbmV4cG9ydCBjb25zdCBDTVNfRkxFWF9DT01QT05FTlRfVFlQRSA9ICdDTVNGbGV4Q29tcG9uZW50JztcbmV4cG9ydCBjb25zdCBTTUFSVF9FRElUX0RVTU1ZX0NPTVBPTkVOVF9UWVBFID0gJ1NtYXJ0RWRpdER1bW15Q01TQ29tcG9uZW50JztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9mIHRoZSBDTVMgY29tcG9uZW50J3MgY2hpbGQgcm91dGVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ21zQ29tcG9uZW50Q2hpbGRSb3V0ZXNDb25maWcge1xuICAvKipcbiAgICogUm91dGUgYGRhdGFgIHByb3BlcnR5IHRvIGFwcGx5IG9uIHRoZSBwYXJlbnQgKGhvc3QpIHJvdXRlIG9mIHRoZSBDTVMgY2hpbGQgcm91dGVzLlxuICAgKi9cbiAgcGFyZW50PzogUGljazxSb3V0ZSwgJ2RhdGEnPjtcblxuICAvKipcbiAgICogQ2hpbGQgcm91dGVzIGRlZmluZWQgYnkgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgQ01TIGNvbXBvbmVudCBvbiB0aGUgcGFnZS5cbiAgICovXG4gIGNoaWxkcmVuPzogUm91dGVbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbXNDb21wb25lbnRNYXBwaW5nPFQgPSBDbXNDb21wb25lbnQ+IHtcbiAgY29tcG9uZW50PzogYW55O1xuICAvKipcbiAgICogQ29uZmlndXJhYmxlIGNvbXBvbmVudCBwcm92aWRlcnMgZm9yIGNtcyBjb21wb25lbnRzLlxuICAgKlxuICAgKiBDb21wb25lbnQgc2VydmljZXMgYXJlIGRlc2lnbmVkIHRvIGJlIG5vbi1zaW5nbGV0b24gc2VydmljZXMgYW5kIGFyZSBzY29wZWRcbiAgICogdG8gdGhlIGNvbXBvbmVudCBpbmplY3Rpb24gdHJlZS4gVGhlIGFkdmFudGFnZSBvZiB0aGVzZSBzZXJ2aWNlcyBpcyB0aGF0IHRoZXkgY2FuXG4gICAqIHJlc29sdmUgc2VydmljZXMgaW5qZWN0ZWQgdG8gdGhlIGNvbXBvbmVudCBpbmplY3Rpb24gdHJlZS4gSG93ZXZlciwgdGhlc2Ugc2VydmljZXNcbiAgICogY2Fubm90IGJlIGV4dGVuZGVkIHdpdGggdGhlIG5hdGl2ZSBBbmd1bGFyIERJIHN5c3RlbS5cbiAgICpcbiAgICogVGhlIGNvbmZpZ3VyYWJsZSBjb21wb25lbnQgcHJvdmlkZXJzIG1pdGlnYXRlIHRoaXMgZG93bnNpZGUsIGJ5IGFsbG93aW5nIHlvdSB0byBwcm92aWRlXG4gICAqIGNvbXBvbmVudCBwcm92aWRlcnMgdGhyb3VnaCBzZXJ2aWNlcy5cbiAgICovXG4gIHByb3ZpZGVycz86IFN0YXRpY1Byb3ZpZGVyW107XG4gIGNoaWxkUm91dGVzPzogUm91dGVbXSB8IENtc0NvbXBvbmVudENoaWxkUm91dGVzQ29uZmlnO1xuICBkaXNhYmxlU1NSPzogYm9vbGVhbjtcbiAgaTE4bktleXM/OiBzdHJpbmdbXTtcbiAgZ3VhcmRzPzogYW55W107XG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgZGF0YSBjYW4gYmUgc3RhdGljYWxseSBjb25maWd1cmVkLiBUaGUgZGF0YSBjYW4gYmUgdXNlZCBmb3IgdmFyaW91cyByZWFzb25zOlxuICAgKiAtIEltcHJvdmUgcGVyZm9ybWFuY2Ugd2l0aCBhbiBpbml0aWFsIGRhdGEgdGhhdCBkb2Vzbid0IHJlcXVpcmUgQVBJIHJlc3BvbnNlXG4gICAqIC0gSW50cm9kdWNlIFVJIHByb3BlcnRpZXMgdGhhdCBhcmUgbm90IGF2YWlsYWJsZSBvbiB0aGUgQVBJXG4gICAqIC0gQnVpbGQgZ2hvc3QgZGVzaWduIGJhc2VkIG9uIHRoZSBpbml0aWFsIGRhdGEgdGhhdCBpcyB1c2VkIHByaW9yIHRvIHRoZSBiYWNrZW5kIGRhdGEgaXMgbG9hZGVkXG4gICAqL1xuICBkYXRhPzogVDtcblxuICAvKipcbiAgICogRGVmZXJMb2FkaW5nIGNhbiBiZSBzcGVjaWZpZWQgZ2xvYmFsbHksIGJ1dCBhbHNvIHBlciBjb21wb25lbnQuXG4gICAqIFNvbWUgY29tcG9uZW50cyByZXF1aXJlIGRpcmVjdCBsb2FkaW5nIHdoaWxlIGl0J3Mgbm90IGluaXRpYWxseVxuICAgKiBpbiB0aGUgdmlld3BvcnQuXG4gICAqL1xuICBkZWZlckxvYWRpbmc/OiBEZWZlckxvYWRpbmdTdHJhdGVneTtcbn1cblxuLyoqIFN0cmF0ZWd5IHRvIGNvbnRyb2wgdGhlIGxvYWRpbmcgc3RyYXRlZ3kgb2YgRE9NIGVsZW1lbnRzLiAqL1xuZXhwb3J0IGVudW0gRGVmZXJMb2FkaW5nU3RyYXRlZ3kge1xuICAvKiogRGVmZXJzIGxvYWRpbmcgb2YgRE9NIGVsZW1lbnRzIHVudGlsIGVsZW1lbnQgaXMgbmVhci9pbiB0aGUgdXNlcnMgdmlldyBwb3J0ICovXG4gIERFRkVSID0gJ0RFRkVSUkVELUxPQURJTkcnLFxuICAvKiogUmVuZGVycyB0aGUgRE9NIGluc3RhbnRseSB3aXRob3V0IGJlaW5nIGNvbmNlcm5lZCB3aXRoIHRoZSB2aWV3IHBvcnQgKi9cbiAgSU5TVEFOVCA9ICdJTlNUQU5ULUxPQURJTkcnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENNU0NvbXBvbmVudENvbmZpZ1xuICBleHRlbmRzIFN0YW5kYXJkQ21zQ29tcG9uZW50Q29uZmlnLFxuICAgIEpzcEluY2x1ZGVDbXNDb21wb25lbnRDb25maWcge1xuICBbY29tcG9uZW50VHlwZTogc3RyaW5nXTogQ21zQ29tcG9uZW50TWFwcGluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlTW9kdWxlQ29uZmlnIHtcbiAgLyoqXG4gICAqIExhenkgcmVzb2x2ZWQgZmVhdHVyZSBtb2R1bGVcbiAgICovXG4gIG1vZHVsZT86ICgpID0+IFByb21pc2U8YW55PjtcbiAgLyoqXG4gICAqIExhenkgcmVzb2x2ZWQgZGVwZW5kZW5jeSBtb2R1bGVzIG9yIGZlYXR1cmVzIHJlZmVyZW5jZWQgYnkgbmFtZVxuICAgKi9cbiAgZGVwZW5kZW5jaWVzPzogKCgoKSA9PiBQcm9taXNlPGFueT4pIHwgc3RyaW5nKVtdO1xuICAvKipcbiAgICogQ21zIGNvbXBvbmVudHMgY292ZXJlZCBieSB0aGlzIGZlYXR1cmVcbiAgICovXG4gIGNtc0NvbXBvbmVudHM/OiBzdHJpbmdbXTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUV4aXN0aW5nOiBDb25maWcsXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENtc0NvbmZpZyBleHRlbmRzIE9jY0NvbmZpZyB7XG4gIGZlYXR1cmVNb2R1bGVzPzogeyBbZmVhdHVyZU5hbWU6IHN0cmluZ106IEZlYXR1cmVNb2R1bGVDb25maWcgfCBzdHJpbmcgfTtcbiAgY21zQ29tcG9uZW50cz86IENNU0NvbXBvbmVudENvbmZpZztcbiAgY29tcG9uZW50c0xvYWRpbmc/OiB7XG4gICAgcGFnZVNpemU/OiBudW1iZXI7XG4gIH07XG59XG5cbmRlY2xhcmUgbW9kdWxlICcuLi8uLi9jb25maWcvY29uZmlnLXRva2Vucycge1xuICBpbnRlcmZhY2UgQ29uZmlnIGV4dGVuZHMgQ21zQ29uZmlnIHt9XG59XG4iXX0=