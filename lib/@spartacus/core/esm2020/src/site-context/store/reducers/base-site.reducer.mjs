/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { SiteContextActions } from '../actions/index';
export const initialState = {
    entities: null,
    details: {},
    activeSite: '',
};
export function reducer(state = initialState, action) {
    switch (action.type) {
        case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {
            return {
                ...state,
                details: action.payload,
            };
        }
        case SiteContextActions.SET_ACTIVE_BASE_SITE: {
            // if active base site is updated,
            // the active base site details data should also be updated
            let details = {};
            if (state.entities) {
                details = state.entities[action.payload];
            }
            return {
                ...state,
                details,
                activeSite: action.payload,
            };
        }
        case SiteContextActions.LOAD_BASE_SITES_SUCCESS: {
            const sites = action.payload;
            const entities = sites.reduce((siteEntities, site) => {
                return {
                    ...siteEntities,
                    [site.uid ?? '']: site,
                };
            }, {
                ...state.entities,
            });
            // after base sites entities are populated,
            // the active base site details data is also populated
            const details = entities[state.activeSite];
            return {
                ...state,
                details,
                entities,
            };
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zaXRlLnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9zaXRlLWNvbnRleHQvc3RvcmUvcmVkdWNlcnMvYmFzZS1zaXRlLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUdILE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3RELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBa0I7SUFDekMsUUFBUSxFQUFFLElBQUk7SUFDZCxPQUFPLEVBQUUsRUFBRTtJQUNYLFVBQVUsRUFBRSxFQUFFO0NBQ2YsQ0FBQztBQUVGLE1BQU0sVUFBVSxPQUFPLENBQ3JCLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQXlDO0lBRXpDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDOUMsT0FBTztnQkFDTCxHQUFHLEtBQUs7Z0JBQ1IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO2FBQ3hCLENBQUM7U0FDSDtRQUVELEtBQUssa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUM1QyxrQ0FBa0M7WUFDbEMsMkRBQTJEO1lBQzNELElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNqQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMxQztZQUNELE9BQU87Z0JBQ0wsR0FBRyxLQUFLO2dCQUNSLE9BQU87Z0JBQ1AsVUFBVSxFQUFFLE1BQU0sQ0FBQyxPQUFPO2FBQzNCLENBQUM7U0FDSDtRQUVELEtBQUssa0JBQWtCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUMvQyxNQUFNLEtBQUssR0FBZSxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ3pDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQzNCLENBQUMsWUFBeUMsRUFBRSxJQUFjLEVBQUUsRUFBRTtnQkFDNUQsT0FBTztvQkFDTCxHQUFHLFlBQVk7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUk7aUJBQ3ZCLENBQUM7WUFDSixDQUFDLEVBQ0Q7Z0JBQ0UsR0FBRyxLQUFLLENBQUMsUUFBUTthQUNsQixDQUNGLENBQUM7WUFDRiwyQ0FBMkM7WUFDM0Msc0RBQXNEO1lBQ3RELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFM0MsT0FBTztnQkFDTCxHQUFHLEtBQUs7Z0JBQ1IsT0FBTztnQkFDUCxRQUFRO2FBQ1QsQ0FBQztTQUNIO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBCYXNlU2l0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL21pc2MubW9kZWwnO1xuaW1wb3J0IHsgU2l0ZUNvbnRleHRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBCYXNlU2l0ZVN0YXRlIH0gZnJvbSAnLi4vc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBCYXNlU2l0ZVN0YXRlID0ge1xuICBlbnRpdGllczogbnVsbCxcbiAgZGV0YWlsczoge30sXG4gIGFjdGl2ZVNpdGU6ICcnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXIoXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IFNpdGVDb250ZXh0QWN0aW9ucy5CYXNlU2l0ZUFjdGlvblxuKTogQmFzZVNpdGVTdGF0ZSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNpdGVDb250ZXh0QWN0aW9ucy5MT0FEX0JBU0VfU0lURV9TVUNDRVNTOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZGV0YWlsczogYWN0aW9uLnBheWxvYWQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgU2l0ZUNvbnRleHRBY3Rpb25zLlNFVF9BQ1RJVkVfQkFTRV9TSVRFOiB7XG4gICAgICAvLyBpZiBhY3RpdmUgYmFzZSBzaXRlIGlzIHVwZGF0ZWQsXG4gICAgICAvLyB0aGUgYWN0aXZlIGJhc2Ugc2l0ZSBkZXRhaWxzIGRhdGEgc2hvdWxkIGFsc28gYmUgdXBkYXRlZFxuICAgICAgbGV0IGRldGFpbHMgPSB7fTtcbiAgICAgIGlmIChzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICBkZXRhaWxzID0gc3RhdGUuZW50aXRpZXNbYWN0aW9uLnBheWxvYWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGRldGFpbHMsXG4gICAgICAgIGFjdGl2ZVNpdGU6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIFNpdGVDb250ZXh0QWN0aW9ucy5MT0FEX0JBU0VfU0lURVNfU1VDQ0VTUzoge1xuICAgICAgY29uc3Qgc2l0ZXM6IEJhc2VTaXRlW10gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gc2l0ZXMucmVkdWNlKFxuICAgICAgICAoc2l0ZUVudGl0aWVzOiB7IFt1aWQ6IHN0cmluZ106IEJhc2VTaXRlIH0sIHNpdGU6IEJhc2VTaXRlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnNpdGVFbnRpdGllcyxcbiAgICAgICAgICAgIFtzaXRlLnVpZCA/PyAnJ106IHNpdGUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLnN0YXRlLmVudGl0aWVzLFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy8gYWZ0ZXIgYmFzZSBzaXRlcyBlbnRpdGllcyBhcmUgcG9wdWxhdGVkLFxuICAgICAgLy8gdGhlIGFjdGl2ZSBiYXNlIHNpdGUgZGV0YWlscyBkYXRhIGlzIGFsc28gcG9wdWxhdGVkXG4gICAgICBjb25zdCBkZXRhaWxzID0gZW50aXRpZXNbc3RhdGUuYWN0aXZlU2l0ZV07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkZXRhaWxzLFxuICAgICAgICBlbnRpdGllcyxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuIl19