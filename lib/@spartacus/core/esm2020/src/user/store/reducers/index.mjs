/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { InjectionToken } from '@angular/core';
import { AuthActions } from '../../../auth/user-auth/store/actions/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { CUSTOMER_COUPONS, NOTIFICATION_PREFERENCES, PRODUCT_INTERESTS, REGIONS, USER_ADDRESSES, USER_CONSENTS, USER_COST_CENTERS, USER_PAYMENT_METHODS, } from '../user-state';
import * as fromBillingCountriesReducer from './billing-countries.reducer';
import * as fromCustomerCouponReducer from './customer-coupon.reducer';
import * as fromDeliveryCountries from './delivery-countries.reducer';
import * as fromNotificationPreferenceReducer from './notification-preference.reducer';
import * as fromPaymentReducer from './payment-methods.reducer';
import * as fromInterestsReducer from './product-interests.reducer';
import * as fromRegionsReducer from './regions.reducer';
import * as fromAddressesReducer from './user-addresses.reducer';
import * as fromUserConsentsReducer from './user-consents.reducer';
import * as fromCostCenterReducer from './user-cost-center.reducer';
export function getReducers() {
    return {
        addresses: loaderReducer(USER_ADDRESSES, fromAddressesReducer.reducer),
        billingCountries: fromBillingCountriesReducer.reducer,
        consents: loaderReducer(USER_CONSENTS, fromUserConsentsReducer.reducer),
        payments: loaderReducer(USER_PAYMENT_METHODS, fromPaymentReducer.reducer),
        countries: fromDeliveryCountries.reducer,
        regions: loaderReducer(REGIONS, fromRegionsReducer.reducer),
        customerCoupons: loaderReducer(CUSTOMER_COUPONS, fromCustomerCouponReducer.reducer),
        notificationPreferences: loaderReducer(NOTIFICATION_PREFERENCES, fromNotificationPreferenceReducer.reducer),
        productInterests: loaderReducer(PRODUCT_INTERESTS, fromInterestsReducer.reducer),
        costCenters: loaderReducer(USER_COST_CENTERS, fromCostCenterReducer.reducer),
    };
}
export const reducerToken = new InjectionToken('UserReducers');
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearUserState(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
export const metaReducers = [clearUserState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy91c2VyL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQVExRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDM0UsT0FBTyxFQUNMLGdCQUFnQixFQUNoQix3QkFBd0IsRUFDeEIsaUJBQWlCLEVBQ2pCLE9BQU8sRUFHUCxjQUFjLEVBQ2QsYUFBYSxFQUNiLGlCQUFpQixFQUNqQixvQkFBb0IsR0FDckIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxLQUFLLDJCQUEyQixNQUFNLDZCQUE2QixDQUFDO0FBQzNFLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxLQUFLLGlDQUFpQyxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZGLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEtBQUssb0JBQW9CLE1BQU0sNkJBQTZCLENBQUM7QUFDcEUsT0FBTyxLQUFLLGtCQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sS0FBSyxvQkFBb0IsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEtBQUssdUJBQXVCLE1BQU0seUJBQXlCLENBQUM7QUFDbkUsT0FBTyxLQUFLLHFCQUFxQixNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE1BQU0sVUFBVSxXQUFXO0lBQ3pCLE9BQU87UUFDTCxTQUFTLEVBQUUsYUFBYSxDQUN0QixjQUFjLEVBQ2Qsb0JBQW9CLENBQUMsT0FBTyxDQUM3QjtRQUNELGdCQUFnQixFQUFFLDJCQUEyQixDQUFDLE9BQU87UUFDckQsUUFBUSxFQUFFLGFBQWEsQ0FDckIsYUFBYSxFQUNiLHVCQUF1QixDQUFDLE9BQU8sQ0FDaEM7UUFDRCxRQUFRLEVBQUUsYUFBYSxDQUNyQixvQkFBb0IsRUFDcEIsa0JBQWtCLENBQUMsT0FBTyxDQUMzQjtRQUNELFNBQVMsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPO1FBQ3hDLE9BQU8sRUFBRSxhQUFhLENBQ3BCLE9BQU8sRUFDUCxrQkFBa0IsQ0FBQyxPQUFPLENBQzNCO1FBQ0QsZUFBZSxFQUFFLGFBQWEsQ0FDNUIsZ0JBQWdCLEVBQ2hCLHlCQUF5QixDQUFDLE9BQU8sQ0FDbEM7UUFDRCx1QkFBdUIsRUFBRSxhQUFhLENBQ3BDLHdCQUF3QixFQUN4QixpQ0FBaUMsQ0FBQyxPQUFPLENBQzFDO1FBQ0QsZ0JBQWdCLEVBQUUsYUFBYSxDQUM3QixpQkFBaUIsRUFDakIsb0JBQW9CLENBQUMsT0FBTyxDQUM3QjtRQUNELFdBQVcsRUFBRSxhQUFhLENBQ3hCLGlCQUFpQixFQUNqQixxQkFBcUIsQ0FBQyxPQUFPLENBQzlCO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQ3ZCLElBQUksY0FBYyxDQUE4QixjQUFjLENBQUMsQ0FBQztBQUVsRSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQWE7SUFDdkMsT0FBTyxFQUFFLFlBQVk7SUFDckIsVUFBVSxFQUFFLFdBQVc7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxjQUFjLENBQzVCLE9BQTJCO0lBRTNCLE9BQU8sVUFBVSxLQUFLLEVBQUUsTUFBTTtRQUM1QixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUN0QyxLQUFLLEdBQUcsU0FBUyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQXVCLENBQUMsY0FBYyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvblJlZHVjZXIsIEFjdGlvblJlZHVjZXJNYXAsIE1ldGFSZWR1Y2VyIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQXV0aEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9hdXRoL3VzZXItYXV0aC9zdG9yZS9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcbmltcG9ydCB7IENvbnNlbnRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NvbnNlbnQubW9kZWwnO1xuaW1wb3J0IHsgQ3VzdG9tZXJDb3Vwb25TZWFyY2hSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jdXN0b21lci1jb3Vwb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLm1vZGVsJztcbmltcG9ydCB7IENvc3RDZW50ZXIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmctdW5pdC5tb2RlbCc7XG5pbXBvcnQgeyBQYXltZW50RGV0YWlscyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3BheW1lbnQubW9kZWwnO1xuaW1wb3J0IHsgUHJvZHVjdEludGVyZXN0U2VhcmNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcHJvZHVjdC1pbnRlcmVzdC5tb2RlbCc7XG5pbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcbmltcG9ydCB7XG4gIENVU1RPTUVSX0NPVVBPTlMsXG4gIE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyxcbiAgUFJPRFVDVF9JTlRFUkVTVFMsXG4gIFJFR0lPTlMsXG4gIFJlZ2lvbnNTdGF0ZSxcbiAgVXNlclN0YXRlLFxuICBVU0VSX0FERFJFU1NFUyxcbiAgVVNFUl9DT05TRU5UUyxcbiAgVVNFUl9DT1NUX0NFTlRFUlMsXG4gIFVTRVJfUEFZTUVOVF9NRVRIT0RTLFxufSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCAqIGFzIGZyb21CaWxsaW5nQ291bnRyaWVzUmVkdWNlciBmcm9tICcuL2JpbGxpbmctY291bnRyaWVzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUN1c3RvbWVyQ291cG9uUmVkdWNlciBmcm9tICcuL2N1c3RvbWVyLWNvdXBvbi5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21EZWxpdmVyeUNvdW50cmllcyBmcm9tICcuL2RlbGl2ZXJ5LWNvdW50cmllcy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21Ob3RpZmljYXRpb25QcmVmZXJlbmNlUmVkdWNlciBmcm9tICcuL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVBheW1lbnRSZWR1Y2VyIGZyb20gJy4vcGF5bWVudC1tZXRob2RzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUludGVyZXN0c1JlZHVjZXIgZnJvbSAnLi9wcm9kdWN0LWludGVyZXN0cy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21SZWdpb25zUmVkdWNlciBmcm9tICcuL3JlZ2lvbnMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQWRkcmVzc2VzUmVkdWNlciBmcm9tICcuL3VzZXItYWRkcmVzc2VzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVVzZXJDb25zZW50c1JlZHVjZXIgZnJvbSAnLi91c2VyLWNvbnNlbnRzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUNvc3RDZW50ZXJSZWR1Y2VyIGZyb20gJy4vdXNlci1jb3N0LWNlbnRlci5yZWR1Y2VyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZHVjZXJzKCk6IEFjdGlvblJlZHVjZXJNYXA8VXNlclN0YXRlLCBhbnk+IHtcbiAgcmV0dXJuIHtcbiAgICBhZGRyZXNzZXM6IGxvYWRlclJlZHVjZXI8QWRkcmVzc1tdLCBhbnk+KFxuICAgICAgVVNFUl9BRERSRVNTRVMsXG4gICAgICBmcm9tQWRkcmVzc2VzUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBiaWxsaW5nQ291bnRyaWVzOiBmcm9tQmlsbGluZ0NvdW50cmllc1JlZHVjZXIucmVkdWNlcixcbiAgICBjb25zZW50czogbG9hZGVyUmVkdWNlcjxDb25zZW50VGVtcGxhdGVbXSwgYW55PihcbiAgICAgIFVTRVJfQ09OU0VOVFMsXG4gICAgICBmcm9tVXNlckNvbnNlbnRzUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBwYXltZW50czogbG9hZGVyUmVkdWNlcjxQYXltZW50RGV0YWlsc1tdLCBhbnk+KFxuICAgICAgVVNFUl9QQVlNRU5UX01FVEhPRFMsXG4gICAgICBmcm9tUGF5bWVudFJlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgY291bnRyaWVzOiBmcm9tRGVsaXZlcnlDb3VudHJpZXMucmVkdWNlcixcbiAgICByZWdpb25zOiBsb2FkZXJSZWR1Y2VyPFJlZ2lvbnNTdGF0ZSwgYW55PihcbiAgICAgIFJFR0lPTlMsXG4gICAgICBmcm9tUmVnaW9uc1JlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgY3VzdG9tZXJDb3Vwb25zOiBsb2FkZXJSZWR1Y2VyPEN1c3RvbWVyQ291cG9uU2VhcmNoUmVzdWx0LCBhbnk+KFxuICAgICAgQ1VTVE9NRVJfQ09VUE9OUyxcbiAgICAgIGZyb21DdXN0b21lckNvdXBvblJlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgbm90aWZpY2F0aW9uUHJlZmVyZW5jZXM6IGxvYWRlclJlZHVjZXI8Tm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdLCBhbnk+KFxuICAgICAgTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTLFxuICAgICAgZnJvbU5vdGlmaWNhdGlvblByZWZlcmVuY2VSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIHByb2R1Y3RJbnRlcmVzdHM6IGxvYWRlclJlZHVjZXI8UHJvZHVjdEludGVyZXN0U2VhcmNoUmVzdWx0LCBhbnk+KFxuICAgICAgUFJPRFVDVF9JTlRFUkVTVFMsXG4gICAgICBmcm9tSW50ZXJlc3RzUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBjb3N0Q2VudGVyczogbG9hZGVyUmVkdWNlcjxDb3N0Q2VudGVyW10sIGFueT4oXG4gICAgICBVU0VSX0NPU1RfQ0VOVEVSUyxcbiAgICAgIGZyb21Db3N0Q2VudGVyUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJUb2tlbjogSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxVc2VyU3RhdGU+PiA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPFVzZXJTdGF0ZT4+KCdVc2VyUmVkdWNlcnMnKTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJQcm92aWRlcjogUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IHJlZHVjZXJUb2tlbixcbiAgdXNlRmFjdG9yeTogZ2V0UmVkdWNlcnMsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJVc2VyU3RhdGUoXG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8YW55PlxuKTogQWN0aW9uUmVkdWNlcjxhbnk+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBBdXRoQWN0aW9ucy5MT0dPVVQpIHtcbiAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxhbnk+W10gPSBbY2xlYXJVc2VyU3RhdGVdO1xuIl19