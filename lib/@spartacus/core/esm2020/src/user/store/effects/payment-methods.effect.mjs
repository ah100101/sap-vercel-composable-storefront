/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserActions } from '../actions/index';
import { GlobalMessageType } from '../../../global-message/models/global-message.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/payment/user-payment.connector";
import * as i3 from "../../../global-message/facade/global-message.service";
export class UserPaymentMethodsEffects {
    constructor(actions$, userPaymentMethodConnector, globalMessageService) {
        this.actions$ = actions$;
        this.userPaymentMethodConnector = userPaymentMethodConnector;
        this.globalMessageService = globalMessageService;
        this.loadUserPaymentMethods$ = createEffect(() => this.actions$.pipe(ofType(UserActions.LOAD_USER_PAYMENT_METHODS), map((action) => action.payload), mergeMap((payload) => {
            return this.userPaymentMethodConnector.getAll(payload).pipe(map((payments) => {
                return new UserActions.LoadUserPaymentMethodsSuccess(payments);
            }), catchError((error) => of(new UserActions.LoadUserPaymentMethodsFail(normalizeHttpError(error)))));
        })));
        this.setDefaultUserPaymentMethod$ = createEffect(() => this.actions$.pipe(ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD), map((action) => action.payload), mergeMap((payload) => {
            return this.userPaymentMethodConnector
                .setDefault(payload.userId, payload.paymentMethodId)
                .pipe(switchMap((data) => [
                new UserActions.SetDefaultUserPaymentMethodSuccess(data),
                new UserActions.LoadUserPaymentMethods(payload.userId),
            ]), catchError((error) => of(new UserActions.SetDefaultUserPaymentMethodFail(normalizeHttpError(error)))));
        })));
        this.deleteUserPaymentMethod$ = createEffect(() => this.actions$.pipe(ofType(UserActions.DELETE_USER_PAYMENT_METHOD), map((action) => action.payload), mergeMap((payload) => {
            return this.userPaymentMethodConnector
                .delete(payload.userId, payload.paymentMethodId)
                .pipe(switchMap((data) => {
                this.globalMessageService.add({ key: 'paymentCard.deletePaymentSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
                return [
                    new UserActions.DeleteUserPaymentMethodSuccess(data),
                    new UserActions.LoadUserPaymentMethods(payload.userId),
                ];
            }), catchError((error) => of(new UserActions.DeleteUserPaymentMethodFail(normalizeHttpError(error)))));
        })));
    }
}
UserPaymentMethodsEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: UserPaymentMethodsEffects, deps: [{ token: i1.Actions }, { token: i2.UserPaymentConnector }, { token: i3.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
UserPaymentMethodsEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: UserPaymentMethodsEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: UserPaymentMethodsEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserPaymentConnector }, { type: i3.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,