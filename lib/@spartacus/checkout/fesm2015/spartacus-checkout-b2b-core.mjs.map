{"version":3,"file":"spartacus-checkout-b2b-core.mjs","sources":["../../../feature-libs/checkout/b2b/core/connectors/checkout-cost-center/checkout-cost-center.adapter.ts","../../../feature-libs/checkout/b2b/core/connectors/checkout-cost-center/checkout-cost-center.connector.ts","../../../feature-libs/checkout/b2b/core/connectors/checkout-payment-type/checkout-payment-type.adapter.ts","../../../feature-libs/checkout/b2b/core/connectors/checkout-payment-type/checkout-payment-type.connector.ts","../../../feature-libs/checkout/b2b/core/facade/checkout-cost-center.service.ts","../../../feature-libs/checkout/b2b/core/facade/checkout-payment-type.service.ts","../../../feature-libs/checkout/b2b/core/facade/facade-providers.ts","../../../feature-libs/checkout/b2b/core/http-interceptors/bad-request/bad-cost-center-request.model.ts","../../../feature-libs/checkout/b2b/core/http-interceptors/bad-request/bad-cost-center-request.handler.ts","../../../feature-libs/checkout/b2b/core/checkout-b2b-core.module.ts","../../../feature-libs/checkout/b2b/core/connectors/checkout-cost-center/index.ts","../../../feature-libs/checkout/b2b/core/connectors/checkout-payment-type/converters.ts","../../../feature-libs/checkout/b2b/core/connectors/checkout-payment-type/index.ts","../../../feature-libs/checkout/b2b/core/connectors/index.ts","../../../feature-libs/checkout/b2b/core/facade/index.ts","../../../feature-libs/checkout/b2b/core/public_api.ts","../../../feature-libs/checkout/b2b/core/spartacus-checkout-b2b-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Cart } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CheckoutCostCenterAdapter {\n  /**\n   * Abstract method used to set cost center to cart\n   *\n   * @param userId: user id\n   * @param cartId: cart id\n   * @param costCenterId: cost center id\n   */\n  abstract setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Cart } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CheckoutCostCenterAdapter } from './checkout-cost-center.adapter';\n\n@Injectable()\nexport class CheckoutCostCenterConnector {\n  constructor(protected adapter: CheckoutCostCenterAdapter) {}\n\n  setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart> {\n    return this.adapter.setCostCenter(userId, cartId, costCenterId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PaymentType } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CheckoutPaymentTypeAdapter {\n  /**\n   * Abstract method used to get available payment types\n   */\n  abstract getPaymentTypes(): Observable<PaymentType[]>;\n\n  /**\n   * Abstract method used to set payment type to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param typeCode\n   * @param purchaseOrderNumber: purchase order number\n   */\n  abstract setPaymentType(\n    userId: string,\n    cartId: string,\n    typeCode: string,\n    purchaseOrderNumber?: string\n  ): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { PaymentType } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CheckoutPaymentTypeAdapter } from './checkout-payment-type.adapter';\n\n@Injectable()\nexport class CheckoutPaymentTypeConnector {\n  constructor(protected adapter: CheckoutPaymentTypeAdapter) {}\n\n  getPaymentTypes(): Observable<PaymentType[]> {\n    return this.adapter.getPaymentTypes();\n  }\n\n  setPaymentType(\n    userId: string,\n    cartId: string,\n    typeCode: string,\n    purchaseOrderNumber?: string\n  ): Observable<unknown> {\n    return this.adapter.setPaymentType(\n      userId,\n      cartId,\n      typeCode,\n      purchaseOrderNumber\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade, Cart } from '@spartacus/cart/base/root';\nimport {\n  CheckoutCostCenterFacade,\n  CheckoutCostCenterSetEvent,\n} from '@spartacus/checkout/b2b/root';\nimport { CheckoutQueryFacade } from '@spartacus/checkout/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  CostCenter,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  QueryState,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutCostCenterConnector } from '../connectors/checkout-cost-center/checkout-cost-center.connector';\n\n@Injectable()\nexport class CheckoutCostCenterService implements CheckoutCostCenterFacade {\n  protected setCostCenterCommand: Command<string, Cart> =\n    this.commandService.create<string, Cart>(\n      (payload) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutCostCenterConnector\n              .setCostCenter(userId, cartId, payload)\n              .pipe(\n                tap(() =>\n                  this.eventService.dispatch(\n                    {\n                      cartId,\n                      userId,\n                      code: payload,\n                    },\n                    CheckoutCostCenterSetEvent\n                  )\n                )\n              )\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected commandService: CommandService,\n    protected checkoutCostCenterConnector: CheckoutCostCenterConnector,\n    protected checkoutQueryFacade: CheckoutQueryFacade,\n    protected eventService: EventService\n  ) {}\n\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  getCostCenterState(): Observable<QueryState<CostCenter | undefined>> {\n    return this.checkoutQueryFacade.getCheckoutDetailsState().pipe(\n      map((state) => ({\n        ...state,\n        data: state.data?.costCenter,\n      }))\n    );\n  }\n\n  setCostCenter(costCenterId: string): Observable<Cart> {\n    return this.setCostCenterCommand.execute(costCenterId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade, PaymentType } from '@spartacus/cart/base/root';\nimport {\n  B2BPaymentTypeEnum,\n  CheckoutPaymentTypeFacade,\n  CheckoutPaymentTypeSetEvent,\n  CheckoutPaymentTypesQueryReloadEvent,\n  CheckoutPaymentTypesQueryResetEvent,\n} from '@spartacus/checkout/b2b/root';\nimport { CheckoutQueryFacade } from '@spartacus/checkout/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  Query,\n  QueryNotifier,\n  QueryService,\n  QueryState,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutPaymentTypeConnector } from '../connectors/checkout-payment-type/checkout-payment-type.connector';\n\n@Injectable()\nexport class CheckoutPaymentTypeService implements CheckoutPaymentTypeFacade {\n  protected getCheckoutPaymentTypesQueryReloadEvents(): QueryNotifier[] {\n    return [CheckoutPaymentTypesQueryReloadEvent];\n  }\n  protected getCheckoutPaymentTypesQueryResetEvents(): QueryNotifier[] {\n    return [CheckoutPaymentTypesQueryResetEvent];\n  }\n\n  protected paymentTypesQuery: Query<PaymentType[]> = this.queryService.create(\n    () => this.paymentTypeConnector.getPaymentTypes(),\n    {\n      reloadOn: this.getCheckoutPaymentTypesQueryReloadEvents(),\n      resetOn: this.getCheckoutPaymentTypesQueryResetEvents(),\n    }\n  );\n\n  protected setPaymentTypeCommand: Command<\n    { paymentTypeCode: string; purchaseOrderNumber?: string },\n    unknown\n  > = this.commandService.create<{\n    paymentTypeCode: string;\n    purchaseOrderNumber?: string;\n  }>(\n    ({ paymentTypeCode, purchaseOrderNumber }) =>\n      this.checkoutPreconditions().pipe(\n        switchMap(([userId, cartId]) =>\n          this.paymentTypeConnector\n            .setPaymentType(\n              userId,\n              cartId,\n              paymentTypeCode,\n              purchaseOrderNumber\n            )\n            .pipe(\n              tap(() =>\n                this.eventService.dispatch(\n                  {\n                    userId,\n                    cartId,\n                    paymentTypeCode,\n                    purchaseOrderNumber,\n                  },\n                  CheckoutPaymentTypeSetEvent\n                )\n              )\n            )\n        )\n      ),\n    {\n      strategy: CommandStrategy.CancelPrevious,\n    }\n  );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected queryService: QueryService,\n    protected commandService: CommandService,\n    protected paymentTypeConnector: CheckoutPaymentTypeConnector,\n    protected eventService: EventService,\n    protected checkoutQueryFacade: CheckoutQueryFacade\n  ) {}\n\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  getPaymentTypesState(): Observable<QueryState<PaymentType[] | undefined>> {\n    return this.paymentTypesQuery.getState();\n  }\n\n  getPaymentTypes(): Observable<PaymentType[]> {\n    return this.getPaymentTypesState().pipe(map((state) => state.data ?? []));\n  }\n\n  setPaymentType(\n    paymentTypeCode: B2BPaymentTypeEnum,\n    purchaseOrderNumber?: string\n  ): Observable<unknown> {\n    return this.setPaymentTypeCommand.execute({\n      paymentTypeCode,\n      purchaseOrderNumber,\n    });\n  }\n\n  getSelectedPaymentTypeState(): Observable<\n    QueryState<PaymentType | undefined>\n  > {\n    return this.checkoutQueryFacade\n      .getCheckoutDetailsState()\n      .pipe(map((state) => ({ ...state, data: state.data?.paymentType })));\n  }\n\n  isAccountPayment(): Observable<boolean> {\n    return this.getSelectedPaymentTypeState().pipe(\n      filter((state) => !state.loading),\n      map((state) => state.data?.code === B2BPaymentTypeEnum.ACCOUNT_PAYMENT)\n    );\n  }\n\n  getPurchaseOrderNumberState(): Observable<QueryState<string | undefined>> {\n    return this.checkoutQueryFacade\n      .getCheckoutDetailsState()\n      .pipe(\n        map((state) => ({ ...state, data: state.data?.purchaseOrderNumber }))\n      );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport {\n  CheckoutCostCenterFacade,\n  CheckoutPaymentTypeFacade,\n} from '@spartacus/checkout/b2b/root';\nimport { CheckoutCostCenterService } from './checkout-cost-center.service';\nimport { CheckoutPaymentTypeService } from './checkout-payment-type.service';\n\nexport const facadeProviders: Provider[] = [\n  CheckoutCostCenterService,\n  {\n    provide: CheckoutCostCenterFacade,\n    useExisting: CheckoutCostCenterService,\n  },\n  CheckoutPaymentTypeService,\n  {\n    provide: CheckoutPaymentTypeFacade,\n    useExisting: CheckoutPaymentTypeService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport enum ResponseError {\n  NO_LONGER_VALID = 'JaloObjectNoLongerValidError',\n  INVALID_ENTITY = 'EntityValidationError',\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport {\n  ErrorModel,\n  GlobalMessageType,\n  GlobalMessageService,\n  HttpErrorHandler,\n  HttpResponseStatus,\n  Priority,\n} from '@spartacus/core';\nimport { ResponseError } from './bad-cost-center-request.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadCostCenterRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  getPriority(): Priority {\n    return Priority.NORMAL;\n  }\n\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return (\n      super.hasMatch(errorResponse) &&\n      this.getErrors(errorResponse).some(this.isEntityValidationError) &&\n      this.isCostCenterRequest(errorResponse)\n    );\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (this.getErrors(response).some((e) => this.isEntityValidationError(e))) {\n      this.globalMessageService.add(\n        { key: 'checkoutB2B.invalidCostCenter' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error: any) => error.type !== ResponseError.NO_LONGER_VALID\n    );\n  }\n\n  protected isCostCenterRequest(errorResponse: HttpErrorResponse): boolean {\n    if (errorResponse?.url) {\n      const url = new URL(errorResponse.url);\n      return (\n        url.pathname.endsWith('costcenter') &&\n        new URLSearchParams(url.search).has('costCenterId')\n      );\n    }\n\n    return false;\n  }\n\n  protected isEntityValidationError(error: ErrorModel): boolean {\n    return error.type === ResponseError.INVALID_ENTITY;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { HttpErrorHandler } from '@spartacus/core';\nimport { CheckoutCostCenterConnector } from './connectors/checkout-cost-center/checkout-cost-center.connector';\nimport { CheckoutPaymentTypeConnector } from './connectors/checkout-payment-type/checkout-payment-type.connector';\nimport { facadeProviders } from './facade/facade-providers';\nimport { BadCostCenterRequestHandler } from './http-interceptors/bad-request/bad-cost-center-request.handler';\n\n@NgModule({\n  providers: [\n    ...facadeProviders,\n    CheckoutCostCenterConnector,\n    CheckoutPaymentTypeConnector,\n    {\n      provide: HttpErrorHandler,\n      useExisting: BadCostCenterRequestHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CheckoutB2BCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-cost-center.connector';\nexport * from './checkout-cost-center.adapter';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { PaymentType } from '@spartacus/cart/base/root';\nimport { Converter } from '@spartacus/core';\n\nexport const CHECKOUT_PAYMENT_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentType>\n>('CheckoutPaymentTypeNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-payment-type.adapter';\nexport * from './checkout-payment-type.connector';\nexport * from './converters';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-cost-center/index';\nexport * from './checkout-payment-type/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-cost-center.service';\nexport * from './checkout-payment-type.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-b2b-core.module';\nexport * from './connectors/index';\nexport * from './facade/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.CheckoutCostCenterAdapter","i1.CheckoutPaymentTypeAdapter","i3.CheckoutCostCenterConnector","i3.CheckoutPaymentTypeConnector","i1"],"mappings":"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"}