{"version":3,"file":"spartacus-checkout-base-root.mjs","sources":["../../../feature-libs/checkout/base/root/config/checkout-config.ts","../../../feature-libs/checkout/base/root/config/default-checkout-config.ts","../../../feature-libs/checkout/base/root/config/default-checkout-routing-config.ts","../../../feature-libs/checkout/base/root/events/checkout.events.ts","../../../feature-libs/checkout/base/root/events/checkout-query-event.listener.ts","../../../feature-libs/checkout/base/root/feature-name.ts","../../../feature-libs/checkout/base/root/facade/checkout-delivery-address.facade.ts","../../../feature-libs/checkout/base/root/events/checkout-delivery-address-event.listener.ts","../../../feature-libs/checkout/base/root/events/checkout-delivery-mode-event.listener.ts","../../../feature-libs/checkout/base/root/events/checkout-payment-event.listener.ts","../../../feature-libs/checkout/base/root/events/checkout-place-order-event.listener.ts","../../../feature-libs/checkout/base/root/events/checkout-legacy-store-event.listener.ts","../../../feature-libs/checkout/base/root/events/checkout-event.module.ts","../../../feature-libs/checkout/base/root/http-interceptors/checkout-cart.interceptor.ts","../../../feature-libs/checkout/base/root/http-interceptors/index.ts","../../../feature-libs/checkout/base/root/checkout-root.module.ts","../../../feature-libs/checkout/base/root/config/index.ts","../../../feature-libs/checkout/base/root/events/index.ts","../../../feature-libs/checkout/base/root/facade/checkout-delivery-modes.facade.ts","../../../feature-libs/checkout/base/root/facade/checkout-payment.facade.ts","../../../feature-libs/checkout/base/root/facade/checkout-query.facade.ts","../../../feature-libs/checkout/base/root/facade/index.ts","../../../feature-libs/checkout/base/root/model/index.ts","../../../feature-libs/checkout/base/root/public_api.ts","../../../feature-libs/checkout/base/root/spartacus-checkout-base-root.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends CheckoutConfig {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'deliveryAddress',\n        name: 'checkoutProgress.deliveryAddress',\n        routeName: 'checkoutDeliveryAddress',\n        type: [CheckoutStepType.DELIVERY_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { RoutingConfig } from '@spartacus/core';\n\nexport const defaultCheckoutRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: {\n      checkoutLogin: { paths: ['checkout-login'], authFlow: true },\n      checkout: { paths: ['checkout'] },\n      checkoutDeliveryAddress: { paths: ['checkout/delivery-address'] },\n      checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n      checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n      checkoutReviewOrder: { paths: ['checkout/review-order'] },\n    },\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PaymentDetails } from '@spartacus/cart/base/root';\nimport { Address, CxEvent } from '@spartacus/core';\n\n/**\n * Emit this event to force checkout details reload\n */\nexport class CheckoutQueryReloadEvent extends CxEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutQueryReloadEvent';\n}\n\n/**\n * Emit this event to force checkout details reset\n */\nexport class CheckoutQueryResetEvent extends CxEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutQueryResetEvent';\n}\n\n/**\n * An abstract event for all the checkout events.\n */\nexport abstract class CheckoutEvent extends CxEvent {\n  userId?: string;\n  /**\n   * Usually set via `getCartIdByUserId()` util method,\n   * It is an abstraction over the different properties\n   * used for anonymous and logged-in users' carts:\n   * - `code` for logged-in users\n   * - `guid` for anonymous users\n   */\n  cartId?: string;\n  /**\n   * All carts have the `code` property assigned to them,\n   * regardless of whether they are anonymous or logged-in.\n   * In case of logged-in users, the `cartCode` and `cartId` are the same.\n   */\n  cartCode?: string;\n}\n\n/**\n * An abstract event for all the delivery address related events.\n */\nexport abstract class CheckoutDeliveryAddressEvent extends CheckoutEvent {}\n\n/**\n * Fired when the delivery address is create cleared.\n */\nexport class CheckoutDeliveryAddressCreatedEvent extends CheckoutDeliveryAddressEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutDeliveryAddressCreatedEvent';\n  /**\n   * The address.\n   */\n  address: Address;\n}\n\n/**\n * Fired when the user sets a delivery address during checkout.\n */\nexport class CheckoutDeliveryAddressSetEvent extends CheckoutDeliveryAddressEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutDeliveryAddressSetEvent';\n  /**\n   * The address.\n   */\n  address: Address;\n}\n\n/**\n * Fired when the delivery address has to be cleared.\n */\nexport class CheckoutDeliveryAddressClearedEvent extends CheckoutDeliveryAddressEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutDeliveryAddressClearedEvent';\n}\n\n/**\n * An abstract event for all the delivery mode related events.\n */\nexport abstract class CheckoutDeliveryModeEvent extends CheckoutEvent {}\n\n/**\n * Fired when the delivery mode was set.\n */\nexport class CheckoutDeliveryModeSetEvent extends CheckoutDeliveryModeEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutDeliveryModeSetEvent';\n  /**\n   * Delivery mode code.\n   */\n  deliveryModeCode: string;\n}\n\n/**\n * Fired when the delivery mode has been cleared.\n */\nexport class CheckoutDeliveryModeClearedEvent extends CheckoutDeliveryModeEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutDeliveryModeClearedEvent';\n}\n\n/**\n * Fired when the delivery mode has an error when trying to be cleared.\n */\nexport class CheckoutDeliveryModeClearedErrorEvent extends CheckoutDeliveryModeEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutDeliveryModeClearedErrorEvent';\n}\n\n/**\n * Emit this event to force delivery modes reload\n */\nexport class CheckoutSupportedDeliveryModesQueryReloadEvent extends CheckoutDeliveryModeEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutSupportedDeliveryModesQueryReloadEvent';\n}\n\n/**\n * Emit this event to force delivery modes reset\n */\nexport class CheckoutSupportedDeliveryModesQueryResetEvent extends CheckoutDeliveryModeEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutSupportedDeliveryModesQueryResetEvent';\n}\n\n/**\n * An abstract event for all the payment details related events.\n */\nexport abstract class CheckoutPaymentDetailsEvent extends CheckoutEvent {}\n\n/**\n * Fired when the payment details have been created.\n */\nexport class CheckoutPaymentDetailsCreatedEvent extends CheckoutPaymentDetailsEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutPaymentDetailsCreatedEvent';\n  /**\n   * Payment details\n   */\n  paymentDetails: PaymentDetails;\n}\n\n/**\n * Fired when the payment details have been set.\n */\nexport class CheckoutPaymentDetailsSetEvent extends CheckoutPaymentDetailsEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutPaymentDetailsSetEvent';\n  /**\n   * Payment details id\n   */\n  paymentDetailsId: string;\n}\n\n/**\n * Emit this event to force payment card types reload\n */\nexport class CheckoutPaymentCardTypesQueryReloadEvent extends CheckoutPaymentDetailsEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutPaymentCardTypesQueryReloadEvent';\n}\n\n/**\n * Emit this event to force payment card types reset\n */\nexport class CheckoutPaymentCardTypesQueryResetEvent extends CheckoutPaymentDetailsEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CheckoutPaymentCardTypesQueryResetEvent';\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { MergeCartSuccessEvent } from '@spartacus/cart/base/root';\nimport {\n  RestoreSavedCartSuccessEvent,\n  SaveCartSuccessEvent,\n} from '@spartacus/cart/saved-cart/root';\nimport {\n  CurrencySetEvent,\n  EventService,\n  LanguageSetEvent,\n  LoginEvent,\n  LogoutEvent,\n} from '@spartacus/core';\nimport { OrderPlacedEvent } from '@spartacus/order/root';\nimport { merge, Subscription } from 'rxjs';\nimport {\n  CheckoutQueryReloadEvent,\n  CheckoutQueryResetEvent,\n} from './checkout.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutQueryEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(protected eventService: EventService) {\n    this.onCheckoutQueryReload();\n    this.onCheckoutQueryReset();\n  }\n\n  protected onCheckoutQueryReload(): void {\n    this.subscriptions.add(\n      merge(\n        this.eventService.get(LanguageSetEvent),\n        this.eventService.get(CurrencySetEvent)\n      ).subscribe(() => {\n        this.eventService.dispatch({}, CheckoutQueryReloadEvent);\n      })\n    );\n  }\n\n  protected onCheckoutQueryReset(): void {\n    this.subscriptions.add(\n      merge(\n        this.eventService.get(LogoutEvent),\n        this.eventService.get(LoginEvent),\n        this.eventService.get(SaveCartSuccessEvent),\n        this.eventService.get(RestoreSavedCartSuccessEvent),\n        this.eventService.get(MergeCartSuccessEvent),\n        this.eventService.get(OrderPlacedEvent)\n      ).subscribe(() => {\n        this.eventService.dispatch({}, CheckoutQueryResetEvent);\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_CORE_FEATURE = 'checkoutCore';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Address, facadeFactory, QueryState } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CHECKOUT_CORE_FEATURE } from '../feature-name';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CheckoutDeliveryAddressFacade,\n      feature: CHECKOUT_CORE_FEATURE,\n      methods: [\n        'getDeliveryAddressState',\n        'createAndSetAddress',\n        'setDeliveryAddress',\n        'clearCheckoutDeliveryAddress',\n      ],\n      // TODO:#deprecation-checkout - remove once we remove ngrx\n      async: true,\n    }),\n})\nexport abstract class CheckoutDeliveryAddressFacade {\n  /**\n   * Returns the delivery address state\n   */\n  abstract getDeliveryAddressState(): Observable<\n    QueryState<Address | undefined>\n  >;\n  /**\n   * Creates and sets the delivery address using the provided address\n   */\n  abstract createAndSetAddress(address: Address): Observable<unknown>;\n  /**\n   * Sets the delivery address to the cart\n   */\n  abstract setDeliveryAddress(address: Address): Observable<unknown>;\n  /**\n   * Clears the delivery address set in the cart\n   */\n  abstract clearCheckoutDeliveryAddress(): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport {\n  DeleteUserAddressEvent,\n  EventService,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoadUserAddressesEvent,\n  OCC_USER_ID_ANONYMOUS,\n  UpdateUserAddressEvent,\n  UserAddressEvent,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CheckoutDeliveryAddressFacade } from '../facade/checkout-delivery-address.facade';\nimport {\n  CheckoutDeliveryAddressClearedEvent,\n  CheckoutDeliveryAddressCreatedEvent,\n  CheckoutDeliveryAddressSetEvent,\n  CheckoutQueryResetEvent,\n  CheckoutSupportedDeliveryModesQueryResetEvent,\n} from './checkout.events';\n\n/**\n * Checkout delivery address event listener.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryAddressEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(\n    protected checkoutDeliveryAddressFacade: CheckoutDeliveryAddressFacade,\n    protected eventService: EventService,\n    protected globalMessageService: GlobalMessageService,\n    protected activeCartFacade: ActiveCartFacade\n  ) {\n    this.onDeliveryAddressCreated();\n    this.onDeliveryAddressSet();\n    this.onDeliveryAddressCleared();\n\n    this.onUserAddressChange();\n  }\n\n  /**\n   * Registers listeners for the User address events.\n   */\n  protected onUserAddressChange(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(UserAddressEvent)\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof UpdateUserAddressEvent ||\n              event instanceof DeleteUserAddressEvent\n          ),\n          switchMap(({ userId }) =>\n            this.activeCartFacade\n              .takeActiveCartId()\n              .pipe(map((cartId) => ({ cartId, userId })))\n          )\n        )\n        .subscribe(({ cartId, userId }) => {\n          // we want to LL the checkout (if not already loaded), in order to clear the checkout data that's potentially set on the back-end\n          this.checkoutDeliveryAddressFacade.clearCheckoutDeliveryAddress();\n\n          this.eventService.dispatch(\n            { cartId, userId },\n            CheckoutSupportedDeliveryModesQueryResetEvent\n          );\n        })\n    );\n  }\n\n  protected onDeliveryAddressCreated(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutDeliveryAddressCreatedEvent)\n        .subscribe(({ cartId, userId }) => {\n          if (userId !== OCC_USER_ID_ANONYMOUS) {\n            this.eventService.dispatch({ userId }, LoadUserAddressesEvent);\n          }\n\n          this.globalMessageService.add(\n            { key: 'addressForm.userAddressAddSuccess' },\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n\n          this.eventService.dispatch(\n            { userId, cartId },\n            CheckoutSupportedDeliveryModesQueryResetEvent\n          );\n\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n        })\n    );\n  }\n\n  protected onDeliveryAddressSet(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutDeliveryAddressSetEvent)\n        .subscribe(({ userId, cartId }) => {\n          this.eventService.dispatch(\n            { userId, cartId },\n            CheckoutSupportedDeliveryModesQueryResetEvent\n          );\n\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n        })\n    );\n  }\n\n  protected onDeliveryAddressCleared(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutDeliveryAddressClearedEvent)\n        .subscribe(() =>\n          this.eventService.dispatch({}, CheckoutQueryResetEvent)\n        )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { LoadCartEvent } from '@spartacus/cart/base/root';\nimport {\n  CurrencySetEvent,\n  EventService,\n  LanguageSetEvent,\n  LoginEvent,\n  LogoutEvent,\n} from '@spartacus/core';\nimport { merge, Subscription } from 'rxjs';\nimport {\n  CheckoutDeliveryModeClearedErrorEvent,\n  CheckoutDeliveryModeClearedEvent,\n  CheckoutDeliveryModeSetEvent,\n  CheckoutQueryResetEvent,\n  CheckoutSupportedDeliveryModesQueryReloadEvent,\n  CheckoutSupportedDeliveryModesQueryResetEvent,\n} from './checkout.events';\n\n/**\n * Checkout delivery mode event listener.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryModeEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(protected eventService: EventService) {\n    this.onDeliveryModeSet();\n    this.onDeliveryModeCleared();\n    this.onDeliveryModeClearedError();\n    this.onDeliveryModeReset();\n\n    this.onGetSupportedDeliveryModesQueryReload();\n    this.onGetSupportedDeliveryModesQueryReset();\n  }\n\n  protected onDeliveryModeSet() {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutDeliveryModeSetEvent)\n        .subscribe(({ userId, cartId, cartCode }) => {\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n\n          this.eventService.dispatch(\n            {\n              userId,\n              cartId,\n              cartCode,\n            },\n            LoadCartEvent\n          );\n        })\n    );\n  }\n\n  protected onDeliveryModeCleared(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutDeliveryModeClearedEvent)\n        .subscribe(({ userId, cartId, cartCode }) => {\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n\n          this.eventService.dispatch(\n            {\n              userId,\n              cartId,\n              cartCode,\n            },\n            LoadCartEvent\n          );\n        })\n    );\n  }\n\n  protected onDeliveryModeClearedError(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutDeliveryModeClearedErrorEvent)\n        .subscribe(({ userId, cartId, cartCode }) => {\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n\n          this.eventService.dispatch(\n            {\n              userId,\n              cartId,\n              cartCode,\n            },\n            LoadCartEvent\n          );\n        })\n    );\n  }\n\n  /**\n   * Registers listeners for the delivery mode clear event.\n   * This is needed for when `CheckoutSupportedDeliveryModesQueryResetEvent` is dispatched\n   * as we need to update the user's cart when the delivery mode is cleared from the backend checkout details.\n   */\n  protected onDeliveryModeReset(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutSupportedDeliveryModesQueryResetEvent)\n        .subscribe(({ userId, cartId }) =>\n          this.eventService.dispatch(\n            {\n              userId,\n              cartId,\n              /**\n               * As we know the cart is not anonymous (precondition checked),\n               * we can safely use the cartId, which is actually the cart.code.\n               */\n              cartCode: cartId,\n            },\n            LoadCartEvent\n          )\n        )\n    );\n  }\n\n  protected onGetSupportedDeliveryModesQueryReload(): void {\n    this.subscriptions.add(\n      merge(\n        this.eventService.get(LanguageSetEvent),\n        this.eventService.get(CurrencySetEvent)\n      ).subscribe(() => {\n        this.eventService.dispatch(\n          {},\n          CheckoutSupportedDeliveryModesQueryReloadEvent\n        );\n      })\n    );\n  }\n\n  protected onGetSupportedDeliveryModesQueryReset(): void {\n    this.subscriptions.add(\n      merge(\n        this.eventService.get(LogoutEvent),\n        this.eventService.get(LoginEvent)\n      ).subscribe(() => {\n        this.eventService.dispatch(\n          {},\n          CheckoutSupportedDeliveryModesQueryResetEvent\n        );\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport {\n  CurrencySetEvent,\n  EventService,\n  GlobalMessageService,\n  GlobalMessageType,\n  LanguageSetEvent,\n  LoadUserPaymentMethodsEvent,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { merge, Subscription } from 'rxjs';\nimport {\n  CheckoutPaymentCardTypesQueryReloadEvent,\n  CheckoutPaymentDetailsCreatedEvent,\n  CheckoutPaymentDetailsSetEvent,\n  CheckoutQueryResetEvent,\n} from './checkout.events';\n\n/**\n * Checkout payment event listener.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(\n    protected eventService: EventService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    this.onPaymentCreated();\n    this.onPaymentSet();\n\n    this.onGetCardTypesQueryReload();\n  }\n\n  protected onPaymentCreated(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(CheckoutPaymentDetailsCreatedEvent)\n        .subscribe(({ userId }) => {\n          if (userId !== OCC_USER_ID_ANONYMOUS) {\n            this.eventService.dispatch({ userId }, LoadUserPaymentMethodsEvent);\n          }\n\n          this.globalMessageService.add(\n            { key: 'paymentForm.paymentAddedSuccessfully' },\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n        })\n    );\n  }\n\n  protected onPaymentSet(): void {\n    this.subscriptions.add(\n      this.eventService.get(CheckoutPaymentDetailsSetEvent).subscribe(() => {\n        this.eventService.dispatch({}, CheckoutQueryResetEvent);\n      })\n    );\n  }\n\n  protected onGetCardTypesQueryReload(): void {\n    this.subscriptions.add(\n      merge(\n        this.eventService.get(LanguageSetEvent),\n        this.eventService.get(CurrencySetEvent)\n      ).subscribe(() => {\n        this.eventService.dispatch(\n          {},\n          CheckoutPaymentCardTypesQueryReloadEvent\n        );\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { RemoveCartEvent } from '@spartacus/cart/base/root';\nimport { EventService } from '@spartacus/core';\nimport { OrderPlacedEvent } from '@spartacus/order/root';\nimport { Subscription } from 'rxjs';\nimport { CheckoutQueryResetEvent } from './checkout.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPlaceOrderEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(protected eventService: EventService) {\n    this.onOrderPlaced();\n  }\n\n  protected onOrderPlaced(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(OrderPlacedEvent)\n        .subscribe(({ userId, cartId, cartCode }) => {\n          this.eventService.dispatch(\n            {\n              userId,\n              cartId,\n              cartCode,\n            },\n            RemoveCartEvent\n          );\n\n          this.eventService.dispatch({}, CheckoutQueryResetEvent);\n        })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  EventService,\n  LoadUserAddressesEvent,\n  LoadUserPaymentMethodsEvent,\n  UserActions,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n/**\n * The event listener which dispatches legacy store actions.\n * It will be removed as soon as the legacy store is removed.\n */\n// TODO:#deprecation-checkout remove once all the features using store are switched to c&q\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutLegacyStoreEventListener implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(\n    protected eventService: EventService,\n    protected store: Store<unknown>\n  ) {\n    this.onUserAddressAction();\n    this.onUserPaymentAction();\n  }\n\n  /**\n   * Registers events for the user address actions.\n   */\n  protected onUserAddressAction(): void {\n    this.subscriptions.add(\n      this.eventService.get(LoadUserAddressesEvent).subscribe(({ userId }) => {\n        /**\n         * TODO:#deprecation-checkout We have to keep this here, since the user address feature is still ngrx-based.\n         * Remove once it is switched from ngrx to c&q.\n         * We should dispatch an event, which will reload the userAddress$ query.\n         */\n        this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n      })\n    );\n  }\n\n  /**\n   * Registers events for the user payment actions.\n   */\n  protected onUserPaymentAction(): void {\n    this.subscriptions.add(\n      this.eventService\n        .get(LoadUserPaymentMethodsEvent)\n        .subscribe(({ userId }) => {\n          this.store.dispatch(\n            /**\n             * TODO:#deprecation-checkout We have to keep this here, since the user payment feature is still ngrx-based.\n             * Remove once it is switched from ngrx to c&q.\n             * We should dispatch an event, which will load the userPayment$ query.\n             */\n            new UserActions.LoadUserPaymentMethods(userId)\n          );\n        })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CheckoutDeliveryAddressEventListener } from './checkout-delivery-address-event.listener';\nimport { CheckoutDeliveryModeEventListener } from './checkout-delivery-mode-event.listener';\nimport { CheckoutLegacyStoreEventListener } from './checkout-legacy-store-event.listener';\nimport { CheckoutPaymentEventListener } from './checkout-payment-event.listener';\nimport { CheckoutPlaceOrderEventListener } from './checkout-place-order-event.listener';\nimport { CheckoutQueryEventListener } from './checkout-query-event.listener';\n\n@NgModule({})\nexport class CheckoutEventModule {\n  constructor(\n    _checkoutQueryEventListener: CheckoutQueryEventListener,\n    _checkoutDeliveryAddressEventListener: CheckoutDeliveryAddressEventListener,\n    _checkoutDeliveryModeEventListener: CheckoutDeliveryModeEventListener,\n    _checkoutPaymentEventListener: CheckoutPaymentEventListener,\n    _checkoutPlaceOrderEventListener: CheckoutPlaceOrderEventListener,\n    _checkoutLegacyStoreEventListener: CheckoutLegacyStoreEventListener\n  ) {\n    // Intentional empty constructor\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MultiCartFacade } from '@spartacus/cart/base/root';\nimport { RouterState, RoutingService } from '@spartacus/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\n/**\n * Interceptor that handles \"Cart not found\" errors while a user is in a checkout step.\n *\n * When a user doing a checkout has a \"Cart not found\" error, he is redirected to checkout and the cart is reloaded.\n * If a \"Cart not found\" error happens and the user is not on checkout, this interceptor does not perform any actions.\n */\n@Injectable({ providedIn: 'root' })\nexport class CheckoutCartInterceptor implements HttpInterceptor {\n  constructor(\n    protected routingService: RoutingService,\n    protected multiCartFacade: MultiCartFacade\n  ) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    return this.routingService.getRouterState().pipe(\n      take(1),\n      switchMap((state: RouterState) => {\n        return next.handle(request).pipe(\n          catchError((response) => {\n            if (\n              response instanceof HttpErrorResponse &&\n              this.isUserInCheckoutRoute(state.state?.semanticRoute)\n            ) {\n              if (this.isCartNotFoundError(response)) {\n                this.routingService.go({ cxRoute: 'cart' });\n\n                const cartCode = this.getCartIdFromError(response);\n                if (cartCode) {\n                  this.multiCartFacade.reloadCart(cartCode);\n                }\n              }\n            }\n            return throwError(response);\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Returns true if the parameter semantic route is part of \"checkout\"\n   * Checkout semantic routes:\n   * checkout\n   * checkoutPaymentType\n   * CheckoutDeliveryAddress\n   * checkoutDeliveryMode\n   * checkoutPaymentDetails\n   * checkoutReviewOrder\n   * checkoutLogin\n   * @param semanticRoute\n   */\n  protected isUserInCheckoutRoute(semanticRoute?: string): boolean {\n    return semanticRoute?.toLowerCase().startsWith('checkout') ?? false;\n  }\n\n  /**\n   * Checks of the error is for a cart not found, i.e. the cart doesn't exist anymore\n   *\n   * @param response\n   */\n  protected isCartNotFoundError(response: HttpErrorResponse): boolean {\n    return (\n      response.status === 400 &&\n      response.error?.errors?.[0]?.type === 'CartError' &&\n      response.error?.errors?.[0]?.reason === 'notFound'\n    );\n  }\n\n  protected getCartIdFromError(response: HttpErrorResponse): string {\n    return response.error?.errors?.[0]?.subject;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CheckoutCartInterceptor } from './checkout-cart.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CheckoutCartInterceptor,\n    multi: true,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CART_BASE_FEATURE } from '@spartacus/cart/base/root';\nimport {\n  CmsConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from './config/default-checkout-config';\nimport { defaultCheckoutRoutingConfig } from './config/default-checkout-routing-config';\nimport { CheckoutEventModule } from './events/checkout-event.module';\nimport { CHECKOUT_CORE_FEATURE, CHECKOUT_FEATURE } from './feature-name';\nimport { interceptors } from './http-interceptors/index';\n\nexport const CHECKOUT_BASE_CMS_COMPONENTS: string[] = [\n  'CheckoutOrchestrator',\n  'CheckoutOrderSummary',\n  'CheckoutProgress',\n  'CheckoutProgressMobileBottom',\n  'CheckoutProgressMobileTop',\n  'CheckoutDeliveryMode',\n  'CheckoutPaymentDetails',\n  'CheckoutPlaceOrder',\n  'CheckoutReviewOrder',\n  'CheckoutReviewPayment',\n  'CheckoutReviewShipping',\n  'CheckoutReviewOverview',\n  'CheckoutDeliveryAddress',\n  'GuestCheckoutLoginComponent',\n];\n\nexport function defaultCheckoutComponentsConfig() {\n  const config: CmsConfig = {\n    featureModules: {\n      [CHECKOUT_FEATURE]: {\n        cmsComponents: CHECKOUT_BASE_CMS_COMPONENTS,\n        dependencies: [CART_BASE_FEATURE],\n      },\n      // by default core is bundled together with components\n      [CHECKOUT_CORE_FEATURE]: CHECKOUT_FEATURE,\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [CheckoutEventModule],\n  providers: [\n    ...interceptors,\n    provideDefaultConfig(defaultCheckoutRoutingConfig),\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfigFactory(defaultCheckoutComponentsConfig),\n  ],\n})\nexport class CheckoutRootModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-config';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-delivery-address-event.listener';\nexport * from './checkout-delivery-mode-event.listener';\nexport * from './checkout-event.module';\nexport * from './checkout-payment-event.listener';\nexport * from './checkout.events';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { DeliveryMode } from '@spartacus/cart/base/root';\nimport { facadeFactory, QueryState } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CHECKOUT_CORE_FEATURE } from '../feature-name';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CheckoutDeliveryModesFacade,\n      feature: CHECKOUT_CORE_FEATURE,\n      methods: [\n        'getSupportedDeliveryModesState',\n        'getSupportedDeliveryModes',\n        'setDeliveryMode',\n        'getSelectedDeliveryModeState',\n        'clearCheckoutDeliveryMode',\n      ],\n      // TODO:#deprecation-checkout - remove once we remove ngrx\n      async: true,\n    }),\n})\nexport abstract class CheckoutDeliveryModesFacade {\n  /**\n   * Returns the supported delivery modes state.\n   */\n  abstract getSupportedDeliveryModesState(): Observable<\n    QueryState<DeliveryMode[]>\n  >;\n  /**\n   * Returns the supported delivery modes, or an empty array if the data is undefined.\n   */\n  abstract getSupportedDeliveryModes(): Observable<DeliveryMode[]>;\n  /**\n   * Returns the selected delivery mode\n   */\n  abstract getSelectedDeliveryModeState(): Observable<\n    QueryState<DeliveryMode | undefined>\n  >;\n  /**\n   * Sets the provided delivery mode to the current cart\n   */\n  abstract setDeliveryMode(mode: string): Observable<unknown>;\n  /**\n   * Clears the selected delivery mode from the current cart\n   */\n  abstract clearCheckoutDeliveryMode(): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CardType, PaymentDetails } from '@spartacus/cart/base/root';\nimport { facadeFactory, QueryState } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CHECKOUT_CORE_FEATURE } from '../feature-name';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CheckoutPaymentFacade,\n      feature: CHECKOUT_CORE_FEATURE,\n      methods: [\n        'getPaymentCardTypesState',\n        'getPaymentCardTypes',\n        'getPaymentDetailsState',\n        'createPaymentDetails',\n        'setPaymentDetails',\n      ],\n      // TODO:#deprecation-checkout - remove once we remove ngrx\n      async: true,\n    }),\n})\nexport abstract class CheckoutPaymentFacade {\n  /**\n   * Returns the card types state\n   */\n  abstract getPaymentCardTypesState(): Observable<\n    QueryState<CardType[] | undefined>\n  >;\n  /**\n   * Returns the card types, or an empty array if the data is undefined.\n   */\n  abstract getPaymentCardTypes(): Observable<CardType[]>;\n  /**\n   * Returns the payment details state\n   */\n  abstract getPaymentDetailsState(): Observable<\n    QueryState<PaymentDetails | undefined>\n  >;\n  /**\n   * Creates the payment details using the provided paymentDetails\n   */\n  abstract createPaymentDetails(\n    paymentDetails: PaymentDetails\n  ): Observable<unknown>;\n  /**\n   * Sets the payment details to the current cart\n   */\n  abstract setPaymentDetails(\n    paymentDetails: PaymentDetails\n  ): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { facadeFactory, QueryState } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CHECKOUT_CORE_FEATURE } from '../feature-name';\nimport { CheckoutState } from '../model/checkout-state.model';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CheckoutQueryFacade,\n      feature: CHECKOUT_CORE_FEATURE,\n      methods: ['getCheckoutDetailsState'],\n    }),\n})\nexport abstract class CheckoutQueryFacade {\n  /**\n   * Returns the checkout details state.\n   */\n  abstract getCheckoutDetailsState(): Observable<\n    QueryState<CheckoutState | undefined>\n  >;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-delivery-address.facade';\nexport * from './checkout-delivery-modes.facade';\nexport * from './checkout-payment.facade';\nexport * from './checkout-query.facade';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-state.model';\nexport * from './checkout-step.model';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-root.module';\nexport * from './config/index';\nexport * from './events/index';\nexport * from './facade/index';\nexport * from './feature-name';\nexport * from './model/index';\n\n/** AUGMENTABLE_TYPES_START */\nexport { CheckoutStepType } from './model/checkout-step.model';\nexport { CheckoutState } from './model/checkout-state.model';\n/** AUGMENTABLE_TYPES_END */\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.CheckoutDeliveryAddressFacade","i2","i1.CheckoutQueryEventListener","i2.CheckoutDeliveryAddressEventListener","i3.CheckoutDeliveryModeEventListener","i4.CheckoutPaymentEventListener","i5.CheckoutPlaceOrderEventListener","i6.CheckoutLegacyStoreEventListener"],"mappings":"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"}