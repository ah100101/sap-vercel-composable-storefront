{"version":3,"file":"spartacus-checkout-base-core.mjs","sources":["../../../feature-libs/checkout/base/core/connectors/checkout-delivery-address/checkout-delivery-address.adapter.ts","../../../feature-libs/checkout/base/core/connectors/checkout-delivery-address/checkout-delivery-address.connector.ts","../../../feature-libs/checkout/base/core/connectors/checkout-delivery-modes/checkout-delivery-modes.adapter.ts","../../../feature-libs/checkout/base/core/connectors/checkout-delivery-modes/checkout-delivery-modes.connector.ts","../../../feature-libs/checkout/base/core/connectors/checkout-payment/checkout-payment.adapter.ts","../../../feature-libs/checkout/base/core/connectors/checkout-payment/checkout-payment.connector.ts","../../../feature-libs/checkout/base/core/connectors/checkout/checkout.adapter.ts","../../../feature-libs/checkout/base/core/connectors/checkout/checkout.connector.ts","../../../feature-libs/checkout/base/core/facade/checkout-delivery-address.service.ts","../../../feature-libs/checkout/base/core/facade/checkout-delivery-modes.service.ts","../../../feature-libs/checkout/base/core/facade/checkout-payment.service.ts","../../../feature-libs/checkout/base/core/facade/checkout-query.service.ts","../../../feature-libs/checkout/base/core/facade/facade-providers.ts","../../../feature-libs/checkout/base/core/services/checkout-page-meta.resolver.ts","../../../feature-libs/checkout/base/core/checkout-core.module.ts","../../../feature-libs/checkout/base/core/connectors/checkout-delivery-address/index.ts","../../../feature-libs/checkout/base/core/connectors/checkout-delivery-modes/converters.ts","../../../feature-libs/checkout/base/core/connectors/checkout-delivery-modes/index.ts","../../../feature-libs/checkout/base/core/connectors/checkout-payment/converters.ts","../../../feature-libs/checkout/base/core/connectors/checkout-payment/index.ts","../../../feature-libs/checkout/base/core/connectors/checkout/converters.ts","../../../feature-libs/checkout/base/core/connectors/checkout/index.ts","../../../feature-libs/checkout/base/core/connectors/index.ts","../../../feature-libs/checkout/base/core/facade/index.ts","../../../feature-libs/checkout/base/core/services/index.ts","../../../feature-libs/checkout/base/core/public_api.ts","../../../feature-libs/checkout/base/core/spartacus-checkout-base-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\nexport abstract class CheckoutDeliveryAddressAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set address for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<unknown>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutDeliveryAddressAdapter } from './checkout-delivery-address.adapter';\n\n@Injectable()\nexport class CheckoutDeliveryAddressConnector {\n  constructor(protected adapter: CheckoutDeliveryAddressAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<unknown> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<unknown> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DeliveryMode } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CheckoutDeliveryModesAdapter {\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<unknown>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { DeliveryMode } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CheckoutDeliveryModesAdapter } from './checkout-delivery-modes.adapter';\n\n@Injectable()\nexport class CheckoutDeliveryModesConnector {\n  constructor(protected adapter: CheckoutDeliveryModesAdapter) {}\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<unknown> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<unknown> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CardType, PaymentDetails } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract createPaymentDetails(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract setPaymentDetails(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<unknown>;\n\n  /**\n   * Abstract method used to get available card types\n   */\n  abstract getPaymentCardTypes(): Observable<CardType[]>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CardType, PaymentDetails } from '@spartacus/cart/base/root';\nimport { Observable } from 'rxjs';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\n\n@Injectable()\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public createPaymentDetails(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.createPaymentDetails(userId, cartId, paymentDetails);\n  }\n\n  public setPaymentDetails(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<unknown> {\n    return this.adapter.setPaymentDetails(userId, cartId, paymentDetailsId);\n  }\n\n  getPaymentCardTypes(): Observable<CardType[]> {\n    return this.adapter.getPaymentCardTypes();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CheckoutState } from '@spartacus/checkout/base/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to get checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutState>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CheckoutState } from '@spartacus/checkout/base/root';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\n\n@Injectable()\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public getCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutState> {\n    return this.adapter.getCheckoutDetails(userId, cartId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport {\n  CheckoutDeliveryAddressClearedEvent,\n  CheckoutDeliveryAddressCreatedEvent,\n  CheckoutDeliveryAddressFacade,\n  CheckoutDeliveryAddressSetEvent,\n  CheckoutQueryFacade,\n} from '@spartacus/checkout/base/root';\nimport {\n  Address,\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  QueryState,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutDeliveryAddressConnector } from '../connectors/checkout-delivery-address/checkout-delivery-address.connector';\n\n@Injectable()\nexport class CheckoutDeliveryAddressService\n  implements CheckoutDeliveryAddressFacade\n{\n  protected createDeliveryAddressCommand: Command<Address, unknown> =\n    this.commandService.create<Address>(\n      (payload) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) => {\n            return this.checkoutDeliveryAddressConnector\n              .createAddress(userId, cartId, payload)\n              .pipe(\n                map((address) => {\n                  address.titleCode = payload.titleCode;\n                  if (payload.region?.isocodeShort) {\n                    address.region = {\n                      ...address.region,\n                      isocodeShort: payload.region.isocodeShort,\n                    };\n                  }\n                  return address;\n                }),\n                tap((address) =>\n                  this.eventService.dispatch(\n                    { userId, cartId, address },\n                    CheckoutDeliveryAddressCreatedEvent\n                  )\n                )\n              );\n          })\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  protected setDeliveryAddressCommand: Command<Address, unknown> =\n    this.commandService.create<Address>(\n      (address) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) => {\n            const addressId = address.id;\n            if (!addressId) {\n              throw new Error('Checkout conditions not met');\n            }\n            return this.checkoutDeliveryAddressConnector\n              .setAddress(userId, cartId, addressId)\n              .pipe(\n                tap(() => {\n                  this.eventService.dispatch(\n                    {\n                      userId,\n                      cartId,\n                      address,\n                    },\n                    CheckoutDeliveryAddressSetEvent\n                  );\n                })\n              );\n          })\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  protected clearDeliveryAddressCommand: Command<void, unknown> =\n    this.commandService.create<void>(\n      () =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutDeliveryAddressConnector\n              .clearCheckoutDeliveryAddress(userId, cartId)\n              .pipe(\n                tap(() => {\n                  this.eventService.dispatch(\n                    {\n                      userId,\n                      cartId,\n                    },\n                    CheckoutDeliveryAddressClearedEvent\n                  );\n                })\n              )\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected eventService: EventService,\n    protected commandService: CommandService,\n    protected checkoutDeliveryAddressConnector: CheckoutDeliveryAddressConnector,\n    protected checkoutQueryFacade: CheckoutQueryFacade\n  ) {}\n\n  /**\n   * Performs the necessary checkout preconditions.\n   */\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  getDeliveryAddressState(): Observable<QueryState<Address | undefined>> {\n    return this.checkoutQueryFacade.getCheckoutDetailsState().pipe(\n      map((state) => ({\n        ...state,\n        data: state.data?.deliveryAddress,\n      }))\n    );\n  }\n\n  createAndSetAddress(address: Address): Observable<unknown> {\n    return this.createDeliveryAddressCommand.execute(address);\n  }\n\n  setDeliveryAddress(address: Address): Observable<unknown> {\n    return this.setDeliveryAddressCommand.execute(address);\n  }\n\n  clearCheckoutDeliveryAddress(): Observable<unknown> {\n    return this.clearDeliveryAddressCommand.execute();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade, DeliveryMode } from '@spartacus/cart/base/root';\nimport {\n  CheckoutDeliveryModeClearedErrorEvent,\n  CheckoutDeliveryModeClearedEvent,\n  CheckoutDeliveryModeSetEvent,\n  CheckoutDeliveryModesFacade,\n  CheckoutQueryFacade,\n  CheckoutSupportedDeliveryModesQueryReloadEvent,\n  CheckoutSupportedDeliveryModesQueryResetEvent,\n} from '@spartacus/checkout/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  Query,\n  QueryNotifier,\n  QueryService,\n  QueryState,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, throwError } from 'rxjs';\nimport { catchError, filter, map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutDeliveryModesConnector } from '../connectors/checkout-delivery-modes/checkout-delivery-modes.connector';\n\n@Injectable()\nexport class CheckoutDeliveryModesService\n  implements CheckoutDeliveryModesFacade\n{\n  /**\n   * Returns the reload events for the supportedDeliveryModes query\n   */\n  protected getCheckoutSupportedDeliveryModesQueryReloadEvents(): QueryNotifier[] {\n    return [CheckoutSupportedDeliveryModesQueryReloadEvent];\n  }\n  /**\n   * Return the reset events for the supportedDeliveryModes query\n   */\n  protected getCheckoutSupportedDeliveryModesQueryResetEvents(): QueryNotifier[] {\n    return [CheckoutSupportedDeliveryModesQueryResetEvent];\n  }\n\n  protected supportedDeliveryModesQuery: Query<DeliveryMode[]> =\n    this.queryService.create<DeliveryMode[]>(\n      () =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutDeliveryModesConnector.getSupportedModes(\n              userId,\n              cartId\n            )\n          )\n        ),\n      {\n        reloadOn: this.getCheckoutSupportedDeliveryModesQueryReloadEvents(),\n        resetOn: this.getCheckoutSupportedDeliveryModesQueryResetEvents(),\n      }\n    );\n\n  protected setDeliveryModeCommand: Command<string, unknown> =\n    this.commandService.create<string>(\n      (deliveryModeCode) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutDeliveryModesConnector\n              .setMode(userId, cartId, deliveryModeCode)\n              .pipe(\n                tap(() => {\n                  this.eventService.dispatch(\n                    { userId, cartId, cartCode: cartId, deliveryModeCode },\n                    CheckoutDeliveryModeSetEvent\n                  );\n                })\n              )\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  protected clearDeliveryModeCommand: Command<void, unknown> =\n    this.commandService.create<void>(\n      () =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutDeliveryModesConnector\n              .clearCheckoutDeliveryMode(userId, cartId)\n              .pipe(\n                tap(() => {\n                  this.eventService.dispatch(\n                    {\n                      userId,\n                      cartId,\n                      /**\n                       * As we know the cart is not anonymous (precondition checked),\n                       * we can safely use the cartId, which is actually the cart.code.\n                       */\n                      cartCode: cartId,\n                    },\n                    CheckoutDeliveryModeClearedEvent\n                  );\n                }),\n                catchError((error) => {\n                  this.eventService.dispatch(\n                    {\n                      userId,\n                      cartId,\n                      /**\n                       * As we know the cart is not anonymous (precondition checked),\n                       * we can safely use the cartId, which is actually the cart.code.\n                       */\n                      cartCode: cartId,\n                    },\n                    CheckoutDeliveryModeClearedErrorEvent\n                  );\n\n                  return throwError(error);\n                })\n              )\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected eventService: EventService,\n    protected queryService: QueryService,\n    protected commandService: CommandService,\n    protected checkoutDeliveryModesConnector: CheckoutDeliveryModesConnector,\n    protected checkoutQueryFacade: CheckoutQueryFacade\n  ) {}\n\n  /**\n   * Performs the necessary checkout preconditions.\n   */\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  getSupportedDeliveryModesState(): Observable<QueryState<DeliveryMode[]>> {\n    return this.supportedDeliveryModesQuery.getState();\n  }\n\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.getSupportedDeliveryModesState().pipe(\n      filter((state) => !state.loading),\n      map((state) => state.data ?? [])\n    );\n  }\n\n  getSelectedDeliveryModeState(): Observable<\n    QueryState<DeliveryMode | undefined>\n  > {\n    return this.checkoutQueryFacade\n      .getCheckoutDetailsState()\n      .pipe(map((state) => ({ ...state, data: state.data?.deliveryMode })));\n  }\n\n  setDeliveryMode(mode: string): Observable<unknown> {\n    return this.setDeliveryModeCommand.execute(mode);\n  }\n\n  clearCheckoutDeliveryMode(): Observable<unknown> {\n    return this.clearDeliveryModeCommand.execute();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  ActiveCartFacade,\n  CardType,\n  PaymentDetails,\n} from '@spartacus/cart/base/root';\nimport {\n  CheckoutPaymentCardTypesQueryReloadEvent,\n  CheckoutPaymentCardTypesQueryResetEvent,\n  CheckoutPaymentDetailsCreatedEvent,\n  CheckoutPaymentDetailsSetEvent,\n  CheckoutPaymentFacade,\n  CheckoutQueryFacade,\n} from '@spartacus/checkout/base/root';\nimport {\n  Command,\n  CommandService,\n  CommandStrategy,\n  EventService,\n  OCC_USER_ID_ANONYMOUS,\n  Query,\n  QueryNotifier,\n  QueryService,\n  QueryState,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutPaymentConnector } from '../connectors/checkout-payment/checkout-payment.connector';\n\n@Injectable()\nexport class CheckoutPaymentService implements CheckoutPaymentFacade {\n  /**\n   * Returns the reload events for the cardTypes query\n   */\n  protected getCheckoutPaymentCardTypesQueryReloadEvents(): QueryNotifier[] {\n    return [CheckoutPaymentCardTypesQueryReloadEvent];\n  }\n\n  /**\n   * Returns the reset events for the cardTypes query\n   */\n  protected getCheckoutPaymentCardTypesQueryResetEvents(): QueryNotifier[] {\n    return [CheckoutPaymentCardTypesQueryResetEvent];\n  }\n\n  protected paymentCardTypesQuery: Query<CardType[]> = this.queryService.create<\n    CardType[]\n  >(() => this.checkoutPaymentConnector.getPaymentCardTypes(), {\n    reloadOn: this.getCheckoutPaymentCardTypesQueryReloadEvents(),\n    resetOn: this.getCheckoutPaymentCardTypesQueryResetEvents(),\n  });\n\n  protected createPaymentMethodCommand: Command<PaymentDetails, unknown> =\n    this.commandService.create<PaymentDetails>(\n      (paymentDetails) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutPaymentConnector\n              .createPaymentDetails(userId, cartId, paymentDetails)\n              .pipe(\n                tap((response) =>\n                  this.eventService.dispatch(\n                    { userId, cartId, paymentDetails: response },\n                    CheckoutPaymentDetailsCreatedEvent\n                  )\n                )\n              )\n          )\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  protected setPaymentMethodCommand: Command<PaymentDetails, unknown> =\n    this.commandService.create<PaymentDetails>(\n      (paymentDetails) =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) => {\n            const paymentDetailsId = paymentDetails?.id;\n            if (!paymentDetailsId) {\n              throw new Error('Checkout conditions not met');\n            }\n\n            return this.checkoutPaymentConnector\n              .setPaymentDetails(userId, cartId, paymentDetailsId)\n              .pipe(\n                tap(() =>\n                  this.eventService.dispatch(\n                    {\n                      userId,\n                      cartId,\n                      paymentDetailsId,\n                    },\n                    CheckoutPaymentDetailsSetEvent\n                  )\n                )\n              );\n          })\n        ),\n      {\n        strategy: CommandStrategy.CancelPrevious,\n      }\n    );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected queryService: QueryService,\n    protected commandService: CommandService,\n    protected eventService: EventService,\n    protected checkoutPaymentConnector: CheckoutPaymentConnector,\n    protected checkoutQueryFacade: CheckoutQueryFacade\n  ) {}\n\n  /**\n   * Performs the necessary checkout preconditions.\n   */\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  getPaymentCardTypesState(): Observable<QueryState<CardType[] | undefined>> {\n    return this.paymentCardTypesQuery.getState();\n  }\n\n  getPaymentCardTypes(): Observable<CardType[]> {\n    return this.getPaymentCardTypesState().pipe(\n      map((state) => state.data ?? [])\n    );\n  }\n\n  getPaymentDetailsState(): Observable<QueryState<PaymentDetails | undefined>> {\n    return this.checkoutQueryFacade\n      .getCheckoutDetailsState()\n      .pipe(map((state) => ({ ...state, data: state.data?.paymentInfo })));\n  }\n\n  createPaymentDetails(paymentDetails: PaymentDetails): Observable<unknown> {\n    return this.createPaymentMethodCommand.execute(paymentDetails);\n  }\n\n  setPaymentDetails(paymentDetails: PaymentDetails): Observable<unknown> {\n    return this.setPaymentMethodCommand.execute(paymentDetails);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport {\n  CheckoutQueryFacade,\n  CheckoutQueryReloadEvent,\n  CheckoutQueryResetEvent,\n  CheckoutState,\n} from '@spartacus/checkout/base/root';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  Query,\n  QueryNotifier,\n  QueryService,\n  QueryState,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { CheckoutConnector } from '../connectors/checkout/checkout.connector';\n\n@Injectable()\nexport class CheckoutQueryService implements CheckoutQueryFacade {\n  /**\n   * Returns the reload events for the checkout query.\n   */\n  protected getCheckoutQueryReloadEvents(): QueryNotifier[] {\n    return [CheckoutQueryReloadEvent];\n  }\n  /**\n   * Returns the reset events for the checkout query.\n   */\n  protected getCheckoutQueryResetEvents(): QueryNotifier[] {\n    return [CheckoutQueryResetEvent];\n  }\n\n  protected checkoutQuery$: Query<CheckoutState | undefined> =\n    this.queryService.create<CheckoutState | undefined>(\n      () =>\n        this.checkoutPreconditions().pipe(\n          switchMap(([userId, cartId]) =>\n            this.checkoutConnector.getCheckoutDetails(userId, cartId)\n          )\n        ),\n      {\n        reloadOn: this.getCheckoutQueryReloadEvents(),\n        resetOn: this.getCheckoutQueryResetEvents(),\n      }\n    );\n\n  constructor(\n    protected activeCartFacade: ActiveCartFacade,\n    protected userIdService: UserIdService,\n    protected queryService: QueryService,\n    protected checkoutConnector: CheckoutConnector\n  ) {}\n\n  /**\n   * Performs the necessary checkout preconditions.\n   */\n  protected checkoutPreconditions(): Observable<[string, string]> {\n    return combineLatest([\n      this.userIdService.takeUserId(),\n      this.activeCartFacade.takeActiveCartId(),\n      this.activeCartFacade.isGuestCart(),\n    ]).pipe(\n      take(1),\n      map(([userId, cartId, isGuestCart]) => {\n        if (\n          !userId ||\n          !cartId ||\n          (userId === OCC_USER_ID_ANONYMOUS && !isGuestCart)\n        ) {\n          throw new Error('Checkout conditions not met');\n        }\n        return [userId, cartId];\n      })\n    );\n  }\n\n  getCheckoutDetailsState(): Observable<QueryState<CheckoutState | undefined>> {\n    return this.checkoutQuery$.getState();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport {\n  CheckoutDeliveryAddressFacade,\n  CheckoutDeliveryModesFacade,\n  CheckoutPaymentFacade,\n  CheckoutQueryFacade,\n} from '@spartacus/checkout/base/root';\nimport { CheckoutDeliveryAddressService } from './checkout-delivery-address.service';\nimport { CheckoutDeliveryModesService } from './checkout-delivery-modes.service';\nimport { CheckoutPaymentService } from './checkout-payment.service';\nimport { CheckoutQueryService } from './checkout-query.service';\n\nexport const facadeProviders: Provider[] = [\n  CheckoutDeliveryAddressService,\n  {\n    provide: CheckoutDeliveryAddressFacade,\n    useExisting: CheckoutDeliveryAddressService,\n  },\n  CheckoutDeliveryModesService,\n  {\n    provide: CheckoutDeliveryModesFacade,\n    useExisting: CheckoutDeliveryModesService,\n  },\n  CheckoutPaymentService,\n  {\n    provide: CheckoutPaymentFacade,\n    useExisting: CheckoutPaymentService,\n  },\n  CheckoutQueryService,\n  {\n    provide: CheckoutQueryFacade,\n    useExisting: CheckoutQueryService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport {\n  PageHeadingResolver,\n  BasePageMetaResolver,\n  PageDescriptionResolver,\n  PageMetaResolver,\n  PageRobotsMeta,\n  PageRobotsResolver,\n  PageTitleResolver,\n  PageType,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overridden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver\n  extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageRobotsResolver\n{\n  constructor(\n    protected translationService: TranslationService,\n    protected activeCartFacade: ActiveCartFacade,\n    protected basePageMetaResolver: BasePageMetaResolver\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  /**\n   * @override\n   * Resolves the page title for the Checkout Page to include checkout step.\n   * The page title used by the browser (history, tabs) and crawlers.\n   *\n   * The title from the page data is ignored for this page title.\n   */\n  resolveTitle(): Observable<string | undefined> {\n    return this.basePageMetaResolver.resolveTitle();\n  }\n\n  /**\n   * Resolves the page heading for the Checkout Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.translationService.translate('pageMetaResolver.checkout.title');\n  }\n\n  resolveDescription(): Observable<string | undefined> {\n    return this.basePageMetaResolver.resolveDescription();\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return this.basePageMetaResolver.resolveRobots();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { PageMetaResolver } from '@spartacus/core';\nimport { CheckoutDeliveryAddressConnector } from './connectors/checkout-delivery-address/checkout-delivery-address.connector';\nimport { CheckoutDeliveryModesConnector } from './connectors/checkout-delivery-modes/checkout-delivery-modes.connector';\nimport { CheckoutPaymentConnector } from './connectors/checkout-payment/checkout-payment.connector';\nimport { CheckoutConnector } from './connectors/checkout/checkout.connector';\nimport { facadeProviders } from './facade/facade-providers';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    ...facadeProviders,\n    CheckoutDeliveryAddressConnector,\n    CheckoutDeliveryModesConnector,\n    CheckoutPaymentConnector,\n    CheckoutConnector,\n    CheckoutPageMetaResolver,\n    {\n      provide: PageMetaResolver,\n      useExisting: CheckoutPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CheckoutCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-delivery-address.adapter';\nexport * from './checkout-delivery-address.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { DeliveryMode } from '@spartacus/cart/base/root';\nimport { Converter } from '@spartacus/core';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-delivery-modes.adapter';\nexport * from './checkout-delivery-modes.connector';\nexport * from './converters';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { CardType, PaymentDetails } from '@spartacus/cart/base/root';\nimport { Converter } from '@spartacus/core';\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const PAYMENT_CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('PaymentCardTypeNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-payment.connector';\nexport * from './checkout-payment.adapter';\nexport * from './converters';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { CheckoutState } from '@spartacus/checkout/base/root';\nimport { Converter } from '@spartacus/core';\n\nexport const CHECKOUT_NORMALIZER = new InjectionToken<\n  Converter<any, CheckoutState>\n>('CheckoutNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout.adapter';\nexport * from './checkout.connector';\nexport * from './converters';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-delivery-address/index';\nexport * from './checkout-delivery-modes/index';\nexport * from './checkout-payment/index';\nexport * from './checkout/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-delivery-address.service';\nexport * from './checkout-delivery-modes.service';\nexport * from './checkout-payment.service';\nexport * from './checkout-query.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-page-meta.resolver';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './checkout-core.module';\nexport * from './connectors/index';\nexport * from './facade/index';\nexport * from './services/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.CheckoutDeliveryAddressAdapter","i1.CheckoutDeliveryModesAdapter","i1.CheckoutPaymentAdapter","i1.CheckoutAdapter","i3.CheckoutDeliveryAddressConnector","i3.CheckoutDeliveryModesConnector","i3.CheckoutPaymentConnector","i3.CheckoutConnector","i1","i2"],"mappings":"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"}