/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { getLastValueSync, GlobalMessageType, } from '@spartacus/core';
import { ICON_TYPE } from '@spartacus/storefront';
import { BehaviorSubject, combineLatest, of, Subscription, } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap, take, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/checkout/base/root";
import * as i3 from "@angular/router";
import * as i4 from "@spartacus/cart/base/root";
import * as i5 from "../services/checkout-step.service";
import * as i6 from "@angular/common";
import * as i7 from "./checkout-payment-form/checkout-payment-form.component";
import * as i8 from "@spartacus/storefront";
export class CheckoutPaymentMethodComponent {
    get backBtnText() {
        return this.checkoutStepService.getBackBntText(this.activatedRoute);
    }
    get existingPaymentMethods$() {
        return this.userPaymentService.getPaymentMethods();
    }
    get selectedMethod$() {
        return this.checkoutPaymentFacade.getPaymentDetailsState().pipe(filter((state) => !state.loading), map((state) => state.data), distinctUntilChanged((prev, curr) => prev?.id === curr?.id));
    }
    constructor(userPaymentService, checkoutDeliveryAddressFacade, checkoutPaymentFacade, activatedRoute, translationService, activeCartFacade, checkoutStepService, globalMessageService) {
        this.userPaymentService = userPaymentService;
        this.checkoutDeliveryAddressFacade = checkoutDeliveryAddressFacade;
        this.checkoutPaymentFacade = checkoutPaymentFacade;
        this.activatedRoute = activatedRoute;
        this.translationService = translationService;
        this.activeCartFacade = activeCartFacade;
        this.checkoutStepService = checkoutStepService;
        this.globalMessageService = globalMessageService;
        this.subscriptions = new Subscription();
        this.busy$ = new BehaviorSubject(false);
        this.iconTypes = ICON_TYPE;
        this.isGuestCheckout = false;
        this.newPaymentFormManuallyOpened = false;
        this.doneAutoSelect = false;
        this.isUpdating$ = combineLatest([
            this.busy$,
            this.userPaymentService.getPaymentMethodsLoading(),
            this.checkoutPaymentFacade
                .getPaymentDetailsState()
                .pipe(map((state) => state.loading)),
        ]).pipe(map(([busy, userPaymentLoading, paymentMethodLoading]) => busy || userPaymentLoading || paymentMethodLoading), distinctUntilChanged());
    }
    ngOnInit() {
        if (!getLastValueSync(this.activeCartFacade.isGuestCart())) {
            this.userPaymentService.loadPaymentMethods();
        }
        else {
            this.isGuestCheckout = true;
        }
        this.checkoutDeliveryAddressFacade
            .getDeliveryAddressState()
            .pipe(filter((state) => !state.loading), take(1), map((state) => state.data))
            .subscribe((address) => {
            this.deliveryAddress = address;
        });
        this.cards$ = combineLatest([
            this.existingPaymentMethods$.pipe(switchMap((methods) => {
                return !methods?.length
                    ? of([])
                    : combineLatest(methods.map((method) => combineLatest([
                        of(method),
                        this.translationService.translate('paymentCard.expires', {
                            month: method.expiryMonth,
                            year: method.expiryYear,
                        }),
                    ]).pipe(map(([payment, translation]) => ({
                        payment,
                        expiryTranslation: translation,
                    })))));
            })),
            this.selectedMethod$,
            this.translationService.translate('paymentForm.useThisPayment'),
            this.translationService.translate('paymentCard.defaultPaymentMethod'),
            this.translationService.translate('paymentCard.selected'),
        ]).pipe(tap(([paymentMethods, selectedMethod]) => this.selectDefaultPaymentMethod(paymentMethods, selectedMethod)), map(([paymentMethods, selectedMethod, textUseThisPayment, textDefaultPaymentMethod, textSelected,]) => paymentMethods.map((payment) => ({
            content: this.createCard(payment.payment, {
                textExpires: payment.expiryTranslation,
                textUseThisPayment,
                textDefaultPaymentMethod,
                textSelected,
            }, selectedMethod),
            paymentMethod: payment.payment,
        }))));
    }
    selectDefaultPaymentMethod(paymentMethods, selectedMethod) {
        if (!this.doneAutoSelect &&
            paymentMethods?.length &&
            (!selectedMethod || Object.keys(selectedMethod).length === 0)) {
            const defaultPaymentMethod = paymentMethods.find((paymentMethod) => paymentMethod.payment.defaultPayment);
            if (defaultPaymentMethod) {
                selectedMethod = defaultPaymentMethod.payment;
                this.savePaymentMethod(selectedMethod);
            }
            this.doneAutoSelect = true;
        }
    }
    selectPaymentMethod(paymentDetails) {
        if (paymentDetails?.id === getLastValueSync(this.selectedMethod$)?.id) {
            return;
        }
        this.globalMessageService.add({
            key: 'paymentMethods.paymentMethodSelected',
        }, GlobalMessageType.MSG_TYPE_INFO);
        this.savePaymentMethod(paymentDetails);
    }
    showNewPaymentForm() {
        this.newPaymentFormManuallyOpened = true;
    }
    hideNewPaymentForm() {
        this.newPaymentFormManuallyOpened = false;
    }
    setPaymentDetails({ paymentDetails, billingAddress, }) {
        this.paymentDetails = paymentDetails;
        const details = { ...paymentDetails };
        details.billingAddress = billingAddress ?? this.deliveryAddress;
        this.busy$.next(true);
        this.subscriptions.add(this.checkoutPaymentFacade.createPaymentDetails(details).subscribe({
            complete: () => {
                // we don't call onSuccess here, because it can cause a spinner flickering
                this.next();
            },
            error: () => {
                this.onError();
            },
        }));
    }
    next() {
        this.checkoutStepService.next(this.activatedRoute);
    }
    back() {
        this.checkoutStepService.back(this.activatedRoute);
    }
    savePaymentMethod(paymentDetails) {
        this.busy$.next(true);
        this.subscriptions.add(this.checkoutPaymentFacade.setPaymentDetails(paymentDetails).subscribe({
            complete: () => this.onSuccess(),
            error: () => this.onError(),
        }));
    }
    getCardIcon(code) {
        let ccIcon;
        if (code === 'visa') {
            ccIcon = this.iconTypes.VISA;
        }
        else if (code === 'master' || code === 'mastercard_eurocard') {
            ccIcon = this.iconTypes.MASTER_CARD;
        }
        else if (code === 'diners') {
            ccIcon = this.iconTypes.DINERS_CLUB;
        }
        else if (code === 'amex') {
            ccIcon = this.iconTypes.AMEX;
        }
        else {
            ccIcon = this.iconTypes.CREDIT_CARD;
        }
        return ccIcon;
    }
    createCard(paymentDetails, cardLabels, selected) {
        return {
            role: 'region',
            title: paymentDetails.defaultPayment
                ? cardLabels.textDefaultPaymentMethod
                : '',
            textBold: paymentDetails.accountHolderName,
            text: [paymentDetails.cardNumber ?? '', cardLabels.textExpires],
            img: this.getCardIcon(paymentDetails.cardType?.code),
            actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],
            header: selected?.id === paymentDetails.id
                ? cardLabels.textSelected
                : undefined,
            label: paymentDetails.defaultPayment
                ? 'paymentCard.defaultPaymentLabel'
                : 'paymentCard.additionalPaymentLabel',
        };
    }
    onSuccess() {
        this.busy$.next(false);
    }
    onError() {
        this.busy$.next(false);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
CheckoutPaymentMethodComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutPaymentMethodComponent, deps: [{ token: i1.UserPaymentService }, { token: i2.CheckoutDeliveryAddressFacade }, { token: i2.CheckoutPaymentFacade }, { token: i3.ActivatedRoute }, { token: i1.TranslationService }, { token: i4.ActiveCartFacade }, { token: i5.CheckoutStepService }, { token: i1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Component });
CheckoutPaymentMethodComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: CheckoutPaymentMethodComponent, selector: "cx-payment-method", ngImport: i0, template: "<h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n  {{ 'paymentForm.payment' | cxTranslate }}\n</h2>\n<ng-container *ngIf=\"cards$ | async as cards\">\n  <ng-container *ngIf=\"!(isUpdating$ | async); else loading\">\n    <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n    <ng-container\n      *ngIf=\"\n        cards?.length && !newPaymentFormManuallyOpened;\n        then hasExistingPaymentMethods;\n        else newPaymentForm\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <ng-template #hasExistingPaymentMethods>\n    <p class=\"cx-checkout-text\">\n      {{ 'paymentForm.choosePaymentMethod' | cxTranslate }}\n    </p>\n    <div class=\"cx-checkout-btns row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          class=\"btn btn-block btn-secondary\"\n          (click)=\"showNewPaymentForm()\"\n        >\n          {{ 'paymentForm.addNewPayment' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n\n    <div class=\"cx-checkout-body row\">\n      <div\n        class=\"cx-payment-card col-md-12 col-lg-6\"\n        *ngFor=\"let card of cards; let i = index\"\n      >\n        <div\n          class=\"cx-payment-card-inner\"\n          (click)=\"selectPaymentMethod(card.paymentMethod)\"\n        >\n          <cx-card\n            [border]=\"true\"\n            [fitToContainer]=\"true\"\n            [content]=\"card.content\"\n            [index]=\"i\"\n            (sendCard)=\"selectPaymentMethod(card.paymentMethod)\"\n          ></cx-card>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row cx-checkout-btns\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n          {{ backBtnText | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          class=\"btn btn-block btn-primary\"\n          [disabled]=\"!(selectedMethod$ | async)?.id\"\n          (click)=\"next()\"\n        >\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #newPaymentForm>\n    <cx-payment-form\n      (setPaymentDetails)=\"setPaymentDetails($event)\"\n      (closeForm)=\"hideNewPaymentForm()\"\n      (goBack)=\"back()\"\n      [paymentMethodsCount]=\"cards?.length || 0\"\n      [setAsDefaultField]=\"!isGuestCheckout && !!cards?.length\"\n      [loading]=\"isUpdating$ | async\"\n      [paymentDetails]=\"paymentDetails\"\n    ></cx-payment-form>\n  </ng-template>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.CheckoutPaymentFormComponent, selector: "cx-payment-form", inputs: ["loading", "setAsDefaultField", "paymentMethodsCount", "paymentDetails"], outputs: ["goBack", "closeForm", "setPaymentDetails"] }, { kind: "component", type: i8.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit", "index"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { kind: "component", type: i8.SpinnerComponent, selector: "cx-spinner" }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutPaymentMethodComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-payment-method', changeDetection: ChangeDetectionStrategy.OnPush, template: "<h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n  {{ 'paymentForm.payment' | cxTranslate }}\n</h2>\n<ng-container *ngIf=\"cards$ | async as cards\">\n  <ng-container *ngIf=\"!(isUpdating$ | async); else loading\">\n    <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n    <ng-container\n      *ngIf=\"\n        cards?.length && !newPaymentFormManuallyOpened;\n        then hasExistingPaymentMethods;\n        else newPaymentForm\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <ng-template #hasExistingPaymentMethods>\n    <p class=\"cx-checkout-text\">\n      {{ 'paymentForm.choosePaymentMethod' | cxTranslate }}\n    </p>\n    <div class=\"cx-checkout-btns row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          class=\"btn btn-block btn-secondary\"\n          (click)=\"showNewPaymentForm()\"\n        >\n          {{ 'paymentForm.addNewPayment' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n\n    <div class=\"cx-checkout-body row\">\n      <div\n        class=\"cx-payment-card col-md-12 col-lg-6\"\n        *ngFor=\"let card of cards; let i = index\"\n      >\n        <div\n          class=\"cx-payment-card-inner\"\n          (click)=\"selectPaymentMethod(card.paymentMethod)\"\n        >\n          <cx-card\n            [border]=\"true\"\n            [fitToContainer]=\"true\"\n            [content]=\"card.content\"\n            [index]=\"i\"\n            (sendCard)=\"selectPaymentMethod(card.paymentMethod)\"\n          ></cx-card>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row cx-checkout-btns\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n          {{ backBtnText | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          class=\"btn btn-block btn-primary\"\n          [disabled]=\"!(selectedMethod$ | async)?.id\"\n          (click)=\"next()\"\n        >\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #newPaymentForm>\n    <cx-payment-form\n      (setPaymentDetails)=\"setPaymentDetails($event)\"\n      (closeForm)=\"hideNewPaymentForm()\"\n      (goBack)=\"back()\"\n      [paymentMethodsCount]=\"cards?.length || 0\"\n      [setAsDefaultField]=\"!isGuestCheckout && !!cards?.length\"\n      [loading]=\"isUpdating$ | async\"\n      [paymentDetails]=\"paymentDetails\"\n    ></cx-payment-form>\n  </ng-template>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserPaymentService }, { type: i2.CheckoutDeliveryAddressFacade }, { type: i2.CheckoutPaymentFacade }, { type: i3.ActivatedRoute }, { type: i1.TranslationService }, { type: i4.ActiveCartFacade }, { type: i5.CheckoutStepService }, { type: i1.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,