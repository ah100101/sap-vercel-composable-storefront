/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators, } from '@angular/forms';
import { CartOutlets } from '@spartacus/cart/base/root';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map, tap, withLatestFrom, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../services/checkout-config.service";
import * as i3 from "@angular/router";
import * as i4 from "../services/checkout-step.service";
import * as i5 from "@spartacus/checkout/base/root";
import * as i6 from "@spartacus/cart/base/root";
import * as i7 from "@angular/common";
import * as i8 from "@spartacus/storefront";
import * as i9 from "@spartacus/core";
export class CheckoutDeliveryModeComponent {
    get deliveryModeInvalid() {
        return this.mode.controls['deliveryModeId'].invalid;
    }
    constructor(fb, checkoutConfigService, activatedRoute, checkoutStepService, checkoutDeliveryModesFacade, activeCartFacade) {
        this.fb = fb;
        this.checkoutConfigService = checkoutConfigService;
        this.activatedRoute = activatedRoute;
        this.checkoutStepService = checkoutStepService;
        this.checkoutDeliveryModesFacade = checkoutDeliveryModesFacade;
        this.activeCartFacade = activeCartFacade;
        this.busy$ = new BehaviorSubject(false);
        this.CartOutlets = CartOutlets;
        this.selectedDeliveryModeCode$ = this.checkoutDeliveryModesFacade
            .getSelectedDeliveryModeState()
            .pipe(filter((state) => !state.loading), map((state) => state.data), map((deliveryMode) => deliveryMode?.code));
        this.supportedDeliveryModes$ = this.checkoutDeliveryModesFacade
            .getSupportedDeliveryModes()
            .pipe(filter((deliveryModes) => !!deliveryModes?.length), withLatestFrom(this.selectedDeliveryModeCode$), tap(([deliveryModes, code]) => {
            if (!code ||
                !deliveryModes.find((deliveryMode) => deliveryMode.code === code)) {
                code =
                    this.checkoutConfigService.getPreferredDeliveryMode(deliveryModes);
            }
            if (code) {
                this.mode.controls['deliveryModeId'].setValue(code);
                this.changeMode(code);
            }
        }), map(([deliveryModes]) => deliveryModes.filter((mode) => mode.code !== 'pickup')));
        this.backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);
        this.mode = this.fb.group({
            deliveryModeId: ['', Validators.required],
        });
        this.isUpdating$ = combineLatest([
            this.busy$,
            this.checkoutDeliveryModesFacade
                .getSelectedDeliveryModeState()
                .pipe(map((state) => state.loading)),
        ]).pipe(map(([busy, loading]) => busy || loading), distinctUntilChanged());
    }
    changeMode(code) {
        this.busy$.next(true);
        this.checkoutDeliveryModesFacade.setDeliveryMode(code).subscribe({
            complete: () => this.onSuccess(),
            error: () => this.onError(),
        });
    }
    next() {
        this.checkoutStepService.next(this.activatedRoute);
    }
    back() {
        this.checkoutStepService.back(this.activatedRoute);
    }
    getAriaChecked(code) {
        return code === this.mode.controls['deliveryModeId'].value;
    }
    onSuccess() {
        this.busy$.next(false);
    }
    onError() {
        this.busy$.next(false);
    }
}
CheckoutDeliveryModeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutDeliveryModeComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i2.CheckoutConfigService }, { token: i3.ActivatedRoute }, { token: i4.CheckoutStepService }, { token: i5.CheckoutDeliveryModesFacade }, { token: i6.ActiveCartFacade }], target: i0.ɵɵFactoryTarget.Component });
CheckoutDeliveryModeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: CheckoutDeliveryModeComponent, selector: "cx-delivery-mode", ngImport: i0, template: "<h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n  {{ 'checkoutMode.deliveryMethod' | cxTranslate }}\n</h2>\n\n<ng-container\n  *ngIf=\"\n    !(isUpdating$ | async) &&\n      (supportedDeliveryModes$ | async) as supportedDeliveryModes;\n    else loading\n  \"\n>\n  <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n  <div [formGroup]=\"mode\" class=\"cx-delivery-mode-wrapper\">\n    <div role=\"radiogroup\">\n      <div class=\"form-check\" *ngFor=\"let mode of supportedDeliveryModes\">\n        <input\n          [attr.aria-checked]=\"getAriaChecked(mode.code)\"\n          class=\"form-check-input\"\n          role=\"radio\"\n          type=\"radio\"\n          id=\"deliveryMode-{{ mode.code }}\"\n          (change)=\"changeMode(mode.code)\"\n          [value]=\"mode.code\"\n          formControlName=\"deliveryModeId\"\n        />\n        <label\n          class=\"cx-delivery-label form-check-label form-radio-label\"\n          for=\"deliveryMode-{{ mode.code }}\"\n        >\n          <div class=\"cx-delivery-mode\">\n            {{ mode.name }} ({{ mode.description }})\n          </div>\n          <div class=\"cx-delivery-price\">\n            {{ mode.deliveryCost?.formattedValue }}\n          </div>\n          <div class=\"cx-delivery-details\"></div>\n        </label>\n      </div>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"activeCartFacade.hasPickupItems() | async\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutMode.deliveryEntries' | cxTranslate }}\n  </h2>\n\n  <ng-template\n    [cxOutlet]=\"CartOutlets.CART_ITEM_LIST\"\n    [cxOutletContext]=\"{\n      items: activeCartFacade.getDeliveryEntries() | async,\n      readonly: true\n    }\"\n  >\n  </ng-template>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n\n<ng-container cxInnerComponentsHost></ng-container>\n\n<div class=\"row cx-checkout-btns\">\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n      {{ backBtnText | cxTranslate }}\n    </button>\n  </div>\n  <div class=\"col-md-12 col-lg-6\">\n    <button\n      class=\"btn btn-block btn-primary\"\n      [disabled]=\"deliveryModeInvalid\"\n      (click)=\"next()\"\n    >\n      {{ 'common.continue' | cxTranslate }}\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i8.SpinnerComponent, selector: "cx-spinner" }, { kind: "directive", type: i8.OutletDirective, selector: "[cxOutlet]", inputs: ["cxOutlet", "cxOutletContext", "cxOutletDefer", "cxComponentRef"], outputs: ["loaded", "cxComponentRefChange"] }, { kind: "directive", type: i8.InnerComponentsHostDirective, selector: "[cxInnerComponentsHost]" }, { kind: "pipe", type: i7.AsyncPipe, name: "async" }, { kind: "pipe", type: i9.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutDeliveryModeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-delivery-mode', changeDetection: ChangeDetectionStrategy.OnPush, template: "<h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n  {{ 'checkoutMode.deliveryMethod' | cxTranslate }}\n</h2>\n\n<ng-container\n  *ngIf=\"\n    !(isUpdating$ | async) &&\n      (supportedDeliveryModes$ | async) as supportedDeliveryModes;\n    else loading\n  \"\n>\n  <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n  <div [formGroup]=\"mode\" class=\"cx-delivery-mode-wrapper\">\n    <div role=\"radiogroup\">\n      <div class=\"form-check\" *ngFor=\"let mode of supportedDeliveryModes\">\n        <input\n          [attr.aria-checked]=\"getAriaChecked(mode.code)\"\n          class=\"form-check-input\"\n          role=\"radio\"\n          type=\"radio\"\n          id=\"deliveryMode-{{ mode.code }}\"\n          (change)=\"changeMode(mode.code)\"\n          [value]=\"mode.code\"\n          formControlName=\"deliveryModeId\"\n        />\n        <label\n          class=\"cx-delivery-label form-check-label form-radio-label\"\n          for=\"deliveryMode-{{ mode.code }}\"\n        >\n          <div class=\"cx-delivery-mode\">\n            {{ mode.name }} ({{ mode.description }})\n          </div>\n          <div class=\"cx-delivery-price\">\n            {{ mode.deliveryCost?.formattedValue }}\n          </div>\n          <div class=\"cx-delivery-details\"></div>\n        </label>\n      </div>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"activeCartFacade.hasPickupItems() | async\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutMode.deliveryEntries' | cxTranslate }}\n  </h2>\n\n  <ng-template\n    [cxOutlet]=\"CartOutlets.CART_ITEM_LIST\"\n    [cxOutletContext]=\"{\n      items: activeCartFacade.getDeliveryEntries() | async,\n      readonly: true\n    }\"\n  >\n  </ng-template>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n\n<ng-container cxInnerComponentsHost></ng-container>\n\n<div class=\"row cx-checkout-btns\">\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n      {{ backBtnText | cxTranslate }}\n    </button>\n  </div>\n  <div class=\"col-md-12 col-lg-6\">\n    <button\n      class=\"btn btn-block btn-primary\"\n      [disabled]=\"deliveryModeInvalid\"\n      (click)=\"next()\"\n    >\n      {{ 'common.continue' | cxTranslate }}\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i2.CheckoutConfigService }, { type: i3.ActivatedRoute }, { type: i4.CheckoutStepService }, { type: i5.CheckoutDeliveryModesFacade }, { type: i6.ActiveCartFacade }]; } });
//# sourceMappingURL=data:application/json;base64,