/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, filter, map, switchMap, take, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/checkout/base/root";
import * as i3 from "../services/checkout-config.service";
export class ExpressCheckoutService {
    constructor(userAddressService, userPaymentService, checkoutDeliveryAddressFacade, checkoutPaymentFacade, checkoutConfigService, checkoutDeliveryModesFacade) {
        this.userAddressService = userAddressService;
        this.userPaymentService = userPaymentService;
        this.checkoutDeliveryAddressFacade = checkoutDeliveryAddressFacade;
        this.checkoutPaymentFacade = checkoutPaymentFacade;
        this.checkoutConfigService = checkoutConfigService;
        this.checkoutDeliveryModesFacade = checkoutDeliveryModesFacade;
        this.setDeliveryAddress();
        this.setDeliveryMode();
        this.setPaymentMethod();
    }
    setDeliveryAddress() {
        this.deliveryAddressSet$ = combineLatest([
            this.userAddressService.getAddresses(),
            this.userAddressService.getAddressesLoadedSuccess(),
        ]).pipe(debounceTime(0), tap(([, addressesLoadedSuccess]) => {
            if (!addressesLoadedSuccess) {
                this.userAddressService.loadAddresses();
            }
        }), filter(([, addressesLoadedSuccess]) => addressesLoadedSuccess), take(1), switchMap(([addresses]) => {
            const defaultAddress = addresses.find((address) => address.defaultAddress) || addresses[0];
            if (defaultAddress && Object.keys(defaultAddress).length) {
                return this.checkoutDeliveryAddressFacade
                    .setDeliveryAddress(defaultAddress)
                    .pipe(switchMap(() => this.checkoutDeliveryAddressFacade.getDeliveryAddressState()), filter((state) => !state.error && !state.loading), map((state) => state.data), map((data) => !!(data && Object.keys(data).length)), catchError(() => of(false)));
            }
            return of(false);
        }), distinctUntilChanged());
    }
    setDeliveryMode() {
        this.deliveryModeSet$ = combineLatest([
            this.deliveryAddressSet$,
            this.checkoutDeliveryModesFacade.getSupportedDeliveryModesState(),
        ]).pipe(debounceTime(0), switchMap(([addressSet, supportedDeliveryModesState]) => {
            if (!addressSet) {
                return of(false);
            }
            return of([supportedDeliveryModesState]).pipe(filter(([supportedDeliveryModesStateObject]) => !supportedDeliveryModesStateObject.loading &&
                !!supportedDeliveryModesStateObject.data?.length), switchMap(([deliveryModesState]) => {
                if (!deliveryModesState.data) {
                    return of(false);
                }
                const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(deliveryModesState.data);
                return of([preferredDeliveryMode]).pipe(switchMap(([deliveryMode]) => {
                    if (!deliveryMode) {
                        return of(false);
                    }
                    return this.checkoutDeliveryModesFacade
                        .setDeliveryMode(deliveryMode)
                        .pipe(switchMap(() => this.checkoutDeliveryModesFacade.getSelectedDeliveryModeState()), filter((state) => !state.error && !state.loading), map((state) => state.data), map((data) => !!(data && Object.keys(data).length)), catchError(() => of(false)));
                }));
            }));
        }), distinctUntilChanged());
    }
    setPaymentMethod() {
        this.paymentMethodSet$ = combineLatest([
            this.deliveryModeSet$,
            this.userPaymentService.getPaymentMethods(),
            this.userPaymentService.getPaymentMethodsLoadedSuccess(),
        ]).pipe(debounceTime(0), tap(([, , paymentMethodsLoadedSuccess]) => {
            if (!paymentMethodsLoadedSuccess) {
                this.userPaymentService.loadPaymentMethods();
            }
        }), filter(([, , success]) => success), switchMap(([deliveryModeSet, payments]) => {
            if (!deliveryModeSet) {
                return of(false);
            }
            const defaultPayment = payments.find((address) => address.defaultPayment) || payments[0];
            if (!defaultPayment || Object.keys(defaultPayment).length === 0) {
                return of(false);
            }
            return this.checkoutPaymentFacade
                .setPaymentDetails(defaultPayment)
                .pipe(switchMap(() => this.checkoutPaymentFacade.getPaymentDetailsState()), filter((state) => !state.error && !state.loading), map((state) => state.data), map((data) => !!(data && Object.keys(data).length)), catchError(() => of(false)));
        }), distinctUntilChanged());
    }
    trySetDefaultCheckoutDetails() {
        return this.paymentMethodSet$.pipe(map((paymentMethodSet) => !!paymentMethodSet));
    }
}
ExpressCheckoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ExpressCheckoutService, deps: [{ token: i1.UserAddressService }, { token: i1.UserPaymentService }, { token: i2.CheckoutDeliveryAddressFacade }, { token: i2.CheckoutPaymentFacade }, { token: i3.CheckoutConfigService }, { token: i2.CheckoutDeliveryModesFacade }], target: i0.ɵɵFactoryTarget.Injectable });
ExpressCheckoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ExpressCheckoutService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ExpressCheckoutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserAddressService }, { type: i1.UserPaymentService }, { type: i2.CheckoutDeliveryAddressFacade }, { type: i2.CheckoutPaymentFacade }, { type: i3.CheckoutConfigService }, { type: i2.CheckoutDeliveryModesFacade }]; } });
//# sourceMappingURL=data:application/json;base64,