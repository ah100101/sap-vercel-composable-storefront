/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { MergeCartSuccessEvent } from '@spartacus/cart/base/root';
import { RestoreSavedCartSuccessEvent, SaveCartSuccessEvent, } from '@spartacus/cart/saved-cart/root';
import { CheckoutDeliveryAddressClearedEvent, CheckoutDeliveryAddressSetEvent, CheckoutDeliveryModeClearedEvent, CheckoutDeliveryModeSetEvent, CheckoutPaymentDetailsCreatedEvent, CheckoutPaymentDetailsSetEvent, } from '@spartacus/checkout/base/root';
import { LoginEvent, LogoutEvent } from '@spartacus/core';
import { DaysOfWeek, ORDER_TYPE, recurrencePeriod, } from '@spartacus/order/root';
import { BehaviorSubject, merge, Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class CheckoutReplenishmentFormService {
    constructor(eventService) {
        this.eventService = eventService;
        this.subscriptions = new Subscription();
        /**
         * Default form data
         */
        this.defaultFormData = {
            daysOfWeek: [DaysOfWeek.MONDAY],
            nthDayOfMonth: '1',
            numberOfDays: '14',
            numberOfWeeks: '1',
            recurrencePeriod: recurrencePeriod.DAILY,
            replenishmentStartDate: new Date().toISOString().split('T')[0],
        };
        this.scheduleReplenishmentFormData$ = new BehaviorSubject(this.defaultFormData);
        this.orderType$ = new BehaviorSubject(ORDER_TYPE.PLACE_ORDER);
        this.registerOrderTypeEventListers();
    }
    registerOrderTypeEventListers() {
        this.subscriptions.add(merge(this.eventService.get(CheckoutDeliveryAddressSetEvent), this.eventService.get(CheckoutDeliveryAddressClearedEvent), this.eventService.get(CheckoutDeliveryModeSetEvent), this.eventService.get(CheckoutDeliveryModeClearedEvent), this.eventService.get(CheckoutPaymentDetailsCreatedEvent), this.eventService.get(CheckoutPaymentDetailsSetEvent), this.eventService.get(LogoutEvent), this.eventService.get(LoginEvent), this.eventService.get(SaveCartSuccessEvent), this.eventService.get(RestoreSavedCartSuccessEvent), this.eventService.get(MergeCartSuccessEvent)).subscribe(() => {
            this.orderType$.next(ORDER_TYPE.PLACE_ORDER);
        }));
    }
    /**
     * Get replenishment form data
     */
    getScheduleReplenishmentFormData() {
        return this.scheduleReplenishmentFormData$;
    }
    /**
     * Set replenishment form data
     * @param formData : an object containing the data for scheduling a replenishment order
     */
    setScheduleReplenishmentFormData(formData) {
        this
            .scheduleReplenishmentFormData$.next(formData);
    }
    /**
     * Clears the existing replenishment form data to include the default replenishment form data
     */
    resetScheduleReplenishmentFormData() {
        this
            .scheduleReplenishmentFormData$.next(this.defaultFormData);
    }
    /**
     * Get current checkout order type
     */
    getOrderType() {
        return this.orderType$;
    }
    /**
     * Set checkout order type
     * @param orderType : an enum of types of order we are placing
     */
    setOrderType(orderType) {
        this.orderType$.next(orderType);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
CheckoutReplenishmentFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutReplenishmentFormService, deps: [{ token: i1.EventService }], target: i0.ɵɵFactoryTarget.Injectable });
CheckoutReplenishmentFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutReplenishmentFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutReplenishmentFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.EventService }]; } });
//# sourceMappingURL=data:application/json;base64,