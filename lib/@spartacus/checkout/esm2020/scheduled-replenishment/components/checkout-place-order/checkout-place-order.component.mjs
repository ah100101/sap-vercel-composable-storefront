/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { CheckoutPlaceOrderComponent } from '@spartacus/checkout/base/components';
import { ORDER_TYPE, recurrencePeriod, } from '@spartacus/order/root';
import { BehaviorSubject, merge, Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/order/root";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/forms";
import * as i4 from "@spartacus/storefront";
import * as i5 from "../services/checkout-replenishment-form.service";
import * as i6 from "@angular/router";
import * as i7 from "@angular/common";
export class CheckoutScheduledReplenishmentPlaceOrderComponent extends CheckoutPlaceOrderComponent {
    constructor(orderFacade, routingService, fb, launchDialogService, vcr, checkoutReplenishmentFormService, scheduledReplenishmentOrderFacade) {
        super(orderFacade, routingService, fb, launchDialogService, vcr);
        this.orderFacade = orderFacade;
        this.routingService = routingService;
        this.fb = fb;
        this.launchDialogService = launchDialogService;
        this.vcr = vcr;
        this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
        this.scheduledReplenishmentOrderFacade = scheduledReplenishmentOrderFacade;
        this.subscriptions = new Subscription();
        this.daysOfWeekNotChecked$ = new BehaviorSubject(false);
    }
    submitForm() {
        if (this.checkoutSubmitForm.valid && !!this.currentOrderType) {
            this.placedOrder = this.launchDialogService.launch("PLACE_ORDER_SPINNER" /* LAUNCH_CALLER.PLACE_ORDER_SPINNER */, this.vcr);
            merge(this.currentOrderType === ORDER_TYPE.PLACE_ORDER
                ? this.orderFacade.placeOrder(this.checkoutSubmitForm.valid)
                : this.scheduledReplenishmentOrderFacade.scheduleReplenishmentOrder(this.scheduleReplenishmentFormData, this.checkoutSubmitForm.valid)).subscribe({
                error: () => {
                    if (this.placedOrder) {
                        this.placedOrder
                            .subscribe((component) => {
                            this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* LAUNCH_CALLER.PLACE_ORDER_SPINNER */);
                            if (component) {
                                component.destroy();
                            }
                        })
                            .unsubscribe();
                    }
                },
                next: () => {
                    this.onSuccess();
                },
            });
        }
        else {
            this.checkoutSubmitForm.markAllAsTouched();
        }
    }
    ngOnInit() {
        this.subscriptions.add(this.checkoutReplenishmentFormService
            .getOrderType()
            .subscribe((orderType) => (this.currentOrderType = orderType)));
        this.subscriptions.add(this.checkoutReplenishmentFormService
            .getScheduleReplenishmentFormData()
            .subscribe((data) => {
            this.scheduleReplenishmentFormData = data;
            this.daysOfWeekNotChecked$.next(data.daysOfWeek?.length === 0 &&
                data.recurrencePeriod === recurrencePeriod.WEEKLY);
        }));
    }
    onSuccess() {
        switch (this.currentOrderType) {
            case ORDER_TYPE.PLACE_ORDER: {
                super.onSuccess();
                break;
            }
            case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                this.routingService.go({ cxRoute: 'replenishmentConfirmation' });
                break;
            }
        }
        this.checkoutReplenishmentFormService.resetScheduleReplenishmentFormData();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        super.ngOnDestroy();
    }
}
CheckoutScheduledReplenishmentPlaceOrderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutScheduledReplenishmentPlaceOrderComponent, deps: [{ token: i1.OrderFacade }, { token: i2.RoutingService }, { token: i3.UntypedFormBuilder }, { token: i4.LaunchDialogService }, { token: i0.ViewContainerRef }, { token: i5.CheckoutReplenishmentFormService }, { token: i1.ScheduledReplenishmentOrderFacade }], target: i0.ɵɵFactoryTarget.Component });
CheckoutScheduledReplenishmentPlaceOrderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: CheckoutScheduledReplenishmentPlaceOrderComponent, selector: "cx-place-order", usesInheritance: true, ngImport: i0, template: "<form class=\"cx-place-order-form form-check\" [formGroup]=\"checkoutSubmitForm\">\n  <div class=\"form-group\">\n    <label>\n      <input\n        formControlName=\"termsAndConditions\"\n        class=\"scaled-input form-check-input\"\n        type=\"checkbox\"\n      />\n      <span class=\"form-check-label\">\n        {{ 'checkoutReview.confirmThatRead' | cxTranslate }}\n        <a\n          [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n          class=\"cx-tc-link\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {{ 'checkoutReview.termsAndConditions' | cxTranslate }}\n        </a>\n      </span>\n    </label>\n  </div>\n\n  <button\n    (click)=\"submitForm()\"\n    class=\"btn btn-primary btn-block\"\n    [disabled]=\"termsAndConditionInvalid || (daysOfWeekNotChecked$ | async)\"\n    [cxAtMessage]=\"'checkoutReview.orderInProcess' | cxTranslate\"\n  >\n    {{ 'checkoutReview.placeOrder' | cxTranslate }}\n  </button>\n</form>\n", dependencies: [{ kind: "directive", type: i4.AtMessageDirective, selector: "[cxAtMessage]", inputs: ["cxAtMessage"] }, { kind: "directive", type: i6.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "pipe", type: i7.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.UrlPipe, name: "cxUrl" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutScheduledReplenishmentPlaceOrderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-place-order', changeDetection: ChangeDetectionStrategy.OnPush, template: "<form class=\"cx-place-order-form form-check\" [formGroup]=\"checkoutSubmitForm\">\n  <div class=\"form-group\">\n    <label>\n      <input\n        formControlName=\"termsAndConditions\"\n        class=\"scaled-input form-check-input\"\n        type=\"checkbox\"\n      />\n      <span class=\"form-check-label\">\n        {{ 'checkoutReview.confirmThatRead' | cxTranslate }}\n        <a\n          [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n          class=\"cx-tc-link\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {{ 'checkoutReview.termsAndConditions' | cxTranslate }}\n        </a>\n      </span>\n    </label>\n  </div>\n\n  <button\n    (click)=\"submitForm()\"\n    class=\"btn btn-primary btn-block\"\n    [disabled]=\"termsAndConditionInvalid || (daysOfWeekNotChecked$ | async)\"\n    [cxAtMessage]=\"'checkoutReview.orderInProcess' | cxTranslate\"\n  >\n    {{ 'checkoutReview.placeOrder' | cxTranslate }}\n  </button>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.OrderFacade }, { type: i2.RoutingService }, { type: i3.UntypedFormBuilder }, { type: i4.LaunchDialogService }, { type: i0.ViewContainerRef }, { type: i5.CheckoutReplenishmentFormService }, { type: i1.ScheduledReplenishmentOrderFacade }]; } });
//# sourceMappingURL=data:application/json;base64,