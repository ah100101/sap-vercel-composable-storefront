/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostBinding, } from '@angular/core';
import { combineLatest, Subscription } from 'rxjs';
import { distinctUntilChanged, filter, map, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/checkout/b2b/root";
import * as i3 from "@angular/common";
export class CheckoutCostCenterComponent {
    get disabled() {
        return !this.isAccountPayment;
    }
    constructor(userCostCenterService, checkoutCostCenterFacade, checkoutPaymentTypeFacade) {
        this.userCostCenterService = userCostCenterService;
        this.checkoutCostCenterFacade = checkoutCostCenterFacade;
        this.checkoutPaymentTypeFacade = checkoutPaymentTypeFacade;
        this.subscription = new Subscription();
        this.userCostCenters$ = this.userCostCenterService
            .getActiveCostCenters()
            .pipe(filter((costCenters) => !!costCenters));
    }
    ngOnInit() {
        this.subscription.add(this.checkoutPaymentTypeFacade
            .isAccountPayment()
            .pipe(distinctUntilChanged())
            .subscribe((isAccountPayment) => {
            this.isAccountPayment = isAccountPayment;
        }));
        this.costCenters$ = combineLatest([
            this.userCostCenters$,
            this.checkoutCostCenterFacade.getCostCenterState().pipe(filter((state) => !state.loading), map((state) => state.data), distinctUntilChanged()),
        ]).pipe(take(1), tap(([costCenters, costCenter]) => {
            if (!costCenter) {
                this.setCostCenter(costCenters[0].code);
            }
            else {
                this.costCenterId = costCenter.code;
            }
        }), map(([costCenters]) => costCenters));
    }
    setCostCenter(selectCostCenter) {
        this.costCenterId = selectCostCenter;
        this.checkoutCostCenterFacade.setCostCenter(this.costCenterId);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
CheckoutCostCenterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutCostCenterComponent, deps: [{ token: i1.UserCostCenterService }, { token: i2.CheckoutCostCenterFacade }, { token: i2.CheckoutPaymentTypeFacade }], target: i0.ɵɵFactoryTarget.Component });
CheckoutCostCenterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: CheckoutCostCenterComponent, selector: "cx-cost-center", host: { properties: { "class.hidden": "this.disabled" } }, ngImport: i0, template: "<ng-container *ngIf=\"isAccountPayment\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-xl-10\">\n      <ng-container *ngIf=\"costCenters$ | async as costCenters\">\n        <div *ngIf=\"costCenters.length !== 0\">\n          <label>\n            <span class=\"label-content required\">{{\n              'checkoutB2B.costCenter' | cxTranslate\n            }}</span>\n            <select (change)=\"setCostCenter($event.target.value)\">\n              <option\n                *ngFor=\"let costCenter of costCenters\"\n                value=\"{{ costCenter.code }}\"\n                [selected]=\"costCenterId === costCenter.code\"\n              >\n                {{ costCenter.name }}\n              </option>\n            </select>\n            <span class=\"label-content\">{{\n              'checkoutB2B.availableLabel' | cxTranslate\n            }}</span>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CheckoutCostCenterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-cost-center', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"isAccountPayment\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-xl-10\">\n      <ng-container *ngIf=\"costCenters$ | async as costCenters\">\n        <div *ngIf=\"costCenters.length !== 0\">\n          <label>\n            <span class=\"label-content required\">{{\n              'checkoutB2B.costCenter' | cxTranslate\n            }}</span>\n            <select (change)=\"setCostCenter($event.target.value)\">\n              <option\n                *ngFor=\"let costCenter of costCenters\"\n                value=\"{{ costCenter.code }}\"\n                [selected]=\"costCenterId === costCenter.code\"\n              >\n                {{ costCenter.name }}\n              </option>\n            </select>\n            <span class=\"label-content\">{{\n              'checkoutB2B.availableLabel' | cxTranslate\n            }}</span>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserCostCenterService }, { type: i2.CheckoutCostCenterFacade }, { type: i2.CheckoutPaymentTypeFacade }]; }, propDecorators: { disabled: [{
                type: HostBinding,
                args: ['class.hidden']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQtY29zdC1jZW50ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2NoZWNrb3V0L2IyYi9jb21wb25lbnRzL2NoZWNrb3V0LWNvc3QtY2VudGVyL2NoZWNrb3V0LWNvc3QtY2VudGVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9jaGVja291dC9iMmIvY29tcG9uZW50cy9jaGVja291dC1jb3N0LWNlbnRlci9jaGVja291dC1jb3N0LWNlbnRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFBRSxhQUFhLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFPOUUsTUFBTSxPQUFPLDJCQUEyQjtJQVd0QyxJQUNJLFFBQVE7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2hDLENBQUM7SUFFRCxZQUNZLHFCQUE0QyxFQUM1Qyx3QkFBa0QsRUFDbEQseUJBQW9EO1FBRnBELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBbEJ0RCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMscUJBQWdCLEdBQ3hCLElBQUksQ0FBQyxxQkFBcUI7YUFDdkIsb0JBQW9CLEVBQUU7YUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFlL0MsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsSUFBSSxDQUFDLHlCQUF5QjthQUMzQixnQkFBZ0IsRUFBRTthQUNsQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzthQUM1QixTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FDTCxDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUM7WUFDaEMsSUFBSSxDQUFDLGdCQUFnQjtZQUNyQixJQUFJLENBQUMsd0JBQXdCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLENBQ3JELE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQ2pDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUMxQixvQkFBb0IsRUFBRSxDQUN2QjtTQUNGLENBQUMsQ0FBQyxJQUFJLENBQ0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDZixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFjLENBQUMsQ0FBQzthQUNuRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7YUFDckM7UUFDSCxDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FDcEMsQ0FBQztJQUNKLENBQUM7SUFFRCxhQUFhLENBQUMsZ0JBQXdCO1FBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUM7UUFDckMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7O3dIQTNEVSwyQkFBMkI7NEdBQTNCLDJCQUEyQixpSEMxQnhDLDQ4QkEyQkE7MkZERGEsMkJBQTJCO2tCQUx2QyxTQUFTOytCQUNFLGdCQUFnQixtQkFFVCx1QkFBdUIsQ0FBQyxNQUFNOzJMQWMzQyxRQUFRO3NCQURYLFdBQVc7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDaGVja291dENvc3RDZW50ZXJGYWNhZGUsXG4gIENoZWNrb3V0UGF5bWVudFR5cGVGYWNhZGUsXG59IGZyb20gJ0BzcGFydGFjdXMvY2hlY2tvdXQvYjJiL3Jvb3QnO1xuaW1wb3J0IHsgQ29zdENlbnRlciwgVXNlckNvc3RDZW50ZXJTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwLCB0YWtlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LWNvc3QtY2VudGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrb3V0LWNvc3QtY2VudGVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrb3V0Q29zdENlbnRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgcHJvdGVjdGVkIHVzZXJDb3N0Q2VudGVycyQ6IE9ic2VydmFibGU8Q29zdENlbnRlcltdPiA9XG4gICAgdGhpcy51c2VyQ29zdENlbnRlclNlcnZpY2VcbiAgICAgIC5nZXRBY3RpdmVDb3N0Q2VudGVycygpXG4gICAgICAucGlwZShmaWx0ZXIoKGNvc3RDZW50ZXJzKSA9PiAhIWNvc3RDZW50ZXJzKSk7XG5cbiAgY29zdENlbnRlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGNvc3RDZW50ZXJzJDogT2JzZXJ2YWJsZTxDb3N0Q2VudGVyW10+O1xuICBpc0FjY291bnRQYXltZW50OiBib29sZWFuO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuaGlkZGVuJylcbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiAhdGhpcy5pc0FjY291bnRQYXltZW50O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVzZXJDb3N0Q2VudGVyU2VydmljZTogVXNlckNvc3RDZW50ZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjaGVja291dENvc3RDZW50ZXJGYWNhZGU6IENoZWNrb3V0Q29zdENlbnRlckZhY2FkZSxcbiAgICBwcm90ZWN0ZWQgY2hlY2tvdXRQYXltZW50VHlwZUZhY2FkZTogQ2hlY2tvdXRQYXltZW50VHlwZUZhY2FkZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgdGhpcy5jaGVja291dFBheW1lbnRUeXBlRmFjYWRlXG4gICAgICAgIC5pc0FjY291bnRQYXltZW50KClcbiAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcbiAgICAgICAgLnN1YnNjcmliZSgoaXNBY2NvdW50UGF5bWVudCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNBY2NvdW50UGF5bWVudCA9IGlzQWNjb3VudFBheW1lbnQ7XG4gICAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuY29zdENlbnRlcnMkID0gY29tYmluZUxhdGVzdChbXG4gICAgICB0aGlzLnVzZXJDb3N0Q2VudGVycyQsXG4gICAgICB0aGlzLmNoZWNrb3V0Q29zdENlbnRlckZhY2FkZS5nZXRDb3N0Q2VudGVyU3RhdGUoKS5waXBlKFxuICAgICAgICBmaWx0ZXIoKHN0YXRlKSA9PiAhc3RhdGUubG9hZGluZyksXG4gICAgICAgIG1hcCgoc3RhdGUpID0+IHN0YXRlLmRhdGEpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgICApLFxuICAgIF0pLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgdGFwKChbY29zdENlbnRlcnMsIGNvc3RDZW50ZXJdKSA9PiB7XG4gICAgICAgIGlmICghY29zdENlbnRlcikge1xuICAgICAgICAgIHRoaXMuc2V0Q29zdENlbnRlcihjb3N0Q2VudGVyc1swXS5jb2RlIGFzIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb3N0Q2VudGVySWQgPSBjb3N0Q2VudGVyLmNvZGU7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgbWFwKChbY29zdENlbnRlcnNdKSA9PiBjb3N0Q2VudGVycylcbiAgICApO1xuICB9XG5cbiAgc2V0Q29zdENlbnRlcihzZWxlY3RDb3N0Q2VudGVyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNvc3RDZW50ZXJJZCA9IHNlbGVjdENvc3RDZW50ZXI7XG4gICAgdGhpcy5jaGVja291dENvc3RDZW50ZXJGYWNhZGUuc2V0Q29zdENlbnRlcih0aGlzLmNvc3RDZW50ZXJJZCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiaXNBY2NvdW50UGF5bWVudFwiPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wteGwtMTBcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb3N0Q2VudGVycyQgfCBhc3luYyBhcyBjb3N0Q2VudGVyc1wiPlxuICAgICAgICA8ZGl2ICpuZ0lmPVwiY29zdENlbnRlcnMubGVuZ3RoICE9PSAwXCI+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50IHJlcXVpcmVkXCI+e3tcbiAgICAgICAgICAgICAgJ2NoZWNrb3V0QjJCLmNvc3RDZW50ZXInIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgICAgIH19PC9zcGFuPlxuICAgICAgICAgICAgPHNlbGVjdCAoY2hhbmdlKT1cInNldENvc3RDZW50ZXIoJGV2ZW50LnRhcmdldC52YWx1ZSlcIj5cbiAgICAgICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgICAgICpuZ0Zvcj1cImxldCBjb3N0Q2VudGVyIG9mIGNvc3RDZW50ZXJzXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT1cInt7IGNvc3RDZW50ZXIuY29kZSB9fVwiXG4gICAgICAgICAgICAgICAgW3NlbGVjdGVkXT1cImNvc3RDZW50ZXJJZCA9PT0gY29zdENlbnRlci5jb2RlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt7IGNvc3RDZW50ZXIubmFtZSB9fVxuICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50XCI+e3tcbiAgICAgICAgICAgICAgJ2NoZWNrb3V0QjJCLmF2YWlsYWJsZUxhYmVsJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctY29udGFpbmVyPlxuIl19