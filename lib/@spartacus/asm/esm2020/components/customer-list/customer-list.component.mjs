/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component } from '@angular/core';
import { BREAKPOINT, ICON_TYPE, } from '@spartacus/storefront';
import { combineLatest, NEVER, Subscription } from 'rxjs';
import { distinctUntilChanged, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/asm/root";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "@ng-select/ng-select";
export class CustomerListComponent {
    constructor(launchDialogService, breakpointService, asmConfig, translation, asmCustomerListFacade) {
        this.launchDialogService = launchDialogService;
        this.breakpointService = breakpointService;
        this.asmConfig = asmConfig;
        this.translation = translation;
        this.asmCustomerListFacade = asmCustomerListFacade;
        this.DEFAULT_PAGE_SIZE = 5;
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: 'customer-list-selector',
            focusOnEscape: true,
        };
        this.iconTypes = ICON_TYPE;
        this.BREAKPOINT = BREAKPOINT;
        this.currentPage = 0;
        this.maxPage = 0;
        this.loaded = false;
        this.listsError = false;
        this.listsEmpty = false;
        this.teardown = new Subscription();
        this.breakpoint$ = this.getBreakpoint();
    }
    ngOnInit() {
        this.pageSize =
            this.asmConfig.asm?.customerList?.pageSize ?? this.DEFAULT_PAGE_SIZE;
        this.customerListConfig = this.asmConfig?.asm?.customerList;
        this.customerListsPage$ =
            this.asmCustomerListFacade.getCustomerListsState().pipe(tap((state) => (this.listsError = !!state.error)), map((state) => {
                if (state?.data?.userGroups?.length === 0) {
                    this.listsEmpty = true;
                    return undefined;
                }
                else {
                    return state.data;
                }
            }), distinctUntilChanged(), tap((result) => {
                // set the first value of this.customerListsPage$ to be selected
                if (!this.selectedUserGroupId) {
                    this.selectedUserGroupId = result?.userGroups?.[0]?.uid;
                    this.sorts = null;
                    this.fetchCustomers();
                }
            })) ?? NEVER;
        this.customerSearchLoading$ = this.asmCustomerListFacade
            .getCustomerListCustomersSearchResultsLoading()
            .pipe(tap((loading) => (this.loaded = !loading)));
        this.teardown.add(this.customerSearchLoading$.subscribe());
        this.teardown.add(() => this.asmCustomerListFacade.customerListCustomersSearchReset());
        this.customerSearchError$ =
            this.asmCustomerListFacade.getCustomerListCustomersSearchResultsError();
        this.customerSearchPage$ = this.asmCustomerListFacade
            .getCustomerListCustomersSearchResults()
            .pipe(tap((result) => {
            if (result?.sorts) {
                this.sorts = result.sorts;
                this.sortCode = result.pagination?.sort;
            }
            if (result?.entries.length < this.pageSize) {
                this.maxPage = result.pagination?.currentPage ?? 0;
            }
            else {
                this.maxPage = this.currentPage + 1;
            }
        }));
    }
    ngOnDestroy() {
        this.teardown.unsubscribe();
    }
    fetchCustomers() {
        if (this.selectedUserGroupId) {
            const options = {
                customerListId: this.selectedUserGroupId,
                pageSize: this.pageSize,
                currentPage: this.currentPage,
            };
            if (this.sortCode) {
                options.sort = this.sortCode;
            }
            this.asmCustomerListFacade.customerListCustomersSearchReset();
            this.asmCustomerListFacade.customerListCustomersSearch(options);
        }
    }
    onChangeCustomerGroup() {
        this.currentPage = 0;
        this.sorts = null;
        this.sortCode = '';
        this.fetchCustomers();
    }
    getGroupName(customerListsPage, id) {
        return (customerListsPage?.userGroups?.find((userGroup) => userGroup.uid === id)
            ?.name ?? '');
    }
    getBadgeText(customerEntry) {
        return ((customerEntry.firstName?.charAt(0) ?? '') +
            (customerEntry.lastName?.charAt(0) ?? ''));
    }
    startColumnAction(customerEntry, action) {
        this.selectedCustomer = customerEntry;
        const closeValue = {
            actionType: action,
            selectedUser: customerEntry,
        };
        this.closeModal(closeValue);
    }
    changeSortCode(sortCode) {
        this.sortCode = sortCode;
        this.fetchCustomers();
    }
    goToNextPage() {
        if (this.currentPage >= this.maxPage) {
            this.currentPage = this.maxPage;
        }
        else {
            if (this.loaded) {
                this.currentPage++;
                this.fetchCustomers();
            }
        }
    }
    goToPreviousPage() {
        if (this.currentPage <= 0) {
            this.currentPage = 0;
        }
        else {
            if (this.loaded) {
                this.currentPage--;
                this.fetchCustomers();
            }
        }
    }
    closeModal(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    getSortLabels() {
        return combineLatest([
            this.translation.translate('asm.customerList.tableSort.byNameAsc'),
            this.translation.translate('asm.customerList.tableSort.byNameDesc'),
            this.translation.translate('asm.customerList.tableSort.byDateAsc'),
            this.translation.translate('asm.customerList.tableSort.byDateDesc'),
            this.translation.translate('asm.customerList.tableSort.byOrderDateAsc'),
            this.translation.translate('asm.customerList.tableSort.byOrderDateDesc'),
        ]).pipe(map(([textByNameAsc, textByNameDesc, textByOrderDateAsc, textByOrderDateDesc, textByDateAsc, textByDateDesc,]) => {
            return {
                byNameAsc: textByNameAsc,
                byNameDesc: textByNameDesc,
                byOrderDateAsc: textByOrderDateAsc,
                byOrderDateDesc: textByOrderDateDesc,
                byDateAsc: textByDateAsc,
                byDateDesc: textByDateDesc,
            };
        }));
    }
    getBreakpoint() {
        return this.breakpointService.breakpoint$.pipe(map((breakpoint) => {
            if (breakpoint === BREAKPOINT.lg || breakpoint === BREAKPOINT.xl) {
                breakpoint = BREAKPOINT.md;
            }
            return breakpoint;
        }));
    }
}
CustomerListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CustomerListComponent, deps: [{ token: i1.LaunchDialogService }, { token: i1.BreakpointService }, { token: i2.AsmConfig }, { token: i3.TranslationService }, { token: i2.AsmCustomerListFacade }], target: i0.ɵɵFactoryTarget.Component });
CustomerListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: CustomerListComponent, selector: "cx-customer-list", ngImport: i0, template: "<div\n  class=\"cx-asm-customer-list cx-modal-container cx-asm-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"closeModal('Escape clicked')\"\n>\n  <div class=\"cx-modal-content\">\n    <!-- Modal Header -->\n    <ng-container>\n      <div class=\"cx-dialog-header modal-header\">\n        <h2 id=\"asm-customer-list-title\" class=\"title modal-title\">\n          {{ 'asm.customerList.title' | cxTranslate }}\n        </h2>\n        <div id=\"asm-customer-list-desc\" class=\"cx-visually-hidden\">\n          {{ 'asm.customerList.description' | cxTranslate }}\n        </div>\n        <ng-template *ngTemplateOutlet=\"closeButton\"></ng-template>\n      </div>\n      <div\n        class=\"cx-dialog-sub-header modal-header\"\n        [class.tablet-mobile]=\"(breakpoint$ | async) !== BREAKPOINT.md\"\n        *ngIf=\"customerListsPage$ | async as customerListsPage\"\n      >\n        <ng-template\n          *ngTemplateOutlet=\"\n            groupSelector;\n            context: { customerListsPage: customerListsPage }\n          \"\n        ></ng-template>\n        <div\n          class=\"cx-header-actions\"\n          [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n        >\n          <ng-template *ngTemplateOutlet=\"sort\"></ng-template>\n          <ng-template *ngTemplateOutlet=\"pagination\"></ng-template>\n        </div>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"cx-dialog-item\">\n            <div *ngIf=\"listsEmpty\" class=\"cx-error-state\">\n              {{ 'asm.customerList.noLists' | cxTranslate }}\n            </div>\n            <div *ngIf=\"listsError\" class=\"cx-error-state\">\n              {{ 'asm.customerList.listsError' | cxTranslate }}\n            </div>\n            <div *ngIf=\"customerSearchError$ | async\" class=\"cx-error-state\">\n              {{ 'generalErrors.pageFailure' | cxTranslate }}\n            </div>\n            <cx-spinner *ngIf=\"customerSearchLoading$ | async\"></cx-spinner>\n            <div *ngIf=\"customerSearchPage$ | async as customerSearchPage\">\n              <table id=\"asm-cusomer-list-table\" role=\"table\" class=\"table\">\n                <caption class=\"cx-visually-hidden\">\n                  {{\n                    'asm.customerList.title' | cxTranslate\n                  }}\n                </caption>\n                <thead *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\">\n                  <tr role=\"row\">\n                    <th\n                      role=\"columnheader\"\n                      class=\"cx-avatar-cell\"\n                      *ngIf=\"customerListConfig?.showAvatar\"\n                    >\n                      <span class=\"cx-visually-hidden\">\n                        {{\n                          'asm.customerList.tableHeader.customer' | cxTranslate\n                        }}\n                      </span>\n                    </th>\n                    <th\n                      role=\"columnheader\"\n                      *ngFor=\"let column of customerListConfig?.columns\"\n                    >\n                      <span *ngIf=\"column.headerLocalizationKey\">{{\n                        column.headerLocalizationKey | cxTranslate\n                      }}</span>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    role=\"row\"\n                    *ngFor=\"let customerEntry of customerSearchPage?.entries\"\n                  >\n                    <td\n                      role=\"cell\"\n                      *ngIf=\"customerListConfig?.showAvatar\"\n                      class=\"cx-avatar-cell\"\n                    >\n                      <div class=\"cx-avatar\">\n                        {{ getBadgeText(customerEntry) }}\n                      </div>\n                    </td>\n                    <!-- multi columns if desktop -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\"\n                    >\n                      <td\n                        role=\"cell\"\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: false\n                            }\n                          \"\n                        ></ng-template>\n                      </td>\n                    </ng-container>\n                    <!-- two column if tablet -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.sm\"\n                    >\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let even = even\n                          \"\n                        >\n                          <ng-container *ngIf=\"even\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let odd = odd\n                          \"\n                        >\n                          <ng-container *ngIf=\"odd\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                    <!-- one column if mobile -->\n                    <td\n                      role=\"cell\"\n                      class=\"cx-multi-cell\"\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n                    >\n                      <ng-container\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: true\n                            }\n                          \"\n                        ></ng-template>\n                      </ng-container>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div\n                class=\"cx-empty-state\"\n                *ngIf=\"!customerSearchPage?.entries.length\"\n              >\n                {{ 'asm.customerList.noCustomers' | cxTranslate }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template\n  #cell\n  let-customerEntry=\"customerEntry\"\n  let-column=\"column\"\n  let-showHeader=\"showHeader\"\n>\n  <div class=\"cx-cell-container\">\n    <span class=\"cx-header-text\" *ngIf=\"showHeader\">\n      {{ column.headerLocalizationKey | cxTranslate }}\n    </span>\n\n    <ng-container *ngIf=\"!column.actionType\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </ng-container>\n\n    <button\n      *ngIf=\"column.actionType\"\n      (click)=\"startColumnAction(customerEntry, column.actionType)\"\n      class=\"btn btn-link cx-action-link cx-btn-cell\"\n      [attr.title]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n      [attr.aria-label]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </button>\n  </div>\n</ng-template>\n<ng-template #cellContent let-customerEntry=\"customerEntry\" let-column=\"column\">\n  <span *ngIf=\"!column.icon\">{{\n    column.renderer?.(customerEntry) || ''\n  }}</span>\n  <cx-icon\n    *ngIf=\"column.icon\"\n    [attr.title]=\"\n      !column.actionType\n        ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n          | cxTranslate)\n        : undefined\n    \"\n    [class.cx-action-color]=\"column.actionType\"\n    [type]=\"column.icon.symbol\"\n    [attr.aria-label]=\"\n      !column.actionType\n        ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n          | cxTranslate)\n        : undefined\n    \"\n  ></cx-icon>\n</ng-template>\n\n<ng-template #sort>\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.tableSort.sortBy' | cxTranslate\n    }}</span>\n    <cx-sorting\n      class=\"sort-selector\"\n      [sortOptions]=\"sorts\"\n      [sortLabels]=\"getSortLabels() | async\"\n      (sortListEvent)=\"changeSortCode($event)\"\n      [selectedOption]=\"sortCode\"\n      placeholder=\"{{ 'asm.customerList.tableSort.sortBy' | cxTranslate }}\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: sortCode,\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    ></cx-sorting>\n  </label>\n</ng-template>\n\n<ng-template #pagination>\n  <div class=\"cx-pagination-buttons\">\n    <div>\n      {{\n        'asm.customerList.page.page' | cxTranslate: { count: currentPage + 1 }\n      }}\n    </div>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToPreviousPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-previous\"\n      [disabled]=\"currentPage === 0 || !loaded\"\n    >\n      <cx-icon class=\"previous\" [type]=\"iconTypes.CARET_LEFT\"></cx-icon\n      ><span>{{ 'asm.customerList.page.previous' | cxTranslate }}</span>\n    </button>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToNextPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-next\"\n      [disabled]=\"currentPage === maxPage || !loaded\"\n    >\n      <span>{{ 'asm.customerList.page.next' | cxTranslate }}</span\n      ><cx-icon class=\"next\" [type]=\"iconTypes.CARET_RIGHT\"></cx-icon>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #groupSelector let-customerListsPage=\"customerListsPage\">\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.title' | cxTranslate\n    }}</span>\n    <ng-select\n      class=\"customer-list-selector\"\n      [searchable]=\"false\"\n      [clearable]=\"false\"\n      (change)=\"onChangeCustomerGroup()\"\n      [tabIndex]=\"0\"\n      [(ngModel)]=\"selectedUserGroupId\"\n      [items]=\"customerListsPage?.userGroups\"\n      bindLabel=\"name\"\n      bindValue=\"uid\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: getGroupName(customerListsPage, selectedUserGroupId),\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    >\n    </ng-select>\n  </label>\n</ng-template>\n\n<ng-template #closeButton>\n  <button\n    type=\"button\"\n    class=\"close\"\n    attr.aria-label=\"{{ 'common.close' | cxTranslate }}\"\n    (click)=\"closeModal('Cross click')\"\n  >\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "component", type: i1.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.SpinnerComponent, selector: "cx-spinner" }, { kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i1.NgSelectA11yDirective, selector: "[cxNgSelectA11y]", inputs: ["cxNgSelectA11y"] }, { kind: "component", type: i1.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "ariaControls", "ariaLabel", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: CustomerListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-customer-list', template: "<div\n  class=\"cx-asm-customer-list cx-modal-container cx-asm-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"closeModal('Escape clicked')\"\n>\n  <div class=\"cx-modal-content\">\n    <!-- Modal Header -->\n    <ng-container>\n      <div class=\"cx-dialog-header modal-header\">\n        <h2 id=\"asm-customer-list-title\" class=\"title modal-title\">\n          {{ 'asm.customerList.title' | cxTranslate }}\n        </h2>\n        <div id=\"asm-customer-list-desc\" class=\"cx-visually-hidden\">\n          {{ 'asm.customerList.description' | cxTranslate }}\n        </div>\n        <ng-template *ngTemplateOutlet=\"closeButton\"></ng-template>\n      </div>\n      <div\n        class=\"cx-dialog-sub-header modal-header\"\n        [class.tablet-mobile]=\"(breakpoint$ | async) !== BREAKPOINT.md\"\n        *ngIf=\"customerListsPage$ | async as customerListsPage\"\n      >\n        <ng-template\n          *ngTemplateOutlet=\"\n            groupSelector;\n            context: { customerListsPage: customerListsPage }\n          \"\n        ></ng-template>\n        <div\n          class=\"cx-header-actions\"\n          [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n        >\n          <ng-template *ngTemplateOutlet=\"sort\"></ng-template>\n          <ng-template *ngTemplateOutlet=\"pagination\"></ng-template>\n        </div>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"cx-dialog-item\">\n            <div *ngIf=\"listsEmpty\" class=\"cx-error-state\">\n              {{ 'asm.customerList.noLists' | cxTranslate }}\n            </div>\n            <div *ngIf=\"listsError\" class=\"cx-error-state\">\n              {{ 'asm.customerList.listsError' | cxTranslate }}\n            </div>\n            <div *ngIf=\"customerSearchError$ | async\" class=\"cx-error-state\">\n              {{ 'generalErrors.pageFailure' | cxTranslate }}\n            </div>\n            <cx-spinner *ngIf=\"customerSearchLoading$ | async\"></cx-spinner>\n            <div *ngIf=\"customerSearchPage$ | async as customerSearchPage\">\n              <table id=\"asm-cusomer-list-table\" role=\"table\" class=\"table\">\n                <caption class=\"cx-visually-hidden\">\n                  {{\n                    'asm.customerList.title' | cxTranslate\n                  }}\n                </caption>\n                <thead *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\">\n                  <tr role=\"row\">\n                    <th\n                      role=\"columnheader\"\n                      class=\"cx-avatar-cell\"\n                      *ngIf=\"customerListConfig?.showAvatar\"\n                    >\n                      <span class=\"cx-visually-hidden\">\n                        {{\n                          'asm.customerList.tableHeader.customer' | cxTranslate\n                        }}\n                      </span>\n                    </th>\n                    <th\n                      role=\"columnheader\"\n                      *ngFor=\"let column of customerListConfig?.columns\"\n                    >\n                      <span *ngIf=\"column.headerLocalizationKey\">{{\n                        column.headerLocalizationKey | cxTranslate\n                      }}</span>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    role=\"row\"\n                    *ngFor=\"let customerEntry of customerSearchPage?.entries\"\n                  >\n                    <td\n                      role=\"cell\"\n                      *ngIf=\"customerListConfig?.showAvatar\"\n                      class=\"cx-avatar-cell\"\n                    >\n                      <div class=\"cx-avatar\">\n                        {{ getBadgeText(customerEntry) }}\n                      </div>\n                    </td>\n                    <!-- multi columns if desktop -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\"\n                    >\n                      <td\n                        role=\"cell\"\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: false\n                            }\n                          \"\n                        ></ng-template>\n                      </td>\n                    </ng-container>\n                    <!-- two column if tablet -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.sm\"\n                    >\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let even = even\n                          \"\n                        >\n                          <ng-container *ngIf=\"even\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let odd = odd\n                          \"\n                        >\n                          <ng-container *ngIf=\"odd\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                    <!-- one column if mobile -->\n                    <td\n                      role=\"cell\"\n                      class=\"cx-multi-cell\"\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n                    >\n                      <ng-container\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: true\n                            }\n                          \"\n                        ></ng-template>\n                      </ng-container>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div\n                class=\"cx-empty-state\"\n                *ngIf=\"!customerSearchPage?.entries.length\"\n              >\n                {{ 'asm.customerList.noCustomers' | cxTranslate }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template\n  #cell\n  let-customerEntry=\"customerEntry\"\n  let-column=\"column\"\n  let-showHeader=\"showHeader\"\n>\n  <div class=\"cx-cell-container\">\n    <span class=\"cx-header-text\" *ngIf=\"showHeader\">\n      {{ column.headerLocalizationKey | cxTranslate }}\n    </span>\n\n    <ng-container *ngIf=\"!column.actionType\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </ng-container>\n\n    <button\n      *ngIf=\"column.actionType\"\n      (click)=\"startColumnAction(customerEntry, column.actionType)\"\n      class=\"btn btn-link cx-action-link cx-btn-cell\"\n      [attr.title]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n      [attr.aria-label]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </button>\n  </div>\n</ng-template>\n<ng-template #cellContent let-customerEntry=\"customerEntry\" let-column=\"column\">\n  <span *ngIf=\"!column.icon\">{{\n    column.renderer?.(customerEntry) || ''\n  }}</span>\n  <cx-icon\n    *ngIf=\"column.icon\"\n    [attr.title]=\"\n      !column.actionType\n        ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n          | cxTranslate)\n        : undefined\n    \"\n    [class.cx-action-color]=\"column.actionType\"\n    [type]=\"column.icon.symbol\"\n    [attr.aria-label]=\"\n      !column.actionType\n        ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n          | cxTranslate)\n        : undefined\n    \"\n  ></cx-icon>\n</ng-template>\n\n<ng-template #sort>\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.tableSort.sortBy' | cxTranslate\n    }}</span>\n    <cx-sorting\n      class=\"sort-selector\"\n      [sortOptions]=\"sorts\"\n      [sortLabels]=\"getSortLabels() | async\"\n      (sortListEvent)=\"changeSortCode($event)\"\n      [selectedOption]=\"sortCode\"\n      placeholder=\"{{ 'asm.customerList.tableSort.sortBy' | cxTranslate }}\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: sortCode,\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    ></cx-sorting>\n  </label>\n</ng-template>\n\n<ng-template #pagination>\n  <div class=\"cx-pagination-buttons\">\n    <div>\n      {{\n        'asm.customerList.page.page' | cxTranslate: { count: currentPage + 1 }\n      }}\n    </div>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToPreviousPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-previous\"\n      [disabled]=\"currentPage === 0 || !loaded\"\n    >\n      <cx-icon class=\"previous\" [type]=\"iconTypes.CARET_LEFT\"></cx-icon\n      ><span>{{ 'asm.customerList.page.previous' | cxTranslate }}</span>\n    </button>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToNextPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-next\"\n      [disabled]=\"currentPage === maxPage || !loaded\"\n    >\n      <span>{{ 'asm.customerList.page.next' | cxTranslate }}</span\n      ><cx-icon class=\"next\" [type]=\"iconTypes.CARET_RIGHT\"></cx-icon>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #groupSelector let-customerListsPage=\"customerListsPage\">\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.title' | cxTranslate\n    }}</span>\n    <ng-select\n      class=\"customer-list-selector\"\n      [searchable]=\"false\"\n      [clearable]=\"false\"\n      (change)=\"onChangeCustomerGroup()\"\n      [tabIndex]=\"0\"\n      [(ngModel)]=\"selectedUserGroupId\"\n      [items]=\"customerListsPage?.userGroups\"\n      bindLabel=\"name\"\n      bindValue=\"uid\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: getGroupName(customerListsPage, selectedUserGroupId),\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    >\n    </ng-select>\n  </label>\n</ng-template>\n\n<ng-template #closeButton>\n  <button\n    type=\"button\"\n    class=\"close\"\n    attr.aria-label=\"{{ 'common.close' | cxTranslate }}\"\n    (click)=\"closeModal('Cross click')\"\n  >\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i1.BreakpointService }, { type: i2.AsmConfig }, { type: i3.TranslationService }, { type: i2.AsmCustomerListFacade }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXItbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvYXNtL2NvbXBvbmVudHMvY3VzdG9tZXItbGlzdC9jdXN0b21lci1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9hc20vY29tcG9uZW50cy9jdXN0b21lci1saXN0L2N1c3RvbWVyLWxpc3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBVTdELE9BQU8sRUFDTCxVQUFVLEVBR1YsU0FBUyxHQUVWLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7O0FBT2hFLE1BQU0sT0FBTyxxQkFBcUI7SUFnRGhDLFlBQ1ksbUJBQXdDLEVBQ3hDLGlCQUFvQyxFQUNwQyxTQUFvQixFQUNwQixXQUErQixFQUMvQixxQkFBNEM7UUFKNUMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFwRDlDLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUVoQyxnQkFBVyxHQUFnQjtZQUN6QixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1lBQ1gsU0FBUyxFQUFFLHdCQUF3QjtZQUNuQyxhQUFhLEVBQUUsSUFBSTtTQUNwQixDQUFDO1FBRUYsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUV0QixlQUFVLEdBQUcsVUFBVSxDQUFDO1FBVXhCLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFFWixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBZ0JmLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFbkIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVULGFBQVEsR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVNwRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRO1lBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDdkUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQztRQUU1RCxJQUFJLENBQUMsa0JBQWtCO1lBQ3JCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQUksQ0FDckQsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNqRCxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDWixJQUFJLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO29CQUN2QixPQUFPLFNBQVMsQ0FBQztpQkFDbEI7cUJBQU07b0JBQ0wsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQyxFQUNGLG9CQUFvQixFQUFFLEVBQ3RCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUNiLGdFQUFnRTtnQkFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7b0JBQ3hELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO29CQUNsQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBQ3ZCO1lBQ0gsQ0FBQyxDQUFDLENBQ0gsSUFBSSxLQUFLLENBQUM7UUFFYixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQjthQUNyRCw0Q0FBNEMsRUFBRTthQUM5QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQ3JCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUM5RCxDQUFDO1FBRUYsSUFBSSxDQUFDLG9CQUFvQjtZQUN2QixJQUFJLENBQUMscUJBQXFCLENBQUMsMENBQTBDLEVBQUUsQ0FBQztRQUUxRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHFCQUFxQjthQUNsRCxxQ0FBcUMsRUFBRTthQUN2QyxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDYixJQUFJLE1BQU0sRUFBRSxLQUFLLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQzthQUN6QztZQUNELElBQUksTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLFdBQVcsSUFBSSxDQUFDLENBQUM7YUFDcEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQzthQUNyQztRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM1QixNQUFNLE9BQU8sR0FBMEI7Z0JBQ3JDLGNBQWMsRUFBRSxJQUFJLENBQUMsbUJBQW1CO2dCQUN4QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVzthQUM5QixDQUFDO1lBQ0YsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDOUI7WUFFRCxJQUFJLENBQUMscUJBQXFCLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztZQUU5RCxJQUFJLENBQUMscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDO0lBRUQscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsWUFBWSxDQUNWLGlCQUFvQyxFQUNwQyxFQUFzQjtRQUV0QixPQUFPLENBQ0wsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7WUFDdEUsRUFBRSxJQUFJLElBQUksRUFBRSxDQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsWUFBWSxDQUFDLGFBQW1CO1FBQzlCLE9BQU8sQ0FDTCxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUMxQyxDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUNmLGFBQW1CLEVBQ25CLE1BQW9DO1FBRXBDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUM7UUFDdEMsTUFBTSxVQUFVLEdBQXVCO1lBQ3JDLFVBQVUsRUFBRSxNQUFNO1lBQ2xCLFlBQVksRUFBRSxhQUFhO1NBQzVCLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxjQUFjLENBQUMsUUFBZ0I7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ2pDO2FBQU07WUFDTCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNuQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7U0FDRjtJQUNILENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNuQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7U0FDRjtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsTUFBWTtRQUNyQixJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxhQUFhO1FBUVgsT0FBTyxhQUFhLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsc0NBQXNDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsdUNBQXVDLENBQUM7WUFDbkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsc0NBQXNDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsdUNBQXVDLENBQUM7WUFDbkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsMkNBQTJDLENBQUM7WUFDdkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsNENBQTRDLENBQUM7U0FDekUsQ0FBQyxDQUFDLElBQUksQ0FDTCxHQUFHLENBQ0QsQ0FBQyxDQUNDLGFBQWEsRUFDYixjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLG1CQUFtQixFQUNuQixhQUFhLEVBQ2IsY0FBYyxFQUNmLEVBQUUsRUFBRTtZQUNILE9BQU87Z0JBQ0wsU0FBUyxFQUFFLGFBQWE7Z0JBQ3hCLFVBQVUsRUFBRSxjQUFjO2dCQUMxQixjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxlQUFlLEVBQUUsbUJBQW1CO2dCQUNwQyxTQUFTLEVBQUUsYUFBYTtnQkFDeEIsVUFBVSxFQUFFLGNBQWM7YUFDM0IsQ0FBQztRQUNKLENBQUMsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBRU8sYUFBYTtRQUNuQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNqQixJQUFJLFVBQVUsS0FBSyxVQUFVLENBQUMsRUFBRSxJQUFJLFVBQVUsS0FBSyxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUNoRSxVQUFVLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQzthQUM1QjtZQUNELE9BQU8sVUFBVSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOztrSEF4UFUscUJBQXFCO3NHQUFyQixxQkFBcUIsd0RDL0JsQyxvaFpBZ1dBOzJGRGpVYSxxQkFBcUI7a0JBSmpDLFNBQVM7K0JBQ0Usa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQXNtQ29uZmlnLFxuICBBc21DdXN0b21lckxpc3RGYWNhZGUsXG4gIEN1c3RvbWVyTGlzdENvbHVtbkFjdGlvblR5cGUsXG4gIEN1c3RvbWVyTGlzdHNQYWdlLFxuICBDdXN0b21lclNlYXJjaE9wdGlvbnMsXG4gIEN1c3RvbWVyU2VhcmNoUGFnZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9hc20vcm9vdCc7XG5pbXBvcnQgeyBTb3J0TW9kZWwsIFRyYW5zbGF0aW9uU2VydmljZSwgVXNlciB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBCUkVBS1BPSU5ULFxuICBCcmVha3BvaW50U2VydmljZSxcbiAgRm9jdXNDb25maWcsXG4gIElDT05fVFlQRSxcbiAgTGF1bmNoRGlhbG9nU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE5FVkVSLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEN1c3RvbWVyTGlzdEFjdGlvbiB9IGZyb20gJy4vY3VzdG9tZXItbGlzdC5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LWN1c3RvbWVyLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vY3VzdG9tZXItbGlzdC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbWVyTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJvdGVjdGVkIERFRkFVTFRfUEFHRV9TSVpFID0gNTtcblxuICBmb2N1c0NvbmZpZzogRm9jdXNDb25maWcgPSB7XG4gICAgdHJhcDogdHJ1ZSxcbiAgICBibG9jazogdHJ1ZSxcbiAgICBhdXRvZm9jdXM6ICdjdXN0b21lci1saXN0LXNlbGVjdG9yJyxcbiAgICBmb2N1c09uRXNjYXBlOiB0cnVlLFxuICB9O1xuXG4gIGljb25UeXBlcyA9IElDT05fVFlQRTtcblxuICBCUkVBS1BPSU5UID0gQlJFQUtQT0lOVDtcblxuICBzZWxlY3RlZFVzZXJHcm91cElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgY3VzdG9tZXJTZWFyY2hQYWdlJDogT2JzZXJ2YWJsZTxDdXN0b21lclNlYXJjaFBhZ2UgfCB1bmRlZmluZWQ+O1xuXG4gIGN1c3RvbWVyTGlzdHNQYWdlJDogT2JzZXJ2YWJsZTxDdXN0b21lckxpc3RzUGFnZSB8IHVuZGVmaW5lZD47XG5cbiAgc2VsZWN0ZWRDdXN0b21lcjogVXNlcjtcblxuICBjdXJyZW50UGFnZSA9IDA7XG5cbiAgbWF4UGFnZSA9IDA7XG5cbiAgbG9hZGVkID0gZmFsc2U7XG5cbiAgc29ydHM6IFNvcnRNb2RlbFtdIHwgbnVsbDtcblxuICBzb3J0Q29kZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGJyZWFrcG9pbnQkOiBPYnNlcnZhYmxlPEJSRUFLUE9JTlQ+O1xuXG4gIGN1c3RvbWVyTGlzdENvbmZpZzogUmVxdWlyZWQ8QXNtQ29uZmlnPlsnYXNtJ11bJ2N1c3RvbWVyTGlzdCddO1xuXG4gIGN1c3RvbWVyU2VhcmNoTG9hZGluZyQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgY3VzdG9tZXJTZWFyY2hFcnJvciQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgcGFnZVNpemU6IG51bWJlcjtcblxuICBsaXN0c0Vycm9yID0gZmFsc2U7XG5cbiAgbGlzdHNFbXB0eSA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCB0ZWFyZG93bjogU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlOiBMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBicmVha3BvaW50U2VydmljZTogQnJlYWtwb2ludFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGFzbUNvbmZpZzogQXNtQ29uZmlnLFxuICAgIHByb3RlY3RlZCB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBhc21DdXN0b21lckxpc3RGYWNhZGU6IEFzbUN1c3RvbWVyTGlzdEZhY2FkZVxuICApIHtcbiAgICB0aGlzLmJyZWFrcG9pbnQkID0gdGhpcy5nZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnBhZ2VTaXplID1cbiAgICAgIHRoaXMuYXNtQ29uZmlnLmFzbT8uY3VzdG9tZXJMaXN0Py5wYWdlU2l6ZSA/PyB0aGlzLkRFRkFVTFRfUEFHRV9TSVpFO1xuICAgIHRoaXMuY3VzdG9tZXJMaXN0Q29uZmlnID0gdGhpcy5hc21Db25maWc/LmFzbT8uY3VzdG9tZXJMaXN0O1xuXG4gICAgdGhpcy5jdXN0b21lckxpc3RzUGFnZSQgPVxuICAgICAgdGhpcy5hc21DdXN0b21lckxpc3RGYWNhZGUuZ2V0Q3VzdG9tZXJMaXN0c1N0YXRlKCkucGlwZShcbiAgICAgICAgdGFwKChzdGF0ZSkgPT4gKHRoaXMubGlzdHNFcnJvciA9ICEhc3RhdGUuZXJyb3IpKSxcbiAgICAgICAgbWFwKChzdGF0ZSkgPT4ge1xuICAgICAgICAgIGlmIChzdGF0ZT8uZGF0YT8udXNlckdyb3Vwcz8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RzRW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgdGFwKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAvLyBzZXQgdGhlIGZpcnN0IHZhbHVlIG9mIHRoaXMuY3VzdG9tZXJMaXN0c1BhZ2UkIHRvIGJlIHNlbGVjdGVkXG4gICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkVXNlckdyb3VwSWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRVc2VyR3JvdXBJZCA9IHJlc3VsdD8udXNlckdyb3Vwcz8uWzBdPy51aWQ7XG4gICAgICAgICAgICB0aGlzLnNvcnRzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hDdXN0b21lcnMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApID8/IE5FVkVSO1xuXG4gICAgdGhpcy5jdXN0b21lclNlYXJjaExvYWRpbmckID0gdGhpcy5hc21DdXN0b21lckxpc3RGYWNhZGVcbiAgICAgIC5nZXRDdXN0b21lckxpc3RDdXN0b21lcnNTZWFyY2hSZXN1bHRzTG9hZGluZygpXG4gICAgICAucGlwZSh0YXAoKGxvYWRpbmcpID0+ICh0aGlzLmxvYWRlZCA9ICFsb2FkaW5nKSkpO1xuICAgIHRoaXMudGVhcmRvd24uYWRkKHRoaXMuY3VzdG9tZXJTZWFyY2hMb2FkaW5nJC5zdWJzY3JpYmUoKSk7XG4gICAgdGhpcy50ZWFyZG93bi5hZGQoKCkgPT5cbiAgICAgIHRoaXMuYXNtQ3VzdG9tZXJMaXN0RmFjYWRlLmN1c3RvbWVyTGlzdEN1c3RvbWVyc1NlYXJjaFJlc2V0KClcbiAgICApO1xuXG4gICAgdGhpcy5jdXN0b21lclNlYXJjaEVycm9yJCA9XG4gICAgICB0aGlzLmFzbUN1c3RvbWVyTGlzdEZhY2FkZS5nZXRDdXN0b21lckxpc3RDdXN0b21lcnNTZWFyY2hSZXN1bHRzRXJyb3IoKTtcblxuICAgIHRoaXMuY3VzdG9tZXJTZWFyY2hQYWdlJCA9IHRoaXMuYXNtQ3VzdG9tZXJMaXN0RmFjYWRlXG4gICAgICAuZ2V0Q3VzdG9tZXJMaXN0Q3VzdG9tZXJzU2VhcmNoUmVzdWx0cygpXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0Py5zb3J0cykge1xuICAgICAgICAgICAgdGhpcy5zb3J0cyA9IHJlc3VsdC5zb3J0cztcbiAgICAgICAgICAgIHRoaXMuc29ydENvZGUgPSByZXN1bHQucGFnaW5hdGlvbj8uc29ydDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdD8uZW50cmllcy5sZW5ndGggPCB0aGlzLnBhZ2VTaXplKSB7XG4gICAgICAgICAgICB0aGlzLm1heFBhZ2UgPSByZXN1bHQucGFnaW5hdGlvbj8uY3VycmVudFBhZ2UgPz8gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXhQYWdlID0gdGhpcy5jdXJyZW50UGFnZSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudGVhcmRvd24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGZldGNoQ3VzdG9tZXJzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkVXNlckdyb3VwSWQpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnM6IEN1c3RvbWVyU2VhcmNoT3B0aW9ucyA9IHtcbiAgICAgICAgY3VzdG9tZXJMaXN0SWQ6IHRoaXMuc2VsZWN0ZWRVc2VyR3JvdXBJZCxcbiAgICAgICAgcGFnZVNpemU6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIGN1cnJlbnRQYWdlOiB0aGlzLmN1cnJlbnRQYWdlLFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLnNvcnRDb2RlKSB7XG4gICAgICAgIG9wdGlvbnMuc29ydCA9IHRoaXMuc29ydENvZGU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXNtQ3VzdG9tZXJMaXN0RmFjYWRlLmN1c3RvbWVyTGlzdEN1c3RvbWVyc1NlYXJjaFJlc2V0KCk7XG5cbiAgICAgIHRoaXMuYXNtQ3VzdG9tZXJMaXN0RmFjYWRlLmN1c3RvbWVyTGlzdEN1c3RvbWVyc1NlYXJjaChvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZUN1c3RvbWVyR3JvdXAoKTogdm9pZCB7XG4gICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XG4gICAgdGhpcy5zb3J0cyA9IG51bGw7XG4gICAgdGhpcy5zb3J0Q29kZSA9ICcnO1xuICAgIHRoaXMuZmV0Y2hDdXN0b21lcnMoKTtcbiAgfVxuXG4gIGdldEdyb3VwTmFtZShcbiAgICBjdXN0b21lckxpc3RzUGFnZTogQ3VzdG9tZXJMaXN0c1BhZ2UsXG4gICAgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiAoXG4gICAgICBjdXN0b21lckxpc3RzUGFnZT8udXNlckdyb3Vwcz8uZmluZCgodXNlckdyb3VwKSA9PiB1c2VyR3JvdXAudWlkID09PSBpZClcbiAgICAgICAgPy5uYW1lID8/ICcnXG4gICAgKTtcbiAgfVxuXG4gIGdldEJhZGdlVGV4dChjdXN0b21lckVudHJ5OiBVc2VyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKFxuICAgICAgKGN1c3RvbWVyRW50cnkuZmlyc3ROYW1lPy5jaGFyQXQoMCkgPz8gJycpICtcbiAgICAgIChjdXN0b21lckVudHJ5Lmxhc3ROYW1lPy5jaGFyQXQoMCkgPz8gJycpXG4gICAgKTtcbiAgfVxuXG4gIHN0YXJ0Q29sdW1uQWN0aW9uKFxuICAgIGN1c3RvbWVyRW50cnk6IFVzZXIsXG4gICAgYWN0aW9uOiBDdXN0b21lckxpc3RDb2x1bW5BY3Rpb25UeXBlXG4gICk6IHZvaWQge1xuICAgIHRoaXMuc2VsZWN0ZWRDdXN0b21lciA9IGN1c3RvbWVyRW50cnk7XG4gICAgY29uc3QgY2xvc2VWYWx1ZTogQ3VzdG9tZXJMaXN0QWN0aW9uID0ge1xuICAgICAgYWN0aW9uVHlwZTogYWN0aW9uLFxuICAgICAgc2VsZWN0ZWRVc2VyOiBjdXN0b21lckVudHJ5LFxuICAgIH07XG4gICAgdGhpcy5jbG9zZU1vZGFsKGNsb3NlVmFsdWUpO1xuICB9XG5cbiAgY2hhbmdlU29ydENvZGUoc29ydENvZGU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc29ydENvZGUgPSBzb3J0Q29kZTtcbiAgICB0aGlzLmZldGNoQ3VzdG9tZXJzKCk7XG4gIH1cblxuICBnb1RvTmV4dFBhZ2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPj0gdGhpcy5tYXhQYWdlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy5tYXhQYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5sb2FkZWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrO1xuICAgICAgICB0aGlzLmZldGNoQ3VzdG9tZXJzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ29Ub1ByZXZpb3VzUGFnZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA8PSAwKSB7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubG9hZGVkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UtLTtcbiAgICAgICAgdGhpcy5mZXRjaEN1c3RvbWVycygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNsb3NlTW9kYWwocmVhc29uPzogYW55KTogdm9pZCB7XG4gICAgdGhpcy5sYXVuY2hEaWFsb2dTZXJ2aWNlLmNsb3NlRGlhbG9nKHJlYXNvbik7XG4gIH1cblxuICBnZXRTb3J0TGFiZWxzKCk6IE9ic2VydmFibGU8e1xuICAgIGJ5TmFtZUFzYzogc3RyaW5nO1xuICAgIGJ5TmFtZURlc2M6IHN0cmluZztcbiAgICBieU9yZGVyRGF0ZUFzYzogc3RyaW5nO1xuICAgIGJ5T3JkZXJEYXRlRGVzYzogc3RyaW5nO1xuICAgIGJ5RGF0ZUFzYzogc3RyaW5nO1xuICAgIGJ5RGF0ZURlc2M6IHN0cmluZztcbiAgfT4ge1xuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFtcbiAgICAgIHRoaXMudHJhbnNsYXRpb24udHJhbnNsYXRlKCdhc20uY3VzdG9tZXJMaXN0LnRhYmxlU29ydC5ieU5hbWVBc2MnKSxcbiAgICAgIHRoaXMudHJhbnNsYXRpb24udHJhbnNsYXRlKCdhc20uY3VzdG9tZXJMaXN0LnRhYmxlU29ydC5ieU5hbWVEZXNjJyksXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZSgnYXNtLmN1c3RvbWVyTGlzdC50YWJsZVNvcnQuYnlEYXRlQXNjJyksXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZSgnYXNtLmN1c3RvbWVyTGlzdC50YWJsZVNvcnQuYnlEYXRlRGVzYycpLFxuICAgICAgdGhpcy50cmFuc2xhdGlvbi50cmFuc2xhdGUoJ2FzbS5jdXN0b21lckxpc3QudGFibGVTb3J0LmJ5T3JkZXJEYXRlQXNjJyksXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZSgnYXNtLmN1c3RvbWVyTGlzdC50YWJsZVNvcnQuYnlPcmRlckRhdGVEZXNjJyksXG4gICAgXSkucGlwZShcbiAgICAgIG1hcChcbiAgICAgICAgKFtcbiAgICAgICAgICB0ZXh0QnlOYW1lQXNjLFxuICAgICAgICAgIHRleHRCeU5hbWVEZXNjLFxuICAgICAgICAgIHRleHRCeU9yZGVyRGF0ZUFzYyxcbiAgICAgICAgICB0ZXh0QnlPcmRlckRhdGVEZXNjLFxuICAgICAgICAgIHRleHRCeURhdGVBc2MsXG4gICAgICAgICAgdGV4dEJ5RGF0ZURlc2MsXG4gICAgICAgIF0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYnlOYW1lQXNjOiB0ZXh0QnlOYW1lQXNjLFxuICAgICAgICAgICAgYnlOYW1lRGVzYzogdGV4dEJ5TmFtZURlc2MsXG4gICAgICAgICAgICBieU9yZGVyRGF0ZUFzYzogdGV4dEJ5T3JkZXJEYXRlQXNjLFxuICAgICAgICAgICAgYnlPcmRlckRhdGVEZXNjOiB0ZXh0QnlPcmRlckRhdGVEZXNjLFxuICAgICAgICAgICAgYnlEYXRlQXNjOiB0ZXh0QnlEYXRlQXNjLFxuICAgICAgICAgICAgYnlEYXRlRGVzYzogdGV4dEJ5RGF0ZURlc2MsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldEJyZWFrcG9pbnQoKTogT2JzZXJ2YWJsZTxCUkVBS1BPSU5UPiB7XG4gICAgcmV0dXJuIHRoaXMuYnJlYWtwb2ludFNlcnZpY2UuYnJlYWtwb2ludCQucGlwZShcbiAgICAgIG1hcCgoYnJlYWtwb2ludCkgPT4ge1xuICAgICAgICBpZiAoYnJlYWtwb2ludCA9PT0gQlJFQUtQT0lOVC5sZyB8fCBicmVha3BvaW50ID09PSBCUkVBS1BPSU5ULnhsKSB7XG4gICAgICAgICAgYnJlYWtwb2ludCA9IEJSRUFLUE9JTlQubWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJyZWFrcG9pbnQ7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiIsIjxkaXZcbiAgY2xhc3M9XCJjeC1hc20tY3VzdG9tZXItbGlzdCBjeC1tb2RhbC1jb250YWluZXIgY3gtYXNtLWRpYWxvZ1wiXG4gIFtjeEZvY3VzXT1cImZvY3VzQ29uZmlnXCJcbiAgKGVzYyk9XCJjbG9zZU1vZGFsKCdFc2NhcGUgY2xpY2tlZCcpXCJcbj5cbiAgPGRpdiBjbGFzcz1cImN4LW1vZGFsLWNvbnRlbnRcIj5cbiAgICA8IS0tIE1vZGFsIEhlYWRlciAtLT5cbiAgICA8bmctY29udGFpbmVyPlxuICAgICAgPGRpdiBjbGFzcz1cImN4LWRpYWxvZy1oZWFkZXIgbW9kYWwtaGVhZGVyXCI+XG4gICAgICAgIDxoMiBpZD1cImFzbS1jdXN0b21lci1saXN0LXRpdGxlXCIgY2xhc3M9XCJ0aXRsZSBtb2RhbC10aXRsZVwiPlxuICAgICAgICAgIHt7ICdhc20uY3VzdG9tZXJMaXN0LnRpdGxlJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICAgIDwvaDI+XG4gICAgICAgIDxkaXYgaWQ9XCJhc20tY3VzdG9tZXItbGlzdC1kZXNjXCIgY2xhc3M9XCJjeC12aXN1YWxseS1oaWRkZW5cIj5cbiAgICAgICAgICB7eyAnYXNtLmN1c3RvbWVyTGlzdC5kZXNjcmlwdGlvbicgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICpuZ1RlbXBsYXRlT3V0bGV0PVwiY2xvc2VCdXR0b25cIj48L25nLXRlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiY3gtZGlhbG9nLXN1Yi1oZWFkZXIgbW9kYWwtaGVhZGVyXCJcbiAgICAgICAgW2NsYXNzLnRhYmxldC1tb2JpbGVdPVwiKGJyZWFrcG9pbnQkIHwgYXN5bmMpICE9PSBCUkVBS1BPSU5ULm1kXCJcbiAgICAgICAgKm5nSWY9XCJjdXN0b21lckxpc3RzUGFnZSQgfCBhc3luYyBhcyBjdXN0b21lckxpc3RzUGFnZVwiXG4gICAgICA+XG4gICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgICAgICBncm91cFNlbGVjdG9yO1xuICAgICAgICAgICAgY29udGV4dDogeyBjdXN0b21lckxpc3RzUGFnZTogY3VzdG9tZXJMaXN0c1BhZ2UgfVxuICAgICAgICAgIFwiXG4gICAgICAgID48L25nLXRlbXBsYXRlPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCJjeC1oZWFkZXItYWN0aW9uc1wiXG4gICAgICAgICAgW2NsYXNzLm1vYmlsZV09XCIoYnJlYWtwb2ludCQgfCBhc3luYykgPT09IEJSRUFLUE9JTlQueHNcIlxuICAgICAgICA+XG4gICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ1RlbXBsYXRlT3V0bGV0PVwic29ydFwiPjwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ1RlbXBsYXRlT3V0bGV0PVwicGFnaW5hdGlvblwiPjwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8IS0tIE1vZGFsIEJvZHkgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtZGlhbG9nLWJvZHkgbW9kYWwtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtZGlhbG9nLXJvd1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1kaWFsb2ctaXRlbVwiPlxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cImxpc3RzRW1wdHlcIiBjbGFzcz1cImN4LWVycm9yLXN0YXRlXCI+XG4gICAgICAgICAgICAgIHt7ICdhc20uY3VzdG9tZXJMaXN0Lm5vTGlzdHMnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cImxpc3RzRXJyb3JcIiBjbGFzcz1cImN4LWVycm9yLXN0YXRlXCI+XG4gICAgICAgICAgICAgIHt7ICdhc20uY3VzdG9tZXJMaXN0Lmxpc3RzRXJyb3InIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cImN1c3RvbWVyU2VhcmNoRXJyb3IkIHwgYXN5bmNcIiBjbGFzcz1cImN4LWVycm9yLXN0YXRlXCI+XG4gICAgICAgICAgICAgIHt7ICdnZW5lcmFsRXJyb3JzLnBhZ2VGYWlsdXJlJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxjeC1zcGlubmVyICpuZ0lmPVwiY3VzdG9tZXJTZWFyY2hMb2FkaW5nJCB8IGFzeW5jXCI+PC9jeC1zcGlubmVyPlxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cImN1c3RvbWVyU2VhcmNoUGFnZSQgfCBhc3luYyBhcyBjdXN0b21lclNlYXJjaFBhZ2VcIj5cbiAgICAgICAgICAgICAgPHRhYmxlIGlkPVwiYXNtLWN1c29tZXItbGlzdC10YWJsZVwiIHJvbGU9XCJ0YWJsZVwiIGNsYXNzPVwidGFibGVcIj5cbiAgICAgICAgICAgICAgICA8Y2FwdGlvbiBjbGFzcz1cImN4LXZpc3VhbGx5LWhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICAgICAgJ2FzbS5jdXN0b21lckxpc3QudGl0bGUnIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPC9jYXB0aW9uPlxuICAgICAgICAgICAgICAgIDx0aGVhZCAqbmdJZj1cIihicmVha3BvaW50JCB8IGFzeW5jKSA9PT0gQlJFQUtQT0lOVC5tZFwiPlxuICAgICAgICAgICAgICAgICAgPHRyIHJvbGU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRoXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImNvbHVtbmhlYWRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjeC1hdmF0YXItY2VsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJjdXN0b21lckxpc3RDb25maWc/LnNob3dBdmF0YXJcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjeC12aXN1YWxseS1oaWRkZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhc20uY3VzdG9tZXJMaXN0LnRhYmxlSGVhZGVyLmN1c3RvbWVyJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImNvbHVtbmhlYWRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGNvbHVtbiBvZiBjdXN0b21lckxpc3RDb25maWc/LmNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJjb2x1bW4uaGVhZGVyTG9jYWxpemF0aW9uS2V5XCI+e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5oZWFkZXJMb2NhbGl6YXRpb25LZXkgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgIDx0clxuICAgICAgICAgICAgICAgICAgICByb2xlPVwicm93XCJcbiAgICAgICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGN1c3RvbWVyRW50cnkgb2YgY3VzdG9tZXJTZWFyY2hQYWdlPy5lbnRyaWVzXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHRkXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImNlbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiY3VzdG9tZXJMaXN0Q29uZmlnPy5zaG93QXZhdGFyXCJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImN4LWF2YXRhci1jZWxsXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1hdmF0YXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGdldEJhZGdlVGV4dChjdXN0b21lckVudHJ5KSB9fVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8IS0tIG11bHRpIGNvbHVtbnMgaWYgZGVza3RvcCAtLT5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiKGJyZWFrcG9pbnQkIHwgYXN5bmMpID09PSBCUkVBS1BPSU5ULm1kXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImNlbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGNvbHVtbiBvZiBjdXN0b21lckxpc3RDb25maWc/LmNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJFbnRyeTogY3VzdG9tZXJFbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0hlYWRlcjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPCEtLSB0d28gY29sdW1uIGlmIHRhYmxldCAtLT5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiKGJyZWFrcG9pbnQkIHwgYXN5bmMpID09PSBCUkVBS1BPSU5ULnNtXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCByb2xlPVwiY2VsbFwiIGNsYXNzPVwiY3gtbXVsdGktY2VsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdGb3I9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1uIG9mIGN1c3RvbWVyTGlzdENvbmZpZz8uY29sdW1ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXZlbiA9IGV2ZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImV2ZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lckVudHJ5OiBjdXN0b21lckVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dIZWFkZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCByb2xlPVwiY2VsbFwiIGNsYXNzPVwiY3gtbXVsdGktY2VsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdGb3I9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1uIG9mIGN1c3RvbWVyTGlzdENvbmZpZz8uY29sdW1ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2RkID0gb2RkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJvZGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lckVudHJ5OiBjdXN0b21lckVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dIZWFkZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPCEtLSBvbmUgY29sdW1uIGlmIG1vYmlsZSAtLT5cbiAgICAgICAgICAgICAgICAgICAgPHRkXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImNlbGxcIlxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY3gtbXVsdGktY2VsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCIoYnJlYWtwb2ludCQgfCBhc3luYykgPT09IEJSRUFLUE9JTlQueHNcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGNvbHVtbiBvZiBjdXN0b21lckxpc3RDb25maWc/LmNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJFbnRyeTogY3VzdG9tZXJFbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0hlYWRlcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID48L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjeC1lbXB0eS1zdGF0ZVwiXG4gICAgICAgICAgICAgICAgKm5nSWY9XCIhY3VzdG9tZXJTZWFyY2hQYWdlPy5lbnRyaWVzLmxlbmd0aFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7eyAnYXNtLmN1c3RvbWVyTGlzdC5ub0N1c3RvbWVycycgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cbjwvZGl2PlxuXG48bmctdGVtcGxhdGVcbiAgI2NlbGxcbiAgbGV0LWN1c3RvbWVyRW50cnk9XCJjdXN0b21lckVudHJ5XCJcbiAgbGV0LWNvbHVtbj1cImNvbHVtblwiXG4gIGxldC1zaG93SGVhZGVyPVwic2hvd0hlYWRlclwiXG4+XG4gIDxkaXYgY2xhc3M9XCJjeC1jZWxsLWNvbnRhaW5lclwiPlxuICAgIDxzcGFuIGNsYXNzPVwiY3gtaGVhZGVyLXRleHRcIiAqbmdJZj1cInNob3dIZWFkZXJcIj5cbiAgICAgIHt7IGNvbHVtbi5oZWFkZXJMb2NhbGl6YXRpb25LZXkgfCBjeFRyYW5zbGF0ZSB9fVxuICAgIDwvc3Bhbj5cblxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhY29sdW1uLmFjdGlvblR5cGVcIj5cbiAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcbiAgICAgICAgICBjZWxsQ29udGVudDtcbiAgICAgICAgICBjb250ZXh0OiB7IGNvbHVtbjogY29sdW1uLCBjdXN0b21lckVudHJ5OiBjdXN0b21lckVudHJ5IH1cbiAgICAgICAgXCJcbiAgICAgID48L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwiY29sdW1uLmFjdGlvblR5cGVcIlxuICAgICAgKGNsaWNrKT1cInN0YXJ0Q29sdW1uQWN0aW9uKGN1c3RvbWVyRW50cnksIGNvbHVtbi5hY3Rpb25UeXBlKVwiXG4gICAgICBjbGFzcz1cImJ0biBidG4tbGluayBjeC1hY3Rpb24tbGluayBjeC1idG4tY2VsbFwiXG4gICAgICBbYXR0ci50aXRsZV09XCJcbiAgICAgICAgY29sdW1uLmljb25cbiAgICAgICAgICA/IChjb2x1bW4uaWNvbi5jYXB0aW9uTG9jYWxpemF0aW9uS2V5ID8/IGNvbHVtbi5oZWFkZXJMb2NhbGl6YXRpb25LZXlcbiAgICAgICAgICAgIHwgY3hUcmFuc2xhdGUpXG4gICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgIFwiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cIlxuICAgICAgICBjb2x1bW4uaWNvblxuICAgICAgICAgID8gKGNvbHVtbi5pY29uLmNhcHRpb25Mb2NhbGl6YXRpb25LZXkgPz8gY29sdW1uLmhlYWRlckxvY2FsaXphdGlvbktleVxuICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgXCJcbiAgICA+XG4gICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgICAgY2VsbENvbnRlbnQ7XG4gICAgICAgICAgY29udGV4dDogeyBjb2x1bW46IGNvbHVtbiwgY3VzdG9tZXJFbnRyeTogY3VzdG9tZXJFbnRyeSB9XG4gICAgICAgIFwiXG4gICAgICA+PC9uZy1jb250YWluZXI+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cbjxuZy10ZW1wbGF0ZSAjY2VsbENvbnRlbnQgbGV0LWN1c3RvbWVyRW50cnk9XCJjdXN0b21lckVudHJ5XCIgbGV0LWNvbHVtbj1cImNvbHVtblwiPlxuICA8c3BhbiAqbmdJZj1cIiFjb2x1bW4uaWNvblwiPnt7XG4gICAgY29sdW1uLnJlbmRlcmVyPy4oY3VzdG9tZXJFbnRyeSkgfHwgJydcbiAgfX08L3NwYW4+XG4gIDxjeC1pY29uXG4gICAgKm5nSWY9XCJjb2x1bW4uaWNvblwiXG4gICAgW2F0dHIudGl0bGVdPVwiXG4gICAgICAhY29sdW1uLmFjdGlvblR5cGVcbiAgICAgICAgPyAoY29sdW1uLmljb24uY2FwdGlvbkxvY2FsaXphdGlvbktleSA/PyBjb2x1bW4uaGVhZGVyTG9jYWxpemF0aW9uS2V5XG4gICAgICAgICAgfCBjeFRyYW5zbGF0ZSlcbiAgICAgICAgOiB1bmRlZmluZWRcbiAgICBcIlxuICAgIFtjbGFzcy5jeC1hY3Rpb24tY29sb3JdPVwiY29sdW1uLmFjdGlvblR5cGVcIlxuICAgIFt0eXBlXT1cImNvbHVtbi5pY29uLnN5bWJvbFwiXG4gICAgW2F0dHIuYXJpYS1sYWJlbF09XCJcbiAgICAgICFjb2x1bW4uYWN0aW9uVHlwZVxuICAgICAgICA/IChjb2x1bW4uaWNvbi5jYXB0aW9uTG9jYWxpemF0aW9uS2V5ID8/IGNvbHVtbi5oZWFkZXJMb2NhbGl6YXRpb25LZXlcbiAgICAgICAgICB8IGN4VHJhbnNsYXRlKVxuICAgICAgICA6IHVuZGVmaW5lZFxuICAgIFwiXG4gID48L2N4LWljb24+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI3NvcnQ+XG4gIDxsYWJlbD5cbiAgICA8c3BhbiBjbGFzcz1cImN4LXZpc3VhbGx5LWhpZGRlblwiPnt7XG4gICAgICAnYXNtLmN1c3RvbWVyTGlzdC50YWJsZVNvcnQuc29ydEJ5JyB8IGN4VHJhbnNsYXRlXG4gICAgfX08L3NwYW4+XG4gICAgPGN4LXNvcnRpbmdcbiAgICAgIGNsYXNzPVwic29ydC1zZWxlY3RvclwiXG4gICAgICBbc29ydE9wdGlvbnNdPVwic29ydHNcIlxuICAgICAgW3NvcnRMYWJlbHNdPVwiZ2V0U29ydExhYmVscygpIHwgYXN5bmNcIlxuICAgICAgKHNvcnRMaXN0RXZlbnQpPVwiY2hhbmdlU29ydENvZGUoJGV2ZW50KVwiXG4gICAgICBbc2VsZWN0ZWRPcHRpb25dPVwic29ydENvZGVcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAnYXNtLmN1c3RvbWVyTGlzdC50YWJsZVNvcnQuc29ydEJ5JyB8IGN4VHJhbnNsYXRlIH19XCJcbiAgICAgIFtjeE5nU2VsZWN0QTExeV09XCJ7XG4gICAgICAgIGFyaWFMYWJlbDogc29ydENvZGUsXG4gICAgICAgIGFyaWFDb250cm9sczogJ2FzbS1jdXNvbWVyLWxpc3QtdGFibGUnXG4gICAgICB9XCJcbiAgICA+PC9jeC1zb3J0aW5nPlxuICA8L2xhYmVsPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlICNwYWdpbmF0aW9uPlxuICA8ZGl2IGNsYXNzPVwiY3gtcGFnaW5hdGlvbi1idXR0b25zXCI+XG4gICAgPGRpdj5cbiAgICAgIHt7XG4gICAgICAgICdhc20uY3VzdG9tZXJMaXN0LnBhZ2UucGFnZScgfCBjeFRyYW5zbGF0ZTogeyBjb3VudDogY3VycmVudFBhZ2UgKyAxIH1cbiAgICAgIH19XG4gICAgPC9kaXY+XG4gICAgPGJ1dHRvblxuICAgICAgKm5nSWY9XCJtYXhQYWdlID4gMFwiXG4gICAgICAoY2xpY2spPVwiZ29Ub1ByZXZpb3VzUGFnZSgpXCJcbiAgICAgIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGN4LWFjdGlvbi1saW5rIGN4LWJ0bi1wcmV2aW91c1wiXG4gICAgICBbZGlzYWJsZWRdPVwiY3VycmVudFBhZ2UgPT09IDAgfHwgIWxvYWRlZFwiXG4gICAgPlxuICAgICAgPGN4LWljb24gY2xhc3M9XCJwcmV2aW91c1wiIFt0eXBlXT1cImljb25UeXBlcy5DQVJFVF9MRUZUXCI+PC9jeC1pY29uXG4gICAgICA+PHNwYW4+e3sgJ2FzbS5jdXN0b21lckxpc3QucGFnZS5wcmV2aW91cycgfCBjeFRyYW5zbGF0ZSB9fTwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uXG4gICAgICAqbmdJZj1cIm1heFBhZ2UgPiAwXCJcbiAgICAgIChjbGljayk9XCJnb1RvTmV4dFBhZ2UoKVwiXG4gICAgICBjbGFzcz1cImJ0biBidG4tbGluayBjeC1hY3Rpb24tbGluayBjeC1idG4tbmV4dFwiXG4gICAgICBbZGlzYWJsZWRdPVwiY3VycmVudFBhZ2UgPT09IG1heFBhZ2UgfHwgIWxvYWRlZFwiXG4gICAgPlxuICAgICAgPHNwYW4+e3sgJ2FzbS5jdXN0b21lckxpc3QucGFnZS5uZXh0JyB8IGN4VHJhbnNsYXRlIH19PC9zcGFuXG4gICAgICA+PGN4LWljb24gY2xhc3M9XCJuZXh0XCIgW3R5cGVdPVwiaWNvblR5cGVzLkNBUkVUX1JJR0hUXCI+PC9jeC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZSAjZ3JvdXBTZWxlY3RvciBsZXQtY3VzdG9tZXJMaXN0c1BhZ2U9XCJjdXN0b21lckxpc3RzUGFnZVwiPlxuICA8bGFiZWw+XG4gICAgPHNwYW4gY2xhc3M9XCJjeC12aXN1YWxseS1oaWRkZW5cIj57e1xuICAgICAgJ2FzbS5jdXN0b21lckxpc3QudGl0bGUnIHwgY3hUcmFuc2xhdGVcbiAgICB9fTwvc3Bhbj5cbiAgICA8bmctc2VsZWN0XG4gICAgICBjbGFzcz1cImN1c3RvbWVyLWxpc3Qtc2VsZWN0b3JcIlxuICAgICAgW3NlYXJjaGFibGVdPVwiZmFsc2VcIlxuICAgICAgW2NsZWFyYWJsZV09XCJmYWxzZVwiXG4gICAgICAoY2hhbmdlKT1cIm9uQ2hhbmdlQ3VzdG9tZXJHcm91cCgpXCJcbiAgICAgIFt0YWJJbmRleF09XCIwXCJcbiAgICAgIFsobmdNb2RlbCldPVwic2VsZWN0ZWRVc2VyR3JvdXBJZFwiXG4gICAgICBbaXRlbXNdPVwiY3VzdG9tZXJMaXN0c1BhZ2U/LnVzZXJHcm91cHNcIlxuICAgICAgYmluZExhYmVsPVwibmFtZVwiXG4gICAgICBiaW5kVmFsdWU9XCJ1aWRcIlxuICAgICAgW2N4TmdTZWxlY3RBMTF5XT1cIntcbiAgICAgICAgYXJpYUxhYmVsOiBnZXRHcm91cE5hbWUoY3VzdG9tZXJMaXN0c1BhZ2UsIHNlbGVjdGVkVXNlckdyb3VwSWQpLFxuICAgICAgICBhcmlhQ29udHJvbHM6ICdhc20tY3Vzb21lci1saXN0LXRhYmxlJ1xuICAgICAgfVwiXG4gICAgPlxuICAgIDwvbmctc2VsZWN0PlxuICA8L2xhYmVsPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlICNjbG9zZUJ1dHRvbj5cbiAgPGJ1dHRvblxuICAgIHR5cGU9XCJidXR0b25cIlxuICAgIGNsYXNzPVwiY2xvc2VcIlxuICAgIGF0dHIuYXJpYS1sYWJlbD1cInt7ICdjb21tb24uY2xvc2UnIHwgY3hUcmFuc2xhdGUgfX1cIlxuICAgIChjbGljayk9XCJjbG9zZU1vZGFsKCdDcm9zcyBjbGljaycpXCJcbiAgPlxuICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgPGN4LWljb24gW3R5cGVdPVwiaWNvblR5cGVzLkNMT1NFXCI+PC9jeC1pY29uPlxuICAgIDwvc3Bhbj5cbiAgPC9idXR0b24+XG48L25nLXRlbXBsYXRlPlxuIl19