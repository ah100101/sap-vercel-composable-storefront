import { OnDestroy, OnInit } from '@angular/core';
import { AsmConfig, AsmCustomerListFacade, CustomerListColumnActionType, CustomerListsPage, CustomerSearchPage } from '@spartacus/asm/root';
import { SortModel, TranslationService, User } from '@spartacus/core';
import { BREAKPOINT, BreakpointService, FocusConfig, ICON_TYPE, LaunchDialogService } from '@spartacus/storefront';
import { Observable, Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare class CustomerListComponent implements OnInit, OnDestroy {
    protected launchDialogService: LaunchDialogService;
    protected breakpointService: BreakpointService;
    protected asmConfig: AsmConfig;
    protected translation: TranslationService;
    protected asmCustomerListFacade: AsmCustomerListFacade;
    protected DEFAULT_PAGE_SIZE: number;
    focusConfig: FocusConfig;
    iconTypes: typeof ICON_TYPE;
    BREAKPOINT: typeof BREAKPOINT;
    selectedUserGroupId: string | undefined;
    customerSearchPage$: Observable<CustomerSearchPage | undefined>;
    customerListsPage$: Observable<CustomerListsPage | undefined>;
    selectedCustomer: User;
    currentPage: number;
    maxPage: number;
    loaded: boolean;
    sorts: SortModel[] | null;
    sortCode: string | undefined;
    breakpoint$: Observable<BREAKPOINT>;
    customerListConfig: Required<AsmConfig>['asm']['customerList'];
    customerSearchLoading$: Observable<boolean>;
    customerSearchError$: Observable<boolean>;
    pageSize: number;
    listsError: boolean;
    listsEmpty: boolean;
    protected teardown: Subscription;
    constructor(launchDialogService: LaunchDialogService, breakpointService: BreakpointService, asmConfig: AsmConfig, translation: TranslationService, asmCustomerListFacade: AsmCustomerListFacade);
    ngOnInit(): void;
    ngOnDestroy(): void;
    fetchCustomers(): void;
    onChangeCustomerGroup(): void;
    getGroupName(customerListsPage: CustomerListsPage, id: string | undefined): string;
    getBadgeText(customerEntry: User): string;
    startColumnAction(customerEntry: User, action: CustomerListColumnActionType): void;
    changeSortCode(sortCode: string): void;
    goToNextPage(): void;
    goToPreviousPage(): void;
    closeModal(reason?: any): void;
    getSortLabels(): Observable<{
        byNameAsc: string;
        byNameDesc: string;
        byOrderDateAsc: string;
        byOrderDateDesc: string;
        byDateAsc: string;
        byDateDesc: string;
    }>;
    private getBreakpoint;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomerListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CustomerListComponent, "cx-customer-list", never, {}, {}, never, never, false, never>;
}
