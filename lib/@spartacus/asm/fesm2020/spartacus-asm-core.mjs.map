{"version":3,"file":"spartacus-asm-core.mjs","sources":["../../../feature-libs/asm/core/connectors/asm.adapter.ts","../../../feature-libs/asm/core/connectors/asm.connector.ts","../../../feature-libs/asm/core/connectors/converters.ts","../../../feature-libs/asm/core/connectors/index.ts","../../../feature-libs/asm/core/facade/asm-bind-cart.service.ts","../../../feature-libs/asm/core/store/actions/asm-ui.action.ts","../../../feature-libs/asm/core/store/asm-state.ts","../../../feature-libs/asm/core/store/actions/customer.action.ts","../../../feature-libs/asm/core/store/actions/logout-agent.action.ts","../../../feature-libs/asm/core/store/actions/customer-group.actions.ts","../../../feature-libs/asm/core/store/actions/index.ts","../../../feature-libs/asm/core/store/effects/customer.effect.ts","../../../feature-libs/asm/core/store/effects/index.ts","../../../feature-libs/asm/core/store/reducers/asm-ui.reducer.ts","../../../feature-libs/asm/core/store/reducers/index.ts","../../../feature-libs/asm/core/store/selectors/feature.selector.ts","../../../feature-libs/asm/core/store/selectors/asm-ui.selectors.ts","../../../feature-libs/asm/core/store/selectors/customer-search.selectors.ts","../../../feature-libs/asm/core/store/selectors/asm-group.selectors.ts","../../../feature-libs/asm/core/store/selectors/index.ts","../../../feature-libs/asm/core/store/index.ts","../../../feature-libs/asm/core/facade/asm-customer-list.service.ts","../../../feature-libs/asm/core/facade/facade-providers.ts","../../../feature-libs/asm/core/services/asm-state-persistence.service.ts","../../../feature-libs/asm/core/store/asm-store.module.ts","../../../feature-libs/asm/core/asm-core.module.ts","../../../feature-libs/asm/core/facade/asm.service.ts","../../../feature-libs/asm/core/facade/index.ts","../../../feature-libs/asm/core/services/index.ts","../../../feature-libs/asm/core/public_api.ts","../../../feature-libs/asm/core/spartacus-asm-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  BindCartParams,\n  CustomerListsPage,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '@spartacus/asm/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n\n  /**\n   * Abstract function used to get customer lists.\n   */\n  abstract customerLists(): Observable<CustomerListsPage>;\n\n  /**\n   * Used to bind an anonymous cart to a registered user.\n   */\n  abstract bindCart(options: BindCartParams): Observable<unknown>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  BindCartParams,\n  CustomerListsPage,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '@spartacus/asm/root';\nimport { Observable } from 'rxjs';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n\n  customerLists(): Observable<CustomerListsPage> {\n    return this.asmAdapter.customerLists();\n  }\n\n  bindCart(options: BindCartParams): Observable<unknown> {\n    return this.asmAdapter.bindCart(options);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { CustomerListsPage, CustomerSearchPage } from '@spartacus/asm/root';\nimport { Converter } from '@spartacus/core';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n\nexport const CUSTOMER_LISTS_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerListsPage>\n>('CustomerListsNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm.adapter';\nexport * from './asm.connector';\nexport * from './converters';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { AsmBindCartFacade } from '@spartacus/asm/root';\nimport { Command, CommandService } from '@spartacus/core';\nimport { UserAccountFacade } from '@spartacus/user/account/root';\nimport { Observable } from 'rxjs';\nimport { concatMap, map, take } from 'rxjs/operators';\nimport { AsmConnector } from '../connectors';\n\n@Injectable()\nexport class AsmBindCartService implements AsmBindCartFacade {\n  constructor(\n    protected commandService: CommandService,\n    protected asmConnector: AsmConnector,\n    protected userAccountFacade: UserAccountFacade\n  ) {}\n\n  protected bindCartCommand$: Command<string, unknown> =\n    this.commandService.create((cartId) =>\n      this.userAccountFacade.get().pipe(\n        map((user) => {\n          if (user?.uid) {\n            return user.uid;\n          } else {\n            throw new Error('No identifier for authenticated user found.');\n          }\n        }),\n        take(1),\n        concatMap((customerId) =>\n          this.asmConnector.bindCart({\n            cartId,\n            customerId,\n          })\n        )\n      )\n    );\n\n  bindCart(cartId: string): Observable<unknown> {\n    return this.bindCartCommand$.execute(cartId);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\nimport { AsmUi } from '@spartacus/asm/root';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { AsmUi, CustomerSearchPage } from '@spartacus/asm/root';\nimport { StateUtils } from '@spartacus/core';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA =\n  '[asm] Customer list customers search data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: StateUtils.LoaderState<CustomerSearchPage>;\n  customerListCustomersSearchResult: StateUtils.LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CustomerSearchOptions, CustomerSearchPage } from '@spartacus/asm/root';\nimport { StateUtils } from '@spartacus/core';\nimport {\n  CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport const CUSTOMER_LIST_CUSTOMERS_SEARCH =\n  '[Asm] Customer List Customers Search';\nexport const CUSTOMER_LIST_CUSTOMERS_SEARCH_FAIL =\n  '[Asm] Customer List Customers Search Fail';\nexport const CUSTOMER_LIST_CUSTOMERS_SEARCH_SUCCESS =\n  '[Asm] Customer List Customers Search Success';\nexport const CUSTOMER_LIST_CUSTOMERS_SEARCH_RESET =\n  '[Asm] Customer List Customers Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerListCustomersSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_LIST_CUSTOMERS_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA);\n  }\n}\n\nexport class CustomerListCustomersSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_LIST_CUSTOMERS_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA);\n  }\n}\n\nexport class CustomerListCustomersSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_LIST_CUSTOMERS_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA);\n  }\n}\n\nexport class CustomerListCustomersSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_LIST_CUSTOMERS_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset\n  | CustomerListCustomersSearch\n  | CustomerListCustomersSearchFail\n  | CustomerListCustomersSearchSuccess\n  | CustomerListCustomersSearchReset;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\n\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-ui.action';\nexport * from './customer.action';\nexport * from './logout-agent.action';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as AsmActions from './customer-group.actions';\nexport { AsmActions };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { CustomerSearchPage } from '@spartacus/asm/root';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  customerSearch$: Observable<AsmActions.CustomerAction> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AsmActions.CUSTOMER_SEARCH),\n      map((action: AsmActions.CustomerSearch) => action.payload),\n      switchMap((options) =>\n        this.asmConnector.customerSearch(options).pipe(\n          map((customerSearchResults: CustomerSearchPage) => {\n            return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n          }),\n          catchError((error) =>\n            of(new AsmActions.CustomerSearchFail(normalizeHttpError(error)))\n          )\n        )\n      )\n    )\n  );\n\n  customerListCustomersSearch$: Observable<AsmActions.CustomerAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(AsmActions.CUSTOMER_LIST_CUSTOMERS_SEARCH),\n        map((action: AsmActions.CustomerListCustomersSearch) => action.payload),\n        switchMap((options) =>\n          this.asmConnector.customerSearch(options).pipe(\n            map((customerListCustomersSearchResults: CustomerSearchPage) => {\n              return new AsmActions.CustomerListCustomersSearchSuccess(\n                customerListCustomersSearchResults\n              );\n            }),\n            catchError((error) =>\n              of(\n                new AsmActions.CustomerListCustomersSearchFail(\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CustomerEffects } from './customer.effect';\n\nexport const effects: any[] = [CustomerEffects];\n\nexport * from './customer.effect';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\nimport { AsmUi } from '@spartacus/asm/root';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(state: AsmUi = initialState, action: Action): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...(action as AsmActions.AsmUiUpdate).payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { CustomerSearchPage } from '@spartacus/asm/root';\nimport { StateUtils } from '@spartacus/core';\nimport { AsmActions } from '../actions';\nimport {\n  AsmState,\n  CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult:\n      StateUtils.loaderReducer<CustomerSearchPage>(CUSTOMER_SEARCH_DATA),\n    customerListCustomersSearchResult:\n      StateUtils.loaderReducer<CustomerSearchPage>(\n        CUSTOMER_LIST_CUSTOMERS_SEARCH_DATA\n      ),\n    asmUi: fromAsmUiReducer.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<AsmState>> =\n  new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state: AsmState | undefined, action: Action) {\n    if (action.type === AsmActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...(state as AsmState),\n        customerSearchResult: {} as StateUtils.LoaderState<CustomerSearchPage>,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<StateWithAsm, AsmState> =\n  createFeatureSelector<AsmState>(ASM_FEATURE);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '@spartacus/asm/root';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CustomerSearchPage } from '@spartacus/asm/root';\nimport { StateUtils } from '@spartacus/core';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(\n  getCustomerSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(\n  getCustomerSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getCustomerListCustomersSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerListCustomersSearchResult\n);\n\nexport const getCustomerListCustomersSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(\n  getCustomerListCustomersSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerListCustomersSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(\n  getCustomerListCustomersSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getCustomerListCustomersSearchResultsError: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(\n  getCustomerListCustomersSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-ui.selectors';\nexport * from './customer-search.selectors';\nexport * from './feature.selector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as AsmSelectors from './asm-group.selectors';\nexport { AsmSelectors };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './actions/index';\nexport * from './asm-state';\nexport * from './effects/index';\nexport * from './reducers/index';\nexport * from './selectors/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  AsmCustomerListFacade,\n  CustomerListsPage,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '@spartacus/asm/root';\nimport { Query, QueryService, QueryState } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AsmConnector } from '../connectors/asm.connector';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable()\nexport class AsmCustomerListService implements AsmCustomerListFacade {\n  protected customerListQuery$: Query<CustomerListsPage> =\n    this.queryService.create(() => this.asmConnector.customerLists(), {\n      reloadOn: undefined,\n      resetOn: undefined,\n    });\n\n  constructor(\n    protected queryService: QueryService,\n    protected asmConnector: AsmConnector,\n    protected store: Store<StateWithAsm>\n  ) {}\n\n  getCustomerLists(): Observable<CustomerListsPage | undefined> {\n    return this.customerListQuery$.get();\n  }\n\n  getCustomerListsState(): Observable<QueryState<CustomerListsPage>> {\n    return this.customerListQuery$.getState();\n  }\n\n  /**\n   * Search for customers in a customer list\n   */\n  customerListCustomersSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerListCustomersSearch(options));\n  }\n\n  /**\n   * Returns the customer search result data for a customer list\n   */\n  getCustomerListCustomersSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerListCustomersSearchResults)\n    );\n  }\n\n  /**\n   * Returns the customer list customers search result loading status.\n   */\n  getCustomerListCustomersSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerListCustomersSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Reset the customer list customers search result data to the initial state.\n   */\n  customerListCustomersSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerListCustomersSearchReset());\n  }\n\n  /**\n   * Returns the customer list customers search result error status.\n   */\n  getCustomerListCustomersSearchResultsError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerListCustomersSearchResultsError)\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport { AsmBindCartFacade, AsmCustomerListFacade } from '@spartacus/asm/root';\nimport { AsmBindCartService } from './asm-bind-cart.service';\nimport { AsmCustomerListService } from './asm-customer-list.service';\n\nexport const facadeProviders: Provider[] = [\n  AsmCustomerListService,\n  {\n    provide: AsmCustomerListFacade,\n    useExisting: AsmCustomerListService,\n  },\n  AsmBindCartService,\n  {\n    provide: AsmBindCartFacade,\n    useExisting: AsmBindCartService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { AsmAuthStorageService, AsmUi, TokenTarget } from '@spartacus/asm/root';\nimport { AuthToken, StatePersistenceService } from '@spartacus/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { AsmActions, AsmSelectors, StateWithAsm } from '../store';\n\n/**\n * ASM state synced to browser storage.\n */\nexport interface SyncedAsmState {\n  ui?: AsmUi;\n  emulatedUserToken?: AuthToken;\n  tokenTarget?: TokenTarget;\n}\n\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithAsm>,\n    protected authStorageService: AsmAuthStorageService\n  ) {}\n\n  /**\n   * Identifier used for storage key.\n   */\n  protected key = 'asm';\n\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: this.key,\n        state$: this.getAsmState(),\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n  protected getAsmState(): Observable<SyncedAsmState> {\n    return combineLatest([\n      this.store.pipe(\n        // Since getAsmState() may be called while the module is lazy loded\n        // The asm state slice may not exist yet in the first store emissions.\n        filter((store) => !!store.asm),\n        select(AsmSelectors.getAsmUi)\n      ),\n      of(this.authStorageService.getEmulatedUserToken()),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(([ui, emulatedUserToken, tokenTarget]) => {\n        let emulatedToken = emulatedUserToken;\n        if (emulatedToken) {\n          emulatedToken = { ...emulatedUserToken } as AuthToken;\n          // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n          delete emulatedToken.refresh_token;\n        }\n        return {\n          ui,\n          emulatedUserToken: emulatedToken,\n          tokenTarget,\n        };\n      })\n    );\n  }\n\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n  protected onRead(state: SyncedAsmState | undefined) {\n    if (state) {\n      if (state.ui) {\n        this.store.dispatch(new AsmActions.AsmUiUpdate(state.ui));\n      }\n      if (state.emulatedUserToken) {\n        this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n      }\n      if (state.tokenTarget) {\n        this.authStorageService.setTokenTarget(state.tokenTarget);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '@spartacus/core';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class AsmStoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MODULE_INITIALIZER } from '@spartacus/core';\nimport { AsmConnector } from './connectors/asm.connector';\nimport { facadeProviders } from './facade/facade-providers';\nimport { AsmStatePersistenceService } from './services/asm-state-persistence.service';\nimport { AsmStoreModule } from './store/asm-store.module';\n\nexport function asmStatePersistenceFactory(\n  asmStatePersistenceService: AsmStatePersistenceService\n): () => void {\n  const result = () => asmStatePersistenceService.initSync();\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule, AsmStoreModule],\n  providers: [\n    AsmConnector,\n    {\n      provide: MODULE_INITIALIZER,\n      useFactory: asmStatePersistenceFactory,\n      deps: [AsmStatePersistenceService],\n      multi: true,\n    },\n    ...facadeProviders,\n  ],\n})\nexport class AsmCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '@spartacus/asm/root';\nimport { Observable } from 'rxjs';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-customer-list.service';\nexport * from './asm.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-state-persistence.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-core.module';\nexport * from './connectors/index';\nexport * from './facade/index';\nexport * from './services/index';\nexport * from './store/actions/index';\nexport * from './store/asm-state';\nexport * from './store/selectors/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.AsmAdapter","i2.AsmConnector","AsmActions.CUSTOMER_SEARCH","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","AsmActions.CUSTOMER_LIST_CUSTOMERS_SEARCH","AsmActions.CustomerListCustomersSearchSuccess","AsmActions.CustomerListCustomersSearchFail","i1","AsmActions.ASM_UI_UPDATE","fromAsmUiReducer.reducer","AsmActions.LOGOUT_CUSTOMER_SUPPORT_AGENT","AsmActions.CustomerListCustomersSearch","AsmSelectors.getCustomerListCustomersSearchResults","AsmSelectors.getCustomerListCustomersSearchResultsLoading","AsmActions.CustomerListCustomersSearchReset","AsmSelectors.getCustomerListCustomersSearchResultsError","i3","AsmSelectors.getAsmUi","AsmActions.AsmUiUpdate","i2","AsmActions.CustomerSearch","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading"],"mappings":"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"}